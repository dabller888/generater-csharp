<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NVelocity</name>
    </assembly>
    <members>
        <!-- 对于成员“T:NVelocity.App.Event.EventCartridge”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.App.Event.EventCartridge.initializedHandlers">
            <summary> Ensure that handlers are not initialized more than once.</summary>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AddEventHandler(NVelocity.App.Event.IEventHandler)">
            <summary>  Adds an event handler(s) to the Cartridge.  This method
            will find all possible event handler interfaces supported
            by the passed in object.
            
            </summary>
            <param name="ev">object impementing a valid EventHandler-derived interface
            </param>
            <returns> true if a supported interface, false otherwise or if null
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AddReferenceInsertionEventHandler(NVelocity.App.Event.IReferenceInsertionEventHandler)">
            <summary>  Add a reference insertion event handler to the Cartridge.
            
            </summary>
            <param name="ev">IReferenceInsertionEventHandler
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AddNullSetEventHandler(NVelocity.App.Event.INullSetEventHandler)">
            <summary>  Add a null set event handler to the Cartridge.
            
            </summary>
            <param name="ev">NullSetEventHandler
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AddMethodExceptionHandler(NVelocity.App.Event.IMethodExceptionEventHandler)">
            <summary>  Add a method exception event handler to the Cartridge.
            
            </summary>
            <param name="ev">IMethodExceptionEventHandler
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AddIncludeEventHandler(NVelocity.App.Event.IIncludeEventHandler)">
            <summary>  Add an include event handler to the Cartridge.
            
            </summary>
            <param name="ev">IIncludeEventHandler
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AddInvalidReferenceEventHandler(NVelocity.App.Event.IInvalidReferenceEventHandler)">
            <summary>  Add an invalid reference event handler to the Cartridge.
            
            </summary>
            <param name="ev">IInvalidReferenceEventHandler
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.RemoveEventHandler(System.EventHandler)">
            <summary> Removes an event handler(s) from the Cartridge. This method will find all
            possible event handler interfaces supported by the passed in object and
            remove them.
            
            </summary>
            <param name="ev"> object impementing a valid EventHandler-derived interface
            </param>
            <returns> true if event handler was previously registered, false if not
            found
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.AttachToContext(NVelocity.Context.IContext)">
            <summary>  Attached the EventCartridge to the context
            
            Final because not something one should mess with lightly :)
            
            </summary>
            <param name="context">context to attach to
            </param>
            <returns> true if successful, false otherwise
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventCartridge.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <summary> Initialize the handlers.  For global handlers this is called when Velocity
            is initialized. For local handlers this is called when the first handler
            is executed.  Handlers will not be initialized more than once.
            
            </summary>
            <param name="rs">
            </param>
            <throws>  Exception </throws>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.App.Event.EventCartridge.ReferenceInsertionEventHandlers">
            <summary> Iterate through all the stored IReferenceInsertionEventHandler objects
            
            </summary>
            <returns> iterator of handler objects, null if there are not handlers
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.App.Event.EventCartridge.NullSetEventHandlers">
            <summary> Iterate through all the stored NullSetEventHandler objects
            
            </summary>
            <returns> iterator of handler objects
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.App.Event.EventCartridge.MethodExceptionEventHandlers">
            <summary> Iterate through all the stored IMethodExceptionEventHandler objects
            
            </summary>
            <returns> iterator of handler objects
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.App.Event.EventCartridge.IncludeEventHandlers">
            <summary> Iterate through all the stored IncludeEventHandlers objects
            
            </summary>
            <returns> iterator of handler objects
            </returns>
        </member>
        <member name="P:NVelocity.App.Event.EventCartridge.InvalidReferenceEventHandlers">
            <summary> Iterate through all the stored InvalidReferenceEventHandlers objects
            
            </summary>
            <returns> iterator of handler objects
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.App.Event.IEventHandlerMethodExecutor">
            <summary> Strategy object used to Execute event handler method.  Will be called
            while looping through all the chained event handler implementations.
            Each EventHandler method call should have a parallel executor object
            defined.  
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <version>  $Id: EventHandlerMethodExecutor.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.IEventHandlerMethodExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Execute the event handler method.  If Object is not null, do not 
            iterate further through the handler chain.
            If appropriate, the returned Object will be the return value.
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
            <exception cref="N:NVelocity.Exception">generic exception potentially thrown by event handlers
            </exception>
        </member>
        <member name="P:NVelocity.App.Event.IEventHandlerMethodExecutor.Done">
            <summary> Called after Execute() to see if iterating should stop. Should
            always return false before method Execute() is run.
            
            </summary>
            <returns> true if no more event handlers for this method should be called.
            </returns>
        </member>
        <member name="P:NVelocity.App.Event.IEventHandlerMethodExecutor.ReturnValue">
            <summary> Get return value at end of all the iterations
            
            </summary>
            <returns> null if no return value is required
            </returns>
        </member>
        <member name="T:NVelocity.App.Event.EventHandlerUtil">
            <summary> Calls on request all registered event handlers for a particular event. Each
            method accepts two event cartridges (typically one from the application and
            one from the context). All appropriate event handlers are executed in order
            until a stopping condition is met. See the docs for the individual methods to
            see what the stopping condition is for that method.
            
            </summary>
            <author>  <a href="mailto:wglass@wglass@forio.com">Will Glass-Husain </a>
            </author>
            <version>  $Id: EventHandlerUtil.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.ReferenceInsert(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.String,System.Object)">
            <summary> Called before a reference is inserted. All event handlers are called in
            sequence. The default implementation inserts the reference as is.
            
            This is a major hotspot method called by ASTReference render.
            
            </summary>
            <param name="reference">reference from template about to be inserted
            </param>
            <param name="value">value about to be inserted (after toString() )
            </param>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">The internal context adapter.
            </param>
            <returns> Object on which toString() should be called for output.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.ShouldLogOnNullSet(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.String,System.String)">
            <summary> Called when a null is evaluated during a #set. All event handlers are
            called in sequence until a false is returned. The default implementation
            always returns true.
            
            </summary>
            <param name="lhs">Left hand side of the expression.
            </param>
            <param name="rhs">Right hand side of the expression.
            </param>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">The internal context adapter.
            </param>
            <returns> true if to be logged, false otherwise
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.MethodException(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.Type,System.String,System.Exception)">
            <summary> Called when a method exception is generated during Velocity merge. Only
            the first valid event handler in the sequence is called. The default
            implementation simply rethrows the exception.
            
            </summary>
            <param name="claz">Class that is causing the exception
            </param>
            <param name="method">method called that causes the exception
            </param>
            <param name="e">Exception thrown by the method
            </param>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">The internal context adapter.
            </param>
            <returns> Object to return as method result
            </returns>
            <throws>  Exception </throws>
            <summary>             to be wrapped and propogated to app
            </summary>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.IncludeEvent(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.String,System.String,System.String)">
            <summary> Called when an include-type directive is encountered (#include or
            #parse). All the registered event handlers are called unless null is
            returned. The default implementation always processes the included
            resource.
            
            </summary>
            <param name="includeResourcePath">the path as given in the include directive.
            </param>
            <param name="currentResourcePath">the path of the currently rendering template that includes the
            include directive.
            </param>
            <param name="directiveName">name of the directive used to include the resource. (With the
            standard directives this is either "parse" or "include").
            </param>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">The internal context adapter.
            
            </param>
            <returns> a new resource path for the directive, or null to block the
            include from occurring.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.InvalidGetMethod(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.String,System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Called when an invalid get method is encountered.
            
            </summary>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="reference">complete invalid reference
            </param>
            <param name="object">object from reference, or null if not available
            </param>
            <param name="property">name of property, or null if not relevant
            </param>
            <param name="Info">contains Info on template, line, col
            </param>
            <returns> substitute return value for missing reference, or null if no substitute
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.InvalidSetMethod(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.String,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Called when an invalid set method is encountered.
            
            </summary>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="leftreference">left reference being assigned to
            </param>
            <param name="rightreference">invalid reference on the right
            </param>
            <param name="Info">contains Info on template, line, col
            </param>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.InvalidMethod(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,System.String,System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Called when an invalid method is encountered.
            
            </summary>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="reference">complete invalid reference
            </param>
            <param name="object">object from reference, or null if not available
            </param>
            <param name="method">name of method, or null if not relevant
            </param>
            <param name="Info">contains Info on template, line, col
            </param>
            <returns> substitute return value for missing reference, or null if no substitute
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.InvalidReferenceHandlerCall(NVelocity.App.Event.IEventHandlerMethodExecutor,NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter)">
            <summary> Calls event handler method with appropriate chaining across event handlers.
            
            </summary>
            <param name="methodExecutor">
            </param>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="context">The current context
            </param>
            <returns> return value from method, or null if no return value
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.InitializeEventCartridge(NVelocity.Runtime.IRuntimeServices,NVelocity.App.Event.EventCartridge)">
            <summary> Initialize the event cartridge if appropriate.
            
            </summary>
            <param name="rsvc">current instance of RuntimeServices
            </param>
            <param name="eventCartridge">the event cartridge to be initialized
            </param>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.CallEventHandlers(System.Collections.IEnumerator,System.Collections.IEnumerator,NVelocity.App.Event.IEventHandlerMethodExecutor)">
            <summary> Loop through both the application level and context-attached event handlers.
            
            </summary>
            <param name="applicationEventHandlerIterator">Iterator that loops through all global event handlers declared at application level
            </param>
            <param name="contextEventHandlerIterator">Iterator that loops through all global event handlers attached to context
            </param>
            <param name="eventExecutor">Strategy object that executes event handler method
            </param>
            <exception cref="N:NVelocity.Exception">generic exception potentially thrown by event handlers
            </exception>
        </member>
        <member name="M:NVelocity.App.Event.EventHandlerUtil.LterateOverEventHandlers(System.Collections.IEnumerator,NVelocity.App.Event.IEventHandlerMethodExecutor)">
            <summary> Loop through a given iterator of event handlers.
            
            </summary>
            <param name="handlerIterator">Iterator that loops through event handlers
            </param>
            <param name="eventExecutor">Strategy object that executes event handler method
            </param>
            <exception cref="N:NVelocity.Exception">generic exception potentially thrown by event handlers
            </exception>
        </member>
        <member name="T:NVelocity.App.Event.IEventHandler">
            <summary> Base interface for all event handlers
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: EventHandler.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.EscapeHtmlReference”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:NVelocity.App.Event.Implement.EscapeReference”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Event.IReferenceInsertionEventHandler.ReferenceInsert(System.String,System.Object)">
            <summary> A call-back which is executed during Velocity merge before a reference
            value is inserted into the output stream. All registered
            ReferenceInsertionEventHandlers are called in sequence. If no
            ReferenceInsertionEventHandlers are are registered then reference value
            is inserted into the output stream as is.
            
            </summary>
            <param name="reference">Reference from template about to be inserted.
            </param>
            <param name="value">Value about to be inserted (after its <code>toString()</code>
            method is called).
            </param>
            <returns> Object on which <code>toString()</code> should be called for
            output.
            </returns>
        </member>
        <member name="T:NVelocity.Util.IRuntimeServicesAware">
            <summary> Use this interface to automatically
            have the method setRuntimeServices called at initialization.  
            Applies to EventHandler and Uberspect implementations.
            
            </summary>
            <author>  <a href="mailto:wglass@wglass@forio.com">Will Glass-Husain</a>
            </author>
            <version>  $Id: RuntimeServicesAware.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Util.IRuntimeServicesAware.SetRuntimeServices(NVelocity.Runtime.IRuntimeServices)">
            <summary> Called automatically when event cartridge is initialized.</summary>
            <param name="rs">RuntimeServices object assigned during initialization
            </param>
        </member>
        <member name="M:NVelocity.App.Event.Implement.EscapeReference.Escape(System.Object)">
            <summary> Escape the given text.  Override this in a subclass to do the parameters
            escaping.
            
            </summary>
            <param name="text">the text to escape
            </param>
            <returns> the escaped text
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.Implement.EscapeReference.ReferenceInsert(System.String,System.Object)">
            <summary> Escape the provided text if it matches the configured regular expression.
            
            </summary>
            <param name="reference">
            </param>
            <param name="value">
            </param>
            <returns> Escaped text.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.Implement.EscapeReference.SetRuntimeServices(NVelocity.Runtime.IRuntimeServices)">
            <summary> Called automatically when event cartridge is initialized.
            
            </summary>
            <param name="rs">instance of RuntimeServices
            </param>
        </member>
        <member name="M:NVelocity.App.Event.Implement.EscapeReference.GetRuntimeServices">
            <summary> Retrieve a reference to RuntimeServices.  Use this for checking additional
            configuration properties.
            
            </summary>
            <returns> The current runtime services object.
            </returns>
        </member>
        <!-- 对于成员“P:NVelocity.App.Event.Implement.EscapeReference.MatchAttribute”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.App.Event.Implement.EscapeHtmlReference.Escape(System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.App.Event.Implement.EscapeHtmlReference.MatchAttribute">
            <returns> attribute "eventhandler.escape.html.match"
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.EscapeJavaScriptReference”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.App.Event.Implement.EscapeJavaScriptReference.Escape(System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.App.Event.Implement.EscapeJavaScriptReference.MatchAttribute">
            <returns> attribute "eventhandler.escape.javascript.match"
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.EscapeSqlReference”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.App.Event.Implement.EscapeSqlReference.Escape(System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.App.Event.Implement.EscapeSqlReference.MatchAttribute">
            <returns> attribute "eventhandler.escape.sql.match"
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.EscapeXmlReference”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.App.Event.Implement.EscapeXmlReference.Escape(System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.App.Event.Implement.EscapeXmlReference.MatchAttribute">
            <returns> attribute "eventhandler.escape.xml.match"
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.IncludeNotFound”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Event.IIncludeEventHandler.IncludeEvent(System.String,System.String,System.String)">
            <summary> Called when an include-type directive is encountered (
            <code>#include</code> or <code>#parse</code>). May modify the path
            of the resource to be included or may block the include entirely. All the
            registered IncludeEventHandlers are called unless null is returned. If
            none are registered the template at the includeResourcePath is retrieved.
            
            </summary>
            <param name="includeResourcePath"> the path as given in the include directive.
            </param>
            <param name="currentResourcePath">the path of the currently rendering template that includes the
            include directive.
            </param>
            <param name="directiveName"> name of the directive used to include the resource. (With the
            standard directives this is either "parse" or "include").
            
            </param>
            <returns> a new resource path for the directive, or null to block the
            include from occurring.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.Implement.IncludeNotFound.IncludeEvent(System.String,System.String,System.String)">
            <summary> Chseck to see if included file exists, and display "not found" page if it
            doesn't. If "not found" page does not exist, Log an Error and return
            null.
            
            </summary>
            <param name="includeResourcePath">
            </param>
            <param name="currentResourcePath">
            </param>
            <param name="directiveName">
            </param>
            <returns> message.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.Implement.IncludeNotFound.SetRuntimeServices(NVelocity.Runtime.IRuntimeServices)">
            <seealso cref="!:org.apache.velocity.util.RuntimeServicesAware.setRuntimeServices(org.apache.velocity.runtime.RuntimeServices)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.IncludeRelativePath”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Event.Implement.IncludeRelativePath.IncludeEvent(System.String,System.String,System.String)">
            <summary> Return path relative to the current template's path.
            
            </summary>
            <param name="includeResourcePath"> the path as given in the include directive.
            </param>
            <param name="currentResourcePath">the path of the currently rendering template that includes the
            include directive.
            </param>
            <param name="directiveName"> name of the directive used to include the resource. (With the
            standard directives this is either "parse" or "include").
            </param>
            <returns> new path relative to the current template's path
            </returns>
        </member>
        <member name="T:NVelocity.App.Event.Implement.InvalidReferenceInfo">
            <summary> Convenience class to use when reporting out invalid syntax 
            with line, column, and template name.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain </a>
            </author>
            <version>  $Id: InvalidReferenceInfo.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Util.Introspection.Info">
            <summary>  Little class to carry in Info such as template name, line and column
            for information Error reporting from the uberspector implementations
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: Info.java 704179 2008-10-13 17:42:11Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Util.Introspection.Info.#ctor(System.String,System.Int32,System.Int32)">
            <param name="source">Usually a template name.
            </param>
            <param name="line">The line number from <code>source</code>.
            </param>
            <param name="column">The column number from <code>source</code>.
            </param>
        </member>
        <member name="M:NVelocity.Util.Introspection.Info.#ctor">
            <summary> Force callers to set the location information.</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.Info.ToString">
            <summary> Formats a textual representation of this object as <code>SOURCE
            [line X, column Y]</code>.
            
            </summary>
            <returns> String representing this object.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Util.Introspection.Info.TemplateName">
            <returns> The template name.
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.Info.Line">
            <returns> The line number.
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.Info.Column">
            <returns> The column number.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.Implement.InvalidReferenceInfo.ToString">
            <summary> Formats a textual representation of this object as <code>SOURCE
            [line X, column Y]: invalidReference</code>.
            
            </summary>
            <returns> String representing this object.
            </returns>
        </member>
        <member name="P:NVelocity.App.Event.Implement.InvalidReferenceInfo.InvalidReference">
            <summary> Get the specific invalid reference string.</summary>
            <returns> the invalid reference string
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.PrintExceptions”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Event.IMethodExceptionEventHandler.MethodException(System.Type,System.String,System.Exception)">
            <summary> Called when a method throws an exception.
            Only the first registered IMethodExceptionEventHandler is called.  If
            none are registered a MethodInvocationException is thrown.
            
            </summary>
            <param name="claz">the class of the object the method is being applied to
            </param>
            <param name="method">the method
            </param>
            <param name="e">the thrown exception
            </param>
            <returns> an object to insert in the page
            </returns>
            <throws>  Exception an exception to be thrown instead inserting an object </throws>
        </member>
        <member name="F:NVelocity.App.Event.Implement.PrintExceptions.rs">
            <summary>Reference to the runtime service </summary>
        </member>
        <member name="M:NVelocity.App.Event.Implement.PrintExceptions.MethodException(System.Type,System.String,System.Exception)">
            <summary> Render the method exception, and optionally the exception message and stack Trace.
            
            </summary>
            <param name="claz">the class of the object the method is being applied to
            </param>
            <param name="method">the method
            </param>
            <param name="e">the thrown exception
            </param>
            <returns> an object to insert in the page
            </returns>
            <throws>  Exception an exception to be thrown instead inserting an object </throws>
        </member>
        <member name="M:NVelocity.App.Event.Implement.PrintExceptions.SetRuntimeServices(NVelocity.Runtime.IRuntimeServices)">
            <seealso cref="!:org.apache.velocity.util.RuntimeServicesAware.setRuntimeServices(org.apache.velocity.runtime.RuntimeServices)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.Implement.ReportInvalidReferences”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Event.IInvalidReferenceEventHandler.InvalidGetMethod(NVelocity.Context.IContext,System.String,System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Called when object is null or there is no getter for the given 
            property.  Also called for invalid references without properties.  
            InvalidGetMethod() will be called in sequence for
            each link in the chain until the first non-null value is
            returned.
            
            </summary>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="reference">string with complete invalid reference
            </param>
            <param name="object">the object referred to, or null if not found
            </param>
            <param name="property">the property name from the reference
            </param>
            <param name="Info">contains template, line, column details
            </param>
            <returns> substitute return value for missing reference, or null if no substitute
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.IInvalidReferenceEventHandler.InvalidSetMethod(NVelocity.Context.IContext,System.String,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Called when object is null or there is no setter for the given 
            property.  InvalidSetMethod() will be called in sequence for
            each link in the chain until a true value is returned.  It's
            recommended that false be returned as a default to allow
            for easy chaining.
            
            </summary>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="leftreference">left reference being assigned to
            </param>
            <param name="rightreference">invalid reference on the right
            </param>
            <param name="Info">contains Info on template, line, col
            
            </param>
            <returns> if true then stop calling InvalidSetMethod along the 
            chain.
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.IInvalidReferenceEventHandler.InvalidMethod(NVelocity.Context.IContext,System.String,System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Called when object is null or the given method does not exist.
            InvalidMethod() will be called in sequence for each link in 
            the chain until the first non-null value is returned. 
            
            </summary>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="reference">string with complete invalid reference
            </param>
            <param name="object">the object referred to, or null if not found
            </param>
            <param name="method">the name of the (non-existent) method
            </param>
            <param name="Info">contains template, line, column details
            </param>
            <returns> substitute return value for missing reference, or null if no substitute
            </returns>
        </member>
        <member name="F:NVelocity.App.Event.Implement.ReportInvalidReferences.invalidReferences">
            <summary> List of InvalidReferenceInfo objects</summary>
        </member>
        <member name="F:NVelocity.App.Event.Implement.ReportInvalidReferences.stopOnFirstInvalidReference">
            <summary> If true, stop at the first invalid reference and throw an exception.</summary>
        </member>
        <member name="M:NVelocity.App.Event.Implement.ReportInvalidReferences.InvalidGetMethod(NVelocity.Context.IContext,System.String,System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Collect the Error and/or throw an exception, depending on configuration.
            
            </summary>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="reference">string with complete invalid reference
            </param>
            <param name="object">the object referred to, or null if not found
            </param>
            <param name="property">the property name from the reference
            </param>
            <param name="Info">contains template, line, column details
            </param>
            <returns> always returns null
            </returns>
            <throws>  ParseErrorException </throws>
        </member>
        <member name="M:NVelocity.App.Event.Implement.ReportInvalidReferences.InvalidMethod(NVelocity.Context.IContext,System.String,System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Collect the Error and/or throw an exception, depending on configuration.
            
            </summary>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="reference">complete invalid reference
            </param>
            <param name="object">the object referred to, or null if not found
            </param>
            <param name="method">the property name from the reference
            </param>
            <param name="Info">contains template, line, column details
            </param>
            <returns> always returns null
            </returns>
            <throws>  ParseErrorException </throws>
        </member>
        <member name="M:NVelocity.App.Event.Implement.ReportInvalidReferences.InvalidSetMethod(NVelocity.Context.IContext,System.String,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Collect the Error and/or throw an exception, depending on configuration.
            
            </summary>
            <param name="context">the context when the reference was found invalid
            </param>
            <param name="leftreference">left reference being assigned to
            </param>
            <param name="rightreference">invalid reference on the right
            </param>
            <param name="Info">contains Info on template, line, col
            </param>
            <returns> loop to end -- always returns false
            </returns>
        </member>
        <member name="M:NVelocity.App.Event.Implement.ReportInvalidReferences.reportInvalidReference(System.String,NVelocity.Util.Introspection.Info)">
            <summary> Check for an invalid reference and collect the Error or throw an exception 
            (depending on configuration).
            
            </summary>
            <param name="reference">the invalid reference
            </param>
            <param name="Info">line, column, template name
            </param>
        </member>
        <member name="M:NVelocity.App.Event.Implement.ReportInvalidReferences.SetRuntimeServices(NVelocity.Runtime.IRuntimeServices)">
            <summary> Called automatically when event cartridge is initialized.</summary>
            <param name="rs">RuntimeServices object assigned during initialization
            </param>
        </member>
        <member name="P:NVelocity.App.Event.Implement.ReportInvalidReferences.InvalidReferences">
            <summary> All invalid references during the processing of this page.</summary>
            <returns> a List of InvalidReferenceInfo objects
            </returns>
        </member>
        <member name="T:NVelocity.App.Event.IncludeEventExecutor">
            <summary>  Event handler for include type directives (e.g. <code>#include()</code>, <code>#parse()</code>)
            Allows the developer to modify the path of the resource returned.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <version>  $Id: IIncludeEventHandler.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
            <summary> Defines the execution strategy for IncludeEvent</summary>
        </member>
        <member name="M:NVelocity.App.Event.IncludeEventExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method IncludeEvent()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
        </member>
        <!-- 对于成员“T:NVelocity.App.Event.InvalidGetMethodExecutor”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Event.InvalidGetMethodExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method InvalidGetMethod()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
        </member>
        <member name="T:NVelocity.App.Event.InvalidSetMethodExecutor">
            <summary> Defines the execution strategy for InvalidGetMethod</summary>
        </member>
        <member name="M:NVelocity.App.Event.InvalidSetMethodExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method InvalidSetMethod()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
        </member>
        <member name="T:NVelocity.App.Event.InvalidMethodExecutor">
            <summary> Defines the execution strategy for InvalidGetMethod</summary>
        </member>
        <member name="M:NVelocity.App.Event.InvalidMethodExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method InvalidMethod()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
        </member>
        <member name="T:NVelocity.App.Event.MethodExceptionExecutor">
            <summary>  Event handler called when a method throws an exception.  This gives the
            application a chance to deal with it and either
            return something nice, or throw.
            
            Please return what you want rendered into the output stream.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: IMethodExceptionEventHandler.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <summary> Defines the execution strategy for MethodException</summary>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.MethodExceptionExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method MethodException()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
            <exception cref="T:System.Exception">generic exception thrown by MethodException event handler method call
            </exception>
        </member>
        <member name="P:NVelocity.App.Event.MethodExceptionExecutor.Done">
            <summary> Only run the first IMethodExceptionEventHandler
            
            </summary>
            <returns> true after this is executed once.
            </returns>
        </member>
        <member name="T:NVelocity.App.Event.ShouldLogOnNullSetExecutor">
            <summary>  Event handler called when the RHS of #set is null.  Lets an app approve / veto
            writing a Log message based on the specific reference.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: NullSetEventHandler.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <summary> Defines the execution strategy for ShouldLogOnNullSet</summary>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.App.Event.ShouldLogOnNullSetExecutor.result">
            <summary> when this is false, quit iterating</summary>
        </member>
        <member name="M:NVelocity.App.Event.ShouldLogOnNullSetExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method ShouldLogOnNullSet()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
        </member>
        <member name="M:NVelocity.App.Event.INullSetEventHandler.shouldLogOnNullSet(System.String,System.String)">
            <summary> Called when the RHS of a #set() is null, which will result
            in a null LHS. All NullSetEventHandlers
            are called in sequence until a false is returned.  If no NullSetEventHandler
            is registered all nulls will be logged.
            
            </summary>
            <param name="lhs"> reference literal of left-hand-side of set statement
            </param>
            <param name="rhs"> reference literal of right-hand-side of set statement
            </param>
            <returns> true if Log message should be written, false otherwise
            </returns>
        </member>
        <member name="T:NVelocity.App.Event.ReferenceInsertExecutor">
            <summary>  Reference 'Stream insertion' event handler.  Called with object
            that will be inserted into stream via value.toString().
            
            Please return an Object that will toString() nicely :)
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: IReferenceInsertionEventHandler.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <summary> Defines the execution strategy for ReferenceInsert</summary>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.Event.ReferenceInsertExecutor.Execute(NVelocity.App.Event.IEventHandler)">
            <summary> Call the method ReferenceInsert()
            
            </summary>
            <param name="handler">call the appropriate method on this handler
            </param>
        </member>
        <member name="P:NVelocity.App.Event.ReferenceInsertExecutor.Done">
            <summary> Continue to end of event handler iteration
            
            </summary>
            <returns> always returns false
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.App.Velocity”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Velocity.Init">
            <summary>  Initialize the Velocity runtime engine, using the default
            properties of the Velocity distribution
            
            </summary>
            <throws>  Exception When an Error during initialization occurs. </throws>
        </member>
        <member name="M:NVelocity.App.Velocity.Init(System.String)">
            <summary>  Initialize the Velocity runtime engine, using default properties
            plus the properties in the properties file passed in as the arg
            
            </summary>
            <param name="propsFilename">file containing properties to use to Initialize
            the Velocity runtime
            </param>
            <throws>  Exception When an Error during initialization occurs. </throws>
        </member>
        <member name="M:NVelocity.App.Velocity.Init(Commons.Collections.ExtendedProperties)">
            <summary>  Initialize the Velocity runtime engine, using default properties
            plus the properties in the passed in java.util.Properties object
            
            </summary>
            <param name="p"> Properties object containing initialization properties
            </param>
            <throws>  Exception When an Error during initialization occurs. </throws>
            <summary> 
            </summary>
        </member>
        <member name="M:NVelocity.App.Velocity.SetProperty(System.String,System.Object)">
            <summary> Set a Velocity Runtime property.
            
            </summary>
            <param name="key">The property key.
            </param>
            <param name="value">The property value.
            </param>
        </member>
        <member name="M:NVelocity.App.Velocity.AddProperty(System.String,System.Object)">
            <summary> Add a Velocity Runtime property.
            
            </summary>
            <param name="key">The property key.
            </param>
            <param name="value">The property value.
            </param>
        </member>
        <member name="M:NVelocity.App.Velocity.ClearProperty(System.String)">
            <summary> Clear a Velocity Runtime property.
            
            </summary>
            <param name="key">of property to clear
            </param>
        </member>
        <member name="M:NVelocity.App.Velocity.GetProperty(System.String)">
            <summary>  Get a Velocity Runtime property.
            
            </summary>
            <param name="key">property to retrieve
            </param>
            <returns> property value or null if the property
            not currently set
            </returns>
        </member>
        <member name="M:NVelocity.App.Velocity.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.String)">
            <summary>  renders the input string using the context into the output writer.
            To be used when a template is dynamically constructed, or want to use
            Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="out"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log
            messages in case of Error
            </param>
            <param name="instring">input string containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While rendering to the writer, an I/O problem occured. </throws>
        </member>
        <member name="M:NVelocity.App.Velocity.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.IO.TextReader)">
            <summary>  Renders the input reader using the context into the output writer.
            To be used when a template is dynamically constructed, or want to
            use Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="writer"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log messages
            in case of Error
            </param>
            <param name="reader">Reader containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While reading from the reader or rendering to the writer, </throws>
            <summary>                     an I/O problem occured.
            </summary>
            <since> Velocity v1.1
            </since>
        </member>
        <!-- 对于成员“M:NVelocity.App.Velocity.InvokeVelocimacro(System.String,System.String,System.String[],NVelocity.Context.IContext,System.IO.TextWriter)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.Velocity.MergeTemplate(System.String,System.String,NVelocity.Context.IContext,System.IO.TextWriter)">
            <summary>  merges a template and puts the rendered stream into the writer
            
            </summary>
            <param name="templateName">name of template to be used in merge
            </param>
            <param name="encoding">encoding used in template
            </param>
            <param name="context"> filled context to be used in merge
            </param>
            <param name="writer"> writer to write template into
            
            </param>
            <returns> true if successful, false otherwise.  Errors
            logged to velocity Log
            
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  Exception Any other exception. </throws>
            <summary> 
            </summary>
            <since> Velocity v1.1
            </since>
        </member>
        <member name="M:NVelocity.App.Velocity.GetTemplate(System.String)">
            <summary>  Returns a <code>Template</code> from the Velocity
            resource management system.
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
        </member>
        <member name="M:NVelocity.App.Velocity.GetTemplate(System.String,System.String)">
            <summary>  Returns a <code>Template</code> from the Velocity
            resource management system.
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <param name="encoding">The character encoding to use for the template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
            <summary> 
            </summary>
            <since> Velocity v1.1
            </since>
        </member>
        <member name="M:NVelocity.App.Velocity.ResourceExists(System.String)">
            <summary> <p>Determines whether a resource is accessable via the
            currently configured resource loaders.  {@link
            org.apache.velocity.runtime.resource.Resource} is the generic
            description of templates, static content, etc.</p>
            
            <p>Note that the current implementation will <b>not</b> change
            the state of the system in any real way - so this cannot be
            used to pre-load the resource cache, as the previous
            implementation did as a side-effect.</p>
            
            </summary>
            <param name="resourceName">The name of the resource to search for.
            </param>
            <returns> Whether the resource was located.
            </returns>
        </member>
        <member name="M:NVelocity.App.Velocity.SetApplicationAttribute(System.Object,System.Object)">
            <summary>  <p>
            Set the an ApplicationAttribue, which is an Object
            set by the application which is accessable from
            any component of the system that gets a RuntimeServices.
            This allows communication between the application
            environment and custom pluggable components of the
            Velocity engine, such as loaders and loggers.
            </p>
            
            <p>
            Note that there is no enfocement or rules for the key
            used - it is up to the application developer.  However, to
            help make the intermixing of components possible, using
            the target Class name (e.g.  com.foo.bar ) as the key
            might help avoid collision.
            </p>
            
            </summary>
            <param name="key">object 'name' under which the object is stored
            </param>
            <param name="value">object to store under this key
            </param>
        </member>
        <member name="P:NVelocity.App.Velocity.ExtendedProperties">
            <summary> Set an entire configuration at once. This is
            useful in cases where the parent application uses
            the ExtendedProperties class and the velocity configuration
            is a subset of the parent application's configuration.
            
            </summary>
            <param name="configuration">A configuration object.
            
            </param>
        </member>
        <member name="P:NVelocity.App.Velocity.Log">
            <summary> Returns a convenient LogMessage instance that wraps the current LogChute.
            Use this to Log Error messages. It has the usual methods.
            
            </summary>
            <returns> A convenience LogMessage instance that wraps the current LogChute.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.App.VelocityEngine">
            <summary> <p>
            This class provides a separate new-able instance of the
            Velocity template engine.  The alternative model for use
            is using the Velocity class which employs the singleton
            model.
            </p>
            <p>Velocity will call
            the parameter-less Init() at the first use of this class
            if the Init() wasn't explicitly called.  While this will
            ensure that Velocity functions, it probably won't
            function in the way you intend, so it is strongly recommended that
            you call an Init() method yourself if you use the default constructor.
            </p>
            
            </summary>
            <version>  $Id: VelocityEngine.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.#ctor">
            <summary>  Init-less CTOR</summary>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.#ctor(System.String)">
            <summary>  CTOR that invokes an Init(String), initializing
            the engine using the properties file specified
            
            </summary>
            <param name="propsFilename">name of properties file to Init with
            </param>
            <throws>  Exception </throws>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.#ctor(Commons.Collections.ExtendedProperties)">
            <summary>  CTOR that invokes an Init(String), initializing
            the engine using the Properties specified
            
            </summary>
            <param name="p">name of properties  to Init with
            </param>
            <throws>  Exception </throws>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.Init">
            <summary>  Initialize the Velocity runtime engine, using the default
            properties of the Velocity distribution
            </summary>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.Init(System.String)">
            <summary>  Initialize the Velocity runtime engine, using default properties
            plus the properties in the properties file passed in as the arg
            
            </summary>
            <param name="propsFilename">file containing properties to use to Initialize
            the Velocity runtime
            </param>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.Init(Commons.Collections.ExtendedProperties)">
            <summary>  Initialize the Velocity runtime engine, using default properties
            plus the properties in the passed in java.util.Properties object
            
            </summary>
            <param name="p"> Proprties object containing initialization properties
            </param>
            <throws>  Exception </throws>
            <summary> 
            </summary>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.SetProperty(System.String,System.Object)">
            <summary> Set a Velocity Runtime property.
            
            </summary>
            <param name="key">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.AddProperty(System.String,System.Object)">
            <summary> Add a Velocity Runtime property.
            
            </summary>
            <param name="key">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.ClearProperty(System.String)">
            <summary> Clear a Velocity Runtime property.
            
            </summary>
            <param name="key">of property to clear
            </param>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.GetProperty(System.String)">
            <summary>  Get a Velocity Runtime property.
            
            </summary>
            <param name="key">property to retrieve
            </param>
            <returns> property value or null if the property
            not currently set
            </returns>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.String)">
            <summary>  renders the input string using the context into the output writer.
            To be used when a template is dynamically constructed, or want to use
            Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="out"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log
            messages in case of Error
            </param>
            <param name="instring">input string containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While rendering to the writer, an I/O problem occured. </throws>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.IO.TextReader)">
            <summary>  Renders the input reader using the context into the output writer.
            To be used when a template is dynamically constructed, or want to
            use Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="writer"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log messages
            in case of Error
            </param>
            <param name="reader">Reader containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While reading from the reader or rendering to the writer, </throws>
            <summary>                     an I/O problem occured.
            </summary>
            <since> Velocity v1.1
            </since>
        </member>
        <!-- 对于成员“M:NVelocity.App.VelocityEngine.InvokeVelocimacro(System.String,System.String,System.String[],NVelocity.Context.IContext,System.IO.TextWriter)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.VelocityEngine.MergeTemplate(System.String,System.String,NVelocity.Context.IContext,System.IO.TextWriter)">
            <summary>  merges a template and puts the rendered stream into the writer
            
            </summary>
            <param name="templateName">name of template to be used in merge
            </param>
            <param name="encoding">encoding used in template
            </param>
            <param name="context"> filled context to be used in merge
            </param>
            <param name="writer"> writer to write template into
            
            </param>
            <returns> true if successful, false otherwise.  Errors
            logged to velocity Log
            </returns>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  Exception </throws>
            <summary> 
            </summary>
            <since> Velocity v1.1
            </since>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.GetTemplate(System.String)">
            <summary>  Returns a <code>Template</code> from the Velocity
            resource management system.
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.GetTemplate(System.String,System.String)">
            <summary>  Returns a <code>Template</code> from the Velocity
            resource management system.
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <param name="encoding">The character encoding to use for the template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
            <summary> 
            </summary>
            <since> Velocity v1.1
            </since>
        </member>
        <!-- 对于成员“M:NVelocity.App.VelocityEngine.ResourceExists(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.App.VelocityEngine.SetApplicationAttribute(System.Object,System.Object)">
            <summary>  <p>
            Sets an application attribute (which can be any Object) that will be
            accessible from any component of the system that gets a
            RuntimeServices. This allows communication between the application
            environment and custom pluggable components of the Velocity engine,
            such as ResourceLoaders and LogChutes.
            </p>
            
            <p>
            Note that there is no enforcement or rules for the key
            used - it is up to the application developer.  However, to
            help make the intermixing of components possible, using
            the target Class name (e.g. com.foo.bar ) as the key
            might help avoid collision.
            </p>
            
            </summary>
            <param name="key">object 'name' under which the object is stored
            </param>
            <param name="value">object to store under this key
            </param>
        </member>
        <member name="M:NVelocity.App.VelocityEngine.GetApplicationAttribute(System.Object)">
            <summary>  <p>
            Return an application attribute (which can be any Object)
            that was set by the application in order to be accessible from
            any component of the system that gets a RuntimeServices.
            This allows communication between the application
            environment and custom pluggable components of the
            Velocity engine, such as ResourceLoaders and LogChutes.
            </p>
            
            </summary>
            <param name="key">object 'name' under which the object is stored
            </param>
            <returns> value object to store under this key
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.App.VelocityEngine.ExtendedProperties">
            <summary> Set an entire configuration at once. This is
            useful in cases where the parent application uses
            the ExtendedProperties class and the velocity configuration
            is a subset of the parent application's configuration.
            
            </summary>
            <param name="configuration">*
            </param>
        </member>
        <member name="P:NVelocity.App.VelocityEngine.Log">
            <summary> Returns a convenient LogMessage instance that wraps the current LogChute.
            Use this to Log Error messages. It has the usual methods you'd expect.
            </summary>
            <returns> A Log object.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:Commons.Collections.ExtendedProperties">
             <summary>
             This class extends normal Java properties by adding the possibility
             to use the same key many times concatenating the value strings
             instead of overwriting them.
            
             <para>The Extended Properties syntax is explained here:
            
             <ul>
             <li>
             Each property has the syntax <code>key = value</code>
             </li>
             <li>
             The <i>key</i> may use any character but the equal sign '='.
             </li>
             <li>
             <i>value</i> may be separated on different lines if a backslash
             is placed at the end of the line that continues below.
             </li>
             <li>
             If <i>value</i> is a list of strings, each token is separated
             by a comma ','.
             </li>
             <li>
             Commas in each token are escaped placing a backslash right before
             the comma.
             </li>
             <li>
             If a <i>key</i> is used more than once, the values are appended
             like if they were on the same line separated with commas.
             </li>
             <li>
             Blank lines and lines starting with character '#' are skipped.
             </li>
             <li>
             If a property is named "include" (or whatever is defined by
             setInclude() and getInclude() and the value of that property is
             the full path to a file on disk, that file will be included into
             the ConfigurationsRepository. You can also pull in files relative
             to the parent configuration file. So if you have something
             like the following:
            
             include = additional.properties
            
             Then "additional.properties" is expected to be in the same
             directory as the parent configuration file.
            
             Duplicate name values will be replaced, so be careful.
            
             </li>
             </ul>
             </para>
             <para>Here is an example of a valid extended properties file:
             </para>
             <para><pre>
             # lines starting with # are comments
            
             # This is the simplest property
             key = value
            
             # A long property may be separated on multiple lines
             longvalue = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \
             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
            
             # This is a property with many tokens
             tokens_on_a_line = first token, second token
            
             # This sequence generates exactly the same result
             tokens_on_multiple_lines = first token
             tokens_on_multiple_lines = second token
            
             # commas may be escaped in tokens
             commas.excaped = Hi\, what'up?
             </pre>
             </para>
             <para><b>NOTE</b>: this class has <b>not</b> been written for
             performance nor low memory usage.  In fact, it's way slower than it
             could be and generates too much memory garbage.  But since
             performance is not an issue during intialization (and there is not
             much time to improve it), I wrote it this way.  If you don't like
             it, go ahead and tune it up!</para>
             </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.defaults">
            <summary> Default configurations repository.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.file">
            <summary>
            The file connected to this repository (holding comments and such).
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.basePath">
            <summary>
            Base path of the configuration file used to create
            this ExtendedProperties object.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.fileSeparator">
            <summary>
            File separator.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.isInitialized">
            <summary>
            Has this configuration been initialized.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.include">
            <summary>
            This is the name of the property that can point to other
            properties file for including other properties files.
            </summary>
        </member>
        <member name="F:Commons.Collections.ExtendedProperties.keysAsListed">
            <summary>
            These are the keys in the order they listed
            in the configuration file. This is useful when
            you wish to perform operations with configuration
            information in a particular order.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.#ctor">
            <summary>
            Creates an empty extended properties object.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.#ctor(System.String)">
            <summary>
            Creates and loads the extended properties from the specified
            file.
            </summary>
            <param name="file">A String.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.#ctor(System.String,System.String)">
            <summary>
            Creates and loads the extended properties from the specified
            file.
            </summary>
            <param name="file">A String.</param>
            <param name="defaultFile">File to load defaults from.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.IsInitialized">
            <summary>
            Indicate to client code whether property
            resources have been initialized or not.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Load(System.IO.Stream,System.String)">
            <summary>
            Load the properties from the given input stream
            and using the specified encoding.
            </summary>
            <param name="input">An InputStream.
            </param>
            <param name="encoding">An encoding.
            </param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetProperty(System.String)">
             <summary>  Gets a property from the configuration.
             *
             </summary>
             <param name="key">property to retrieve
             </param>
             <returns>value as object. Will return user value if exists,
             if not then default value if exists, otherwise null
            
             </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.AddProperty(System.String,System.Object)">
            <summary> Add a property to the configuration. If it already
            exists then the value stated here will be added
            to the configuration entry. For example, if
            *
            resource.loader = file
            *
            is already present in the configuration and you
            *
            addProperty("resource.loader", "classpath")
            *
            Then you will end up with a Vector like the
            following:
            *
            ["file", "classpath"]
            *
            </summary>
            <param name="key"></param>
            <param name="token"></param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.AddPropertyDirect(System.String,System.Object)">
             <summary>   Adds a key/value pair to the map.  This routine does
             no magic morphing.  It ensures the keyList is maintained
             *
             </summary>
             <param name="key">key to use for mapping
             </param>
             <param name="obj">object to store
            
             </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.AddStringProperty(System.String,System.String)">
             <summary>  Sets a string property w/instance checking for commas - used
             internally when a property has been broken up into
             strings that could contain escaped commas to prevent
             the inadvertent vectorization.
            
             Thanks to Leon Messerschmidt for this one.
            
             </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.SetProperty(System.String,System.Object)">
            <summary> Set a property, this will replace any previously
            set values. Set values is implicitly a call
            to clearProperty(key), addProperty(key,value).
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Save(System.IO.TextWriter,System.String)">
            <summary> Save the properties to the given outputStream.
            </summary>
            <param name="output">An OutputStream.
            </param>
            <param name="Header">A String.
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Combine(Commons.Collections.ExtendedProperties)">
             <summary> Combines an existing Hashtable with this Hashtable.
             *
             Warning: It will overwrite previous entries without warning.
             *
             </summary>
             <param name="c">ExtendedProperties
            
             </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.ClearProperty(System.String)">
             <summary> Clear a property in the configuration.
             *
             </summary>
             <param name="key">key to remove along with corresponding value.
            
             </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetKeys(System.String)">
             <summary> Get the list of the keys contained in the configuration
             repository.
             *
             </summary>
             <returns>An Iterator.
            
             </returns>
             <summary> Get the list of the keys contained in the configuration
             repository that match the specified prefix.
             *
             </summary>
             <param name="prefix">The prefix to test against.
             </param>
             <returns>An Iterator of keys that match the prefix.
            
             </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.Subset(System.String)">
             <summary> Create an ExtendedProperties object that is a subset
             of this one. Take into account duplicate keys
             by using the SetProperty() in ExtendedProperties.
             *
             </summary>
             <param name="prefix">prefix
            
             </param>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.ToString">
            <summary> Display the configuration for debugging
            purposes.
            </summary>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetString(System.String)">
             <summary> Get a string associated with the given configuration key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <returns>The associated string.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a String.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetString(System.String,System.String)">
             <summary> Get a string associated with the given configuration key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <param name="defaultValue">The default value.
             </param>
             <returns>The associated string if key is found,
             default value otherwise.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a String.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetProperties(System.String)">
             <summary> Get a list of properties associated with the given
             configuration key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <returns>The associated properties if key is found.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a String/Vector.
             </exception>
             <exception cref="T:System.ArgumentException"> if one of the tokens is
             malformed (does not contain an equals sign).
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetProperties(System.String,System.Collections.Hashtable)">
             <summary> Get a list of properties associated with the given
             configuration key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <param name="defaultProps">Default property values.
             </param>
             <returns>The associated properties if key is found.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a String/Vector.
             </exception>
             <exception cref="T:System.ArgumentException"> if one of the tokens is
             malformed (does not contain an equals sign).
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetStringArray(System.String)">
             <summary> Get an array of strings associated with the given configuration
             key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <returns>The associated string array if key is found.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a String/Vector.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetVector(System.String)">
             <summary> Get a Vector of strings associated with the given configuration
             key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <returns>The associated Vector.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a Vector.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetStringList(System.String)">
            <summary>
            Gets the string list.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetVector(System.String,System.Collections.ArrayList)">
             <summary> Get a Vector of strings associated with the given configuration
             key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <param name="defaultValue">The default value.
             </param>
             <returns>The associated Vector.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a Vector.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetBoolean(System.String)">
             <summary> Get a boolean associated with the given configuration key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <returns>The associated boolean.
             </returns>
             <exception cref="T:System.Exception"> is thrown if the key doesn't
             map to an existing object.
             </exception>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a Boolean.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetBoolean(System.String,System.Boolean)">
             <summary> Get a boolean associated with the given configuration key.
             *
             </summary>
             <param name="key">The configuration key.
             </param>
             <param name="defaultValue">The default value.
             </param>
             <returns>The associated boolean if key is found and has valid
             format, default value otherwise.
             </returns>
             <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
             object that is not a Boolean.
            
             </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.TestBoolean(System.String)">
             <summary> Test whether the string represent by value maps to a boolean
             value or not. We will allow <code>true</code>, <code>on</code>,
             and <code>yes</code> for a <code>true</code> boolean value, and
             <code>false</code>, <code>off</code>, and <code>no</code> for
             <code>false</code> boolean values.  Case of value to test for
             boolean status is ignored.
             *
             </summary>
             <param name="value">The value to test for boolean state.
             </param>
             <returns><code>true</code> or <code>false</code> if the supplied
             text maps to a boolean value, or <code>null</code> otherwise.
            
             </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetByte(System.String)">
            <summary> Get a byte associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated byte if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_BYTE"/> otherwise.
            </returns>
            <exception cref="T:System.Exception"> is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Byte.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetByte(System.String,System.SByte)">
            <summary> Get a byte associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated byte if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Byte.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetByte(System.String,System.Byte)">
            <summary> Get a byte associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated byte if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Byte.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInt(System.String)">
             <summary> The purpose of this method is to Get the configuration resource
             with the given name as an integer.
             *
             </summary>
             <param name="name">The resource name.
             </param>
             <returns>The value of the resource as an integer.
            
             </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInt(System.String,System.Int32)">
             <summary> The purpose of this method is to Get the configuration resource
             with the given name as an integer, or a default value.
             *
             </summary>
             <param name="name">The resource name
             </param>
             <param name="def">The default value of the resource.
             </param>
             <returns>The value of the resource as an integer.
            
             </returns>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInteger(System.String)">
            <summary> Get a int associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated int if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_INT32"/> otherwise.
            </returns>
            <exception cref="T:System.Exception"> is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Integer.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetInteger(System.String,System.Int32)">
            <summary> Get a int associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated int if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_INT32"/> otherwise.
            </returns>
            <returns>The associated int if key is found and has valid
            format, default value otherwise.
            </returns>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Integer.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetLong(System.String)">
            <summary> Get a long associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated long if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_INT64"/> otherwise.
            </returns>
            <exception cref="T:System.Exception"> is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Long.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetLong(System.String,System.Int64)">
            <summary> Get a long associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated long if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_INT64"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Long.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetFloat(System.String)">
            <summary> Get a float associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated float if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_SINGLE"/> otherwise.
            </returns>
            <exception cref="T:System.Exception"> is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Float.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetFloat(System.String,System.Single)">
            <summary> Get a float associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated float if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_SINGLE"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Float.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetDouble(System.String)">
            <summary> Get a double associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <returns>The associated double if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_DOUBLE"/> otherwise.
            </returns>
            <exception cref="T:System.Exception"> is thrown if the key doesn't
            map to an existing object.
            </exception>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Double.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.GetDouble(System.String,System.Double)">
            <summary> Get a double associated with the given configuration key.
            *
            </summary>
            <param name="key">The configuration key.
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns>The associated double if key is found and has valid
            format, <see cref="F:Commons.Collections.ExtendedProperties.DEFAULT_DOUBLE"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidCastException"> is thrown if the key maps to an
            object that is not a Double.
            </exception>
        </member>
        <member name="M:Commons.Collections.ExtendedProperties.ConvertProperties(Commons.Collections.ExtendedProperties)">
            <summary>
            Convert a standard properties class into a configuration class.
            </summary>
            <param name="p">properties object to convert into a ExtendedProperties object.</param>
            <returns>ExtendedProperties configuration created from the properties object.</returns>
        </member>
        <member name="T:Commons.Collections.KeyedListEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Commons.Collections.LRUMap">
            <summary>
            A keyed list with a fixed maximum size which removes
            the least recently used entry if an entry is added when full.
            </summary>
        </member>
        <member name="F:Commons.Collections.LRUMap.DEFAULT_MAX_SIZE">
            <summary>
            Default maximum size 
            </summary>
        </member>
        <member name="F:Commons.Collections.LRUMap.maxSize">
            <summary>
            Maximum size 
            </summary>
        </member>
        <member name="M:Commons.Collections.LRUMap.RemoveLRU">
            <summary>
            Remove the least recently used entry (the last one in the list)
            </summary>
        </member>
        <member name="P:Commons.Collections.LRUMap.MaxSize">
            <summary>
            Gets the maximum size of the map (the bound).
            </summary>
        </member>
        <member name="T:Commons.Collections.PropertiesReader">
            <summary>
            This class is used to read properties lines.  These lines do
            not terminate with new-line chars but rather when there is no
            backslash sign a the end of the line.  This is used to
            concatenate multiple lines for readability.
            </summary>
        </member>
        <member name="M:Commons.Collections.PropertiesReader.#ctor(System.IO.StreamReader)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">A Reader.</param>
        </member>
        <member name="M:Commons.Collections.PropertiesReader.ReadProperty">
            <summary>
            Read a property.
            </summary>
            <returns>A String.</returns>
        </member>
        <member name="T:Commons.Collections.PropertiesTokenizer">
            <summary>
            This class divides into tokens a property value.  Token
            separator is "," but commas into the property value are escaped
            using the backslash in front.
            </summary>
        </member>
        <member name="T:Commons.Collections.StringTokenizer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Commons.Collections.StringTokenizer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Commons.Collections.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="delimiters"></param>
        </member>
        <member name="M:Commons.Collections.StringTokenizer.HasMoreTokens">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.Collections.StringTokenizer.NextToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.Collections.StringTokenizer.NextToken(System.String)">
            <summary>
            
            </summary>
            <param name="delimiters"></param>
            <returns></returns>
        </member>
        <member name="P:Commons.Collections.StringTokenizer.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:Commons.Collections.PropertiesTokenizer.DELIMITER">
            <summary>
            The property delimiter used while parsing (a comma).
            </summary>
        </member>
        <member name="M:Commons.Collections.PropertiesTokenizer.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="str">A String</param>
        </member>
        <member name="M:Commons.Collections.PropertiesTokenizer.NextToken">
            <summary>
            Get next token.
            </summary>
            <returns>A String</returns>
        </member>
        <!-- 对于成员“T:NVelocity.Context.AbstractContext”忽略有格式错误的 XML 注释 -->
        <member name="T:NVelocity.Context.InternalContextBase">
            <summary>  class to encapsulate the 'stuff' for internal operation of velocity.
            We use the context as a thread-safe storage : we take advantage of the
            fact that it's a visitor  of sorts  to all nodes (that matter) of the
            AST during Init() and render().
            Currently, it carries the template name for namespace
            support, as well as node-local context data introspection caching.
            
            Note that this is not a public class.  It is for package access only to
            keep application code from accessing the internals, as AbstractContext
            is derived from this.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: InternalContextBase.java 679861 2008-07-25 17:17:50Z nbubna $
            </version>
        </member>
        <member name="T:NVelocity.Context.IInternalHousekeepingContext">
            <summary>  interface to encapsulate the 'stuff' for internal operation of velocity.
            We use the context as a thread-safe storage : we take advantage of the
            fact that it's a visitor  of sorts  to all nodes (that matter) of the
            AST during Init() and render().
            
            Currently, it carries the template name for namespace
            support, as well as node-local context data introspection caching.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:Christoph.Reck@dlr.de">Christoph Reck</a>
            </author>
            <version>  $Id: InternalHousekeepingContext.java 679861 2008-07-25 17:17:50Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Context.IInternalHousekeepingContext.PushCurrentTemplateName(System.String)">
            <summary>  set the current template name on top of stack
            
            </summary>
            <param name="s">current template name
            </param>
        </member>
        <member name="M:NVelocity.Context.IInternalHousekeepingContext.PopCurrentTemplateName">
            <summary>  remove the current template name from stack</summary>
        </member>
        <member name="M:NVelocity.Context.IInternalHousekeepingContext.PushCurrentMacroName(System.String)">
            <summary>  set the current macro name on top of stack
            
            </summary>
            <param name="s">current macro name
            </param>
        </member>
        <member name="M:NVelocity.Context.IInternalHousekeepingContext.PopCurrentMacroName">
            <summary>  remove the current macro name from stack</summary>
        </member>
        <member name="M:NVelocity.Context.IInternalHousekeepingContext.ICacheGet(System.Object)">
            <seealso cref="!:IntrospectionCacheData)">
            object if exists for the key
            
            </seealso>
            <param name="key"> key to find in cache
            </param>
            <returns> cache object
            </returns>
        </member>
        <member name="M:NVelocity.Context.IInternalHousekeepingContext.ICachePut(System.Object,NVelocity.Util.Introspection.IntrospectionCacheData)">
            <seealso cref="!:IntrospectionCacheData)">
            element in the cache for specified key
            
            </seealso>
            <param name="key"> key
            </param>
            <param name="instance"> IntrospectionCacheData object to place in cache
            </param>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.CurrentTemplateName">
            <summary>  Get the current template name
            
            </summary>
            <returns> String current template name
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.TemplateNameStack">
            <summary>  Returns the template name stack in form of an array.
            
            </summary>
            <returns> Object[] with the template name stack contents.
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.CurrentMacroName">
            <summary>  Get the current macro name
            
            </summary>
            <returns> String current macro name
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.CurrentMacroCallDepth">
            <summary>  Get the current macro call depth
            
            </summary>
            <returns> int current macro call depth
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.MacroNameStack">
            <summary>  Returns the macro name stack in form of an array.
            
            </summary>
            <returns> Object[] with the macro name stack contents.
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.CurrentResource">
            <summary>  temporary fix to enable #include() to figure out
            current encoding.
            
            </summary>
            <returns> The current resource.
            </returns>
            <param name="r">
            </param>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.AllowRendering">
            <summary> Checks to see if rendering should be allowed.  Defaults to true but will
            return false after a #stop directive.
            
            </summary>
            <returns> true if rendering is allowed, false if no rendering should occur
            </returns>
            <summary> Set whether rendering is allowed.  Defaults to true but is set to
            false after a #stop directive.
            </summary>
            <param name="v">
            </param>
        </member>
        <member name="P:NVelocity.Context.IInternalHousekeepingContext.MacroLibraries">
            <summary> Get the macro library list for the current template.
            
            </summary>
            <returns> List of macro library names
            </returns>
            <summary> Set the macro library list for the current template.
            
            </summary>
            <param name="macroLibraries">list of macro libraries to set
            </param>
        </member>
        <member name="T:NVelocity.Context.IInternalEventContext">
            <summary>  Interface for event support.  Note that this is a public internal
            interface, as it is something that will be accessed from outside
            of the .context package.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: InternalEventContext.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Context.IInternalEventContext.AttachEventCartridge(NVelocity.App.Event.EventCartridge)">
            <param name="ec">
            </param>
            <returns> The old EventCartridge.
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalEventContext.EventCartridge">
            <returns> The current EventCartridge.
            </returns>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.introspectionCache">
            <summary>  cache for node/context specific introspection information</summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.templateNameStack">
            <summary>  Template name stack. The stack top contains the current template name.</summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.macroNameStack">
            <summary>  Velocimacro name stack. The stack top contains the current macro name.</summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.eventCartridge">
            <summary>  EventCartridge we are to carry.  Set by application</summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.currentResource">
            <summary>  Current resource - used for carrying encoding and other
            information down into the rendering process
            </summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.allowRendering">
            <summary>  Is rendering allowed?  Defaults to true, can be changed by #stop directive.</summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextBase.macroLibraries">
            <summary>  List for holding the macro libraries. Contains the macro library
            template name as strings.
            </summary>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.PushCurrentTemplateName(System.String)">
            <summary>  set the current template name on top of stack
            
            </summary>
            <param name="s">current template name
            </param>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.PopCurrentTemplateName">
            <summary>  remove the current template name from stack</summary>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.PushCurrentMacroName(System.String)">
            <summary>  set the current macro name on top of stack
            
            </summary>
            <param name="s">current macro name
            </param>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.PopCurrentMacroName">
            <summary>  remove the current macro name from stack</summary>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.ICacheGet(System.Object)">
            <seealso cref="!:IntrospectionCacheData)">
            object if exists for the key
            
            </seealso>
            <param name="key"> key to find in cache
            </param>
            <returns> cache object
            </returns>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.ICachePut(System.Object,NVelocity.Util.Introspection.IntrospectionCacheData)">
            <seealso cref="!:IntrospectionCacheData)">
            element in the cache for specified key
            
            </seealso>
            <param name="key"> key
            </param>
            <param name="instance"> IntrospectionCacheData object to place in cache
            </param>
        </member>
        <member name="M:NVelocity.Context.InternalContextBase.AttachEventCartridge(NVelocity.App.Event.EventCartridge)">
            <seealso cref="!:org.apache.velocity.context.InternalEventContext.attachEventCartridge(org.apache.velocity.app.event.EventCartridge)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.CurrentTemplateName">
            <summary>  Get the current template name
            
            </summary>
            <returns> String current template name
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.TemplateNameStack">
            <summary>  Get the current template name stack
            
            </summary>
            <returns> Object[] with the template name stack contents.
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.CurrentMacroName">
            <summary>  Get the current macro name
            
            </summary>
            <returns> String current macro name
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.CurrentMacroCallDepth">
            <summary>  Get the current macro call depth
            
            </summary>
            <returns> int current macro call depth
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.MacroNameStack">
            <summary>  Get the current macro name stack
            
            </summary>
            <returns> Object[] with the macro name stack contents.
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.CurrentResource">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentResource()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setCurrentResource(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.AllowRendering">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getAllowRendering()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setAllowRendering(boolean)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.MacroLibraries">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getMacroLibraries()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setMacroLibraries(List)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextBase.EventCartridge">
            <seealso cref="!:org.apache.velocity.context.InternalEventContext.getEventCartridge()">
            </seealso>
        </member>
        <member name="T:NVelocity.Context.IContext">
            <summary>  Interface describing the application data context.  This set of
            routines is used by the application to set and remove 'named' data
            object to pass them to the template engine to use when rendering
            a template.
            
            This is the same set of methods supported by the original Context
            class
            
            </summary>
            <seealso cref="!:org.apache.velocity.context.AbstractContext">
            </seealso>
            <seealso cref="!:org.apache.velocity.VelocityContext">
            
            </seealso>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: Context.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Context.IContext.Put(System.String,System.Object)">
            <summary> Adds a name/value pair to the context.
            
            </summary>
            <param name="key">  The name to key the provided value with.
            </param>
            <param name="value">The corresponding value.
            </param>
            <returns> The old object or null if there was no old object.
            </returns>
        </member>
        <member name="M:NVelocity.Context.IContext.Get(System.String)">
            <summary> Gets the value corresponding to the provided key from the context.
            
            </summary>
            <param name="key">The name of the desired value.
            </param>
            <returns>    The value corresponding to the provided key.
            </returns>
        </member>
        <member name="M:NVelocity.Context.IContext.ContainsKey(System.Object)">
            <summary> Indicates whether the specified key is in the context.
            
            </summary>
            <param name="key">The key to look for.
            </param>
            <returns>    Whether the key is in the context.
            </returns>
        </member>
        <member name="M:NVelocity.Context.IContext.Remove(System.Object)">
            <summary> Removes the value associated with the specified key from the context.
            
            </summary>
            <param name="key">The name of the value to remove.
            </param>
            <returns>    The value that the key was mapped to, or <code>null</code>
            if unmapped.
            </returns>
        </member>
        <member name="P:NVelocity.Context.IContext.Keys">
            <summary> Get all the keys for the values in the context.</summary>
            <returns> All the keys for the values in the context.
            </returns>
        </member>
        <member name="F:NVelocity.Context.AbstractContext.innerContext">
            <summary>  the chained Context if any</summary>
        </member>
        <!-- 对于成员“M:NVelocity.Context.AbstractContext.InternalGet(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.Context.AbstractContext.InternalPut(System.String,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.Context.AbstractContext.InternalContainsKey(System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.Context.AbstractContext.InternalGetKeys”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.Context.AbstractContext.InternalRemove(System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Context.AbstractContext.#ctor">
            <summary>  default CTOR</summary>
        </member>
        <member name="M:NVelocity.Context.AbstractContext.#ctor(NVelocity.Context.IContext)">
            <summary>  Chaining constructor accepts a Context argument.
            It will relay Get() operations into this Context
            in the even the 'local' Get() returns null.
            
            </summary>
            <param name="inner">context to be chained
            </param>
        </member>
        <member name="M:NVelocity.Context.AbstractContext.Put(System.String,System.Object)">
            <summary> Adds a name/value pair to the context.
            
            </summary>
            <param name="key">  The name to key the provided value with.
            </param>
            <param name="value">The corresponding value.
            </param>
            <returns> Object that was replaced in the the Context if
            applicable or null if not.
            </returns>
        </member>
        <member name="M:NVelocity.Context.AbstractContext.Get(System.String)">
            <summary>  Gets the value corresponding to the provided key from the context.
            
            Supports the chaining context mechanism.  If the 'local' context
            doesn't have the value, we try to Get it from the chained context.
            
            </summary>
            <param name="key">The name of the desired value.
            </param>
            <returns>    The value corresponding to the provided key or null if
            the key param is null.
            </returns>
        </member>
        <member name="M:NVelocity.Context.AbstractContext.ContainsKey(System.Object)">
            <summary>  Indicates whether the specified key is in the context.  Provided for
            debugging purposes.
            
            </summary>
            <param name="key">The key to look for.
            </param>
            <returns> true if the key is in the context, false if not.
            </returns>
        </member>
        <member name="M:NVelocity.Context.AbstractContext.Remove(System.Object)">
            <summary> Removes the value associated with the specified key from the context.
            
            </summary>
            <param name="key">The name of the value to remove.
            </param>
            <returns>    The value that the key was mapped to, or <code>null</code>
            if unmapped.
            </returns>
        </member>
        <member name="P:NVelocity.Context.AbstractContext.Keys">
            <summary>  Get all the keys for the values in the context</summary>
            <returns> Object[] of keys in the Context. Does not return
            keys in chained context.
            </returns>
        </member>
        <member name="P:NVelocity.Context.AbstractContext.ChainedContext">
            <summary>  returns innerContext if one is chained
            
            </summary>
            <returns> Context if chained, <code>null</code> if not
            </returns>
        </member>
        <member name="T:NVelocity.Context.ChainedInternalContextAdapter">
            <summary> This is an abstract internal-use-only context implementation to be
            used as a subclass for other internal-use-only contexts that wrap
            other internal-use-only contexts.
            
            We use this context to make it easier to chain an existing context
            as part of a new context implementation.  It just delegates everything
            to the inner/parent context. Subclasses then only need to override
            the methods relevant to them.
            
            </summary>
            <author>  Nathan Bubna
            </author>
            <version>  $Id: ChainedInternalContextAdapter.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="T:NVelocity.Context.IInternalContextAdapter">
            <summary>  interface to bring all necessary internal and user contexts together.
            this is what the AST expects to deal with.  If anything new comes
            along, Add it here.
            
            I will rename soon :)
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: InternalContextAdapter.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="T:NVelocity.Context.IInternalWrapperContext">
            <summary>  interface for internal context wrapping functionality
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: InternalWrapperContext.java 471908 2006-11-06 22:39:28Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Context.IInternalWrapperContext.LocalPut(System.String,System.Object)">
            <summary> Allows callers to explicitly Put objects in the local context.
            Objects added to the context through this method always end up
            in the top-level context of possible wrapped contexts.
            
            </summary>
            <param name="key">name of item to set.
            </param>
            <param name="value">object to set to key.
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalWrapperContext.InternalUserContext">
            <summary> Returns the wrapped user context.</summary>
            <returns> The wrapped user context.
            </returns>
        </member>
        <member name="P:NVelocity.Context.IInternalWrapperContext.BaseContext">
            <summary> Returns the base full context impl.</summary>
            <returns> The base full context impl.
            
            </returns>
        </member>
        <member name="F:NVelocity.Context.ChainedInternalContextAdapter.innerContext">
            <summary>the parent context </summary>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.#ctor(NVelocity.Context.IInternalContextAdapter)">
            <summary> CTOR, wraps an ICA</summary>
            <param name="inner">context
            </param>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.Get(System.String)">
            <summary> Retrieves from parent context.
            
            </summary>
            <param name="key">name of item to Get
            </param>
            <returns>  stored object or null
            </returns>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.Put(System.String,System.Object)">
            <summary> Put method also stores values in parent context
            
            </summary>
            <param name="key">name of item to set
            </param>
            <param name="value">object to set to key
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.ContainsKey(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.containsKey(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.Remove(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.remove(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.PushCurrentTemplateName(System.String)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.pushCurrentTemplateName(java.lang.String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.PopCurrentTemplateName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.popCurrentTemplateName()">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.PushCurrentMacroName(System.String)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.pushCurrentMacroName(java.lang.String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.PopCurrentMacroName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.popCurrentMacroName()">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.ICacheGet(System.Object)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.icacheGet(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.LocalPut(System.String,System.Object)">
            <seealso cref="!:org.apache.velocity.context.InternalWrapperContext.localPut(java.lang.String,java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.ICachePut(System.Object,NVelocity.Util.Introspection.IntrospectionCacheData)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.icachePut(java.lang.Object, org.apache.velocity.util.introspection.IntrospectionCacheData)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ChainedInternalContextAdapter.AttachEventCartridge(NVelocity.App.Event.EventCartridge)">
            <seealso cref="!:org.apache.velocity.context.InternalEventContext.attachEventCartridge(org.apache.velocity.app.event.EventCartridge)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.InternalUserContext">
            <summary> Return the inner / user context.</summary>
            <returns> The inner / user context.
            </returns>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.BaseContext">
            <seealso cref="!:org.apache.velocity.context.InternalWrapperContext.getBaseContext()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.Keys">
            <seealso cref="!:org.apache.velocity.context.Context.getKeys()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.CurrentTemplateName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentTemplateName()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.TemplateNameStack">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getTemplateNameStack()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.CurrentMacroName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentMacroName()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.CurrentMacroCallDepth">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentMacroCallDepth()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.MacroNameStack">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getMacroNameStack()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.AllowRendering">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getAllowRendering()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setAllowRendering(boolean)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.MacroLibraries">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getMacroLibraries()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setMacroLibraries(List)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.EventCartridge">
            <seealso cref="!:org.apache.velocity.context.InternalEventContext.getEventCartridge()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ChainedInternalContextAdapter.CurrentResource">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentResource()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setCurrentResource(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="T:NVelocity.Context.EvaluateContext">
            <summary>  This is a special, internal-use-only context implementation to be
            used for the #Evaluate directive.
            
            We use this context to chain the existing context, preventing any changes
            from impacting the parent context.  By separating this context into a 
            separate class it also allows for the future possibility of changing
            the context behavior for the #Evaluate directive.
            
            Note that the context used to store values local to #Evaluate()
            is user defined but defaults to {@link VelocityContext}.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <version>  $Id: EvaluateContext.java 691519 2008-09-03 05:36:11Z nbubna $
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Context.EvaluateContext.localContext">
            <summary>container for any local items </summary>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.#ctor(NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.IRuntimeServices)">
            <summary>  CTOR, wraps an ICA</summary>
            <param name="inner">context for parent template
            </param>
            <param name="rsvc">
            </param>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.InitContext(NVelocity.Runtime.IRuntimeServices)">
            <summary> Initialize the context based on user-configured class </summary>
            <param name="rsvc">
            </param>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.Put(System.String,System.Object)">
            <summary>  Put method also stores values in local scope 
            
            </summary>
            <param name="key">name of item to set
            </param>
            <param name="value">object to set to key
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.Get(System.String)">
            <summary>  Retrieves from local or global context.
            
            </summary>
            <param name="key">name of item to Get
            </param>
            <returns>  stored object or null
            </returns>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.ContainsKey(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.containsKey(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.Remove(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.remove(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.EvaluateContext.LocalPut(System.String,System.Object)">
            <summary> Allows callers to explicitly Put objects in the local context.
            Objects added to the context through this method always end up
            in the top-level context of possible wrapped contexts.
            
            </summary>
            <param name="key">name of item to set.
            </param>
            <param name="value">object to set to key.
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="P:NVelocity.Context.EvaluateContext.Keys">
            <seealso cref="!:org.apache.velocity.context.Context.getKeys()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.EvaluateContext.AllowRendering">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getAllowRendering()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setAllowRendering(boolean)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Context.InternalContextAdapterImpl”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.Context.InternalContextAdapterImpl.context">
            <summary>  the user data Context that we are wrapping</summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextAdapterImpl.icb">
            <summary>  the ICB we are wrapping.  We may need to make one
            if the user data context implementation doesn't
            support one.  The default AbstractContext-derived
            VelocityContext does, and it's recommended that
            people derive new contexts from AbstractContext
            rather than piecing things together
            </summary>
        </member>
        <member name="F:NVelocity.Context.InternalContextAdapterImpl.iec">
            <summary>  The InternalEventContext that we are wrapping.  If
            the context passed to us doesn't support it, no
            biggie.  We don't make it for them - since its a
            user context thing, nothing gained by making one
            for them now
            </summary>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.#ctor(NVelocity.Context.IContext)">
            <summary>  CTOR takes a Context and wraps it, delegating all 'data' calls
            to it.
            
            For support of internal contexts, it will create an InternalContextBase
            if need be.
            </summary>
            <param name="c">
            </param>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.PushCurrentTemplateName(System.String)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.pushCurrentTemplateName(java.lang.String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.PopCurrentTemplateName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.popCurrentTemplateName()">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.PushCurrentMacroName(System.String)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.pushCurrentMacroName(java.lang.String)">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.PopCurrentMacroName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.popCurrentMacroName()">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.ICacheGet(System.Object)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.icacheGet(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.ICachePut(System.Object,NVelocity.Util.Introspection.IntrospectionCacheData)">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.icachePut(java.lang.Object, org.apache.velocity.util.introspection.IntrospectionCacheData)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.Put(System.String,System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.Put(java.lang.String, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.LocalPut(System.String,System.Object)">
            <seealso cref="!:InternalWrapperContext.localPut(String, Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.Get(System.String)">
            <seealso cref="!:org.apache.velocity.context.Context.Get(java.lang.String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.ContainsKey(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.containsKey(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.Remove(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.remove(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.InternalContextAdapterImpl.AttachEventCartridge(NVelocity.App.Event.EventCartridge)">
            <seealso cref="!:org.apache.velocity.context.InternalEventContext.attachEventCartridge(org.apache.velocity.app.event.EventCartridge)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.CurrentTemplateName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentTemplateName()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.TemplateNameStack">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getTemplateNameStack()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.CurrentMacroName">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentMacroName()">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.CurrentMacroCallDepth">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentMacroCallDepth()">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.MacroNameStack">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getMacroNameStack()">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.CurrentResource">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getCurrentResource()">
            </seealso>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setCurrentResource(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.AllowRendering">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getAllowRendering()">
            </seealso>
            <since> 1.5
            </since>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setAllowRendering(boolean)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.MacroLibraries">
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.getMacroLibraries()">
            </seealso>
            <since> 1.6
            </since>
            <seealso cref="!:org.apache.velocity.context.InternalHousekeepingContext.setMacroLibraries(List)">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.Keys">
            <seealso cref="!:org.apache.velocity.context.Context.getKeys()">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.InternalUserContext">
            <summary>  returns the user data context that
            we are wrapping
            </summary>
            <returns> The internal user data context.
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.BaseContext">
            <summary>  Returns the base context that we are
            wrapping. Here, its this, but for other thing
            like VM related context contortions, it can
            be something else
            </summary>
            <returns> The base context.
            </returns>
        </member>
        <member name="P:NVelocity.Context.InternalContextAdapterImpl.EventCartridge">
            <seealso cref="!:org.apache.velocity.context.InternalEventContext.getEventCartridge()">
            </seealso>
        </member>
        <member name="T:NVelocity.Context.ProxyVMContext">
            <summary> Context for Velocity macro arguments.
            
            This special context combines ideas of earlier VMContext and VMProxyArgs
            by implementing routing functionality internally. This significantly
            reduces memory allocation upon macro invocations.
            Since the macro AST is now shared and RuntimeMacro directive is used,
            the earlier implementation of precalculating VMProxyArgs would not work.
            
            See <a href="http://issues.apache.org/jira/browse/VELOCITY-607">Issue 607</a>
            for more Info on this class.
            </summary>
            <author>  <a href="mailto:wyla@removeme.sci.fi">Jarkko Viinamaki</a>
            </author>
            <version>  $Id$
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Context.ProxyVMContext.localcontext">
            <summary>container for any local or constant macro arguments. Size must be power of 2. </summary>
        </member>
        <member name="F:NVelocity.Context.ProxyVMContext.localContextScope">
            <summary>support for local context scope feature, where all references are local </summary>
        </member>
        <member name="F:NVelocity.Context.ProxyVMContext.rsvc">
            <summary>needed for writing Log entries. </summary>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.#ctor(NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.IRuntimeServices,System.Boolean)">
            <param name="inner">Velocity context for processing
            </param>
            <param name="rsvc">RuntimeServices provides logging reference
            </param>
            <param name="localContextScope">if true, all references are set to be local
            </param>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.AddVMProxyArg(NVelocity.Context.IInternalContextAdapter,System.String,System.String,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Used to Put Velocity macro arguments into this context. 
            
            </summary>
            <param name="context">rendering context
            </param>
            <param name="macroArgumentName">name of the macro argument that we received
            </param>
            <param name="literalMacroArgumentName">".literal.$"+macroArgumentName
            </param>
            <param name="argumentValue">parameters value of the macro argument
            
            </param>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.IsConstant(NVelocity.Runtime.Parser.Node.INode)">
            <summary> AST nodes that are considered constants can be directly
            saved into the context. Dynamic values are stored in
            another argument hashmap.
            
            </summary>
            <param name="node">macro argument as AST node
            </param>
            <returns> true if the node is a constant value
            </returns>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.Put(System.String,System.Object)">
            <summary> Impl of the Context.Put() method.
            
            </summary>
            <param name="key">name of item to set
            </param>
            <param name="value">object to set to key
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.LocalPut(System.String,System.Object)">
            <summary> Allows callers to explicitly Put objects in the local context, no matter what the
            velocimacro.context.local setting says. Needed e.g. for loop variables in foreach.
            
            </summary>
            <param name="key">name of item to set.
            </param>
            <param name="value">object to set to key.
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.Put(System.String,System.Object,System.Boolean)">
            <summary> Internal Put method to select between local and global scope.
            
            </summary>
            <param name="key">name of item to set
            </param>
            <param name="value">object to set to key
            </param>
            <param name="forceLocal">True forces the object into the local scope.
            </param>
            <returns> old stored object
            </returns>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.Get(System.String)">
            <summary> Implementation of the Context.Get() method.  First checks
            localcontext, then arguments, then global context.
            
            </summary>
            <param name="key">name of item to Get
            </param>
            <returns> stored object or null
            </returns>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.ContainsKey(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.containsKey(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Context.ProxyVMContext.Remove(System.Object)">
            <seealso cref="!:org.apache.velocity.context.Context.remove(java.lang.Object)">
            </seealso>
        </member>
        <member name="P:NVelocity.Context.ProxyVMContext.Keys">
            <seealso cref="!:org.apache.velocity.context.Context.getKeys()">
            </seealso>
        </member>
        <member name="T:NVelocity.Exception.IExtendedParseException">
            <summary> All Exceptions that can provide additional information about the place
            where the Error happened (template name, column and line number) can
            implement this interface and the ParseErrorException will then be able
            to deal with this information.
            
            </summary>
            <author>  <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: ExtendedParseException.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.IExtendedParseException.TemplateName">
            <summary> returns the Template name where this exception occured.</summary>
            <returns> The Template name where this exception occured.
            </returns>
        </member>
        <member name="P:NVelocity.Exception.IExtendedParseException.LineNumber">
            <summary> returns the line number where this exception occured.</summary>
            <returns> The line number where this exception occured.
            </returns>
        </member>
        <member name="P:NVelocity.Exception.IExtendedParseException.ColumnNumber">
            <summary> returns the column number where this exception occured.</summary>
            <returns> The column number where this exception occured.
            </returns>
        </member>
        <member name="T:NVelocity.Exception.MacroOverflowException">
            <summary> Application-level exception thrown when macro calls within macro calls
            exceeds the maximum allowed depth. The maximum allowable depth is given
            in the configuration as velocimacro.max.depth.
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="T:NVelocity.Exception.VelocityException">
            <summary>  
            Base class for Velocity exceptions thrown to the
            application layer.
            </summary>
        </member>
        <member name="M:NVelocity.Exception.MacroOverflowException.#ctor(System.String)">
            <param name="exceptionMessage">The message to register.
            </param>
        </member>
        <member name="M:NVelocity.Exception.MacroOverflowException.#ctor(System.String,System.Exception)">
            <param name="exceptionMessage">The message to register.
            </param>
            <param name="wrapped">A throwable object that caused the Exception.
            </param>
        </member>
        <member name="M:NVelocity.Exception.MacroOverflowException.#ctor(System.Exception)">
            <param name="wrapped">A throwable object that caused the Exception.
            </param>
        </member>
        <member name="T:NVelocity.Exception.MathException">
            <summary> Separate exception class to distinguish math problems.   
            
            </summary>
            <author>  Nathan Bubna
            </author>
            <since> 1.6
            </since>
            <version>  $Id: MathException.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <!-- 对于成员“T:NVelocity.Exception.MethodInvocationException”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Exception.MethodInvocationException.#ctor(System.String,System.Exception,System.String,System.String,System.Int32,System.Int32)">
            <summary>  CTOR - wraps the passed in exception for
            examination later
            
            </summary>
            <param name="message">
            </param>
            <param name="e">Throwable that we are wrapping
            </param>
            <param name="methodName">name of method that threw the exception
            </param>
            <param name="templateName">The name of the template where the exception occured.
            </param>
        </member>
        <member name="P:NVelocity.Exception.MethodInvocationException.MethodName">
            <summary>  Returns the name of the method that threw the
            exception.
            
            </summary>
            <returns> String name of method
            </returns>
        </member>
        <member name="P:NVelocity.Exception.MethodInvocationException.ReferenceName">
            <summary>  Retrieves the name of the reference that caused the
            exception.
            
            </summary>
            <returns> name of reference.
            </returns>
            <summary>  Sets the reference name that threw this exception.
            
            </summary>
            <param name="ref">name of reference
            </param>
        </member>
        <member name="P:NVelocity.Exception.MethodInvocationException.ColumnNumber">
            <seealso cref="!:ExtendedParseException.getColumnNumber()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.MethodInvocationException.LineNumber">
            <seealso cref="!:ExtendedParseException.getLineNumber()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.MethodInvocationException.TemplateName">
            <seealso cref="!:ExtendedParseException.getTemplateName()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.MethodInvocationException.Message">
            <seealso cref="!:Exception.getMessage()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <!-- 对于成员“T:NVelocity.Exception.ParseErrorException”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.Exception.ParseErrorException.columnNumber">
            <summary> The column number of the parsing Error, or -1 if not defined.</summary>
        </member>
        <member name="F:NVelocity.Exception.ParseErrorException.lineNumber">
            <summary> The line number of the parsing Error, or -1 if not defined.</summary>
        </member>
        <member name="F:NVelocity.Exception.ParseErrorException.templateName">
            <summary> The name of the template containing the Error, or null if not defined.</summary>
        </member>
        <member name="F:NVelocity.Exception.ParseErrorException.invalidSyntax">
            <summary> If applicable, contains the invalid syntax or reference that triggered this exception</summary>
        </member>
        <member name="M:NVelocity.Exception.ParseErrorException.#ctor(System.String)">
            <summary> Create a ParseErrorException with the given message.
            
            </summary>
            <param name="exceptionMessage">the Error exception message
            </param>
        </member>
        <member name="M:NVelocity.Exception.ParseErrorException.#ctor(NVelocity.Runtime.Parser.ParseException)">
            <summary> Create a ParseErrorException with the given ParseException.
            
            </summary>
            <param name="pex">the parsing exception
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Exception.ParseErrorException.#ctor(NVelocity.Exception.VelocityException)">
            <summary> Create a ParseErrorException with the given ParseException.
            
            </summary>
            <param name="pex">the parsing exception
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Exception.ParseErrorException.#ctor(System.String,NVelocity.Util.Introspection.Info)">
            <summary> Create a ParseErrorRuntimeException with the given message and Info
            
            </summary>
            <param name="exceptionMessage">the Error exception message
            </param>
            <param name="Info">an Info object with the current template Info
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Exception.ParseErrorException.#ctor(System.String,NVelocity.Util.Introspection.Info,System.String)">
            <summary> Create a ParseErrorRuntimeException with the given message and Info
            
            </summary>
            <param name="exceptionMessage">the Error exception message
            </param>
            <param name="Info">an Info object with the current template Info
            </param>
            <param name="invalidSyntax">the invalid syntax or reference triggering this exception
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.ParseErrorException.ColumnNumber">
            <summary> Return the column number of the parsing Error, or -1 if not defined.
            
            </summary>
            <returns> column number of the parsing Error, or -1 if not defined
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.ParseErrorException.LineNumber">
            <summary> Return the line number of the parsing Error, or -1 if not defined.
            
            </summary>
            <returns> line number of the parsing Error, or -1 if not defined
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.ParseErrorException.TemplateName">
            <summary> Return the name of the template containing the Error, or null if not
            defined.
            
            </summary>
            <returns> the name of the template containing the parsing Error, or null
            if not defined
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.ParseErrorException.InvalidSyntax">
            <summary> Return the invalid syntax or reference that triggered this Error, or null
            if not defined.
            
            </summary>
            <returns> Return the invalid syntax or reference that triggered this Error, or null
            if not defined
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Exception.ResourceNotFoundException">
            <summary>  
            Application-level exception thrown when a resource of any type
            isn't found by the Velocity engine.
            <br/>
            When this exception is thrown, a best effort will be made to have
            useful information in the exception's message.  For complete
            information, consult the runtime Log.
            </summary>
        </member>
        <member name="T:NVelocity.Exception.RuntimeException">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Exception.RuntimeException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Exception.RuntimeException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NVelocity.Exception.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:NVelocity.Exception.TemplateInitException">
            <summary> Exception generated to indicate parse errors caught during
            directive initialization (e.g. wrong number of arguments)
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <version>  $Id: TemplateInitException.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Exception.TemplateInitException.TemplateName">
            <summary> Returns the Template name where this exception occured.</summary>
            <returns> the template name
            </returns>
        </member>
        <member name="P:NVelocity.Exception.TemplateInitException.LineNumber">
            <summary> Returns the line number where this exception occured.</summary>
            <returns> the line number
            </returns>
        </member>
        <member name="P:NVelocity.Exception.TemplateInitException.ColumnNumber">
            <summary> Returns the column number where this exception occured.</summary>
            <returns> the line number
            </returns>
        </member>
        <member name="T:NVelocity.Extension.StringExtension">
            <summary>
            
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Break">
            <summary> Break directive used for interrupting foreach loops.
            
            </summary>
            <author>  <a href="mailto:wyla@removethis.sci.fi">Jarkko Viinamaki</a>
            </author>
            <version>  $Id$
            </version>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Directive">
            <summary> Base class for all directives used in Velocity.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: Directive.java 724825 2008-12-09 18:56:06Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Directive.rsvc">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Directive.SetLocation(System.Int32,System.Int32)">
            <summary> Allows the template location to be set.</summary>
            <param name="line">
            </param>
            <param name="column">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Directive.SetLocation(System.Int32,System.Int32,System.String)">
            <summary> Allows the template location to be set.</summary>
            <param name="line">
            </param>
            <param name="column">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Directive.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> How this directive is to be initialized.</summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Directive.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> How this directive is to be rendered</summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException </throws>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Directive.Type">
            <summary> Get the directive type BLOCK/LINE.</summary>
            <returns> The directive type BLOCK/LINE.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Directive.Line">
            <summary> for Log msg purposes</summary>
            <returns> The current line for Log msg purposes.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Directive.Column">
            <summary> for Log msg purposes</summary>
            <returns> The current column for Log msg purposes.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Directive.TemplateName">
            <returns> The template file name this directive was defined in, or null if not 
            defined in a file.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Directive.Name">
            <summary> Return the name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Break.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  simple Init - Init the tree and Get the elementKey from
            the AST
            </summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Break.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Break directive does not actually do any rendering. 
            
            This directive throws a BreakException (RuntimeException) which
            signals foreach directive to break out of the loop. Note that this
            directive does not verify that it is being called inside a foreach
            loop.
            
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> true if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Break.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Break.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Define">
            <summary> Directive that puts an unrendered AST block in the context
            under the specified key, postponing rendering until the
            reference is used and rendered.
            
            </summary>
            <author>  Andrew Tetlaw
            </author>
            <author>  Nathan Bubna
            </author>
            <version>  $Id: Define.java 686842 2008-08-18 18:29:31Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Define.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  simple Init - Get the key</summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Define.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> directive.render() simply makes an instance of the Block inner class
            and places it into the context as indicated.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Define.Id(NVelocity.Context.IInternalContextAdapter)">
            <summary> Creates a string identifying the source and location of the block
            definition, and the current template being rendered if that is
            different.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Define.Type">
            <summary> Return type of this directive.</summary>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Define.Name">
            <summary> Return name of this directive.</summary>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Define.Block">
            <summary> parameters class placed in the context, holds the context and writer
            being used for the render, as well as the parent (which already holds
            everything else we need).
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.IRenderable">
            <summary>  This interface caraterize objects other than ASTNodes that can be rendered
            to a writer using a context.
            
            </summary>
            <author>  <a href="mailto:claude.brisson@gmail.com">Claude Brisson</a>
            </author>
            <version>  $Id:$
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Define.Block.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <summary> </summary>
        </member>
        <member name="T:NVelocity.Runtime.Directive.DirectiveType">
            <summary>  Base class for all directives used in Velocity.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: DirectiveConstants.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Directive.DirectiveType.BLOCK">
            <summary>Block directive indicator </summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.DirectiveType.LINE">
            <summary>Line directive indicator </summary>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Evaluate">
            <summary> Evaluates the directive argument as a VTL string, using the existing
            context.
            
            </summary>
            <author>  <a href="mailto:wglass@apache.org">Will Glass-Husain</a>
            </author>
            <version>  $Id: Evaluate.java 737544 2009-01-25 17:42:08Z nbubna $
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Evaluate.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Initialize and check arguments.</summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Evaluate.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Evaluate the argument, convert to a String, and Evaluate again 
            (with the same context).
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException  </throws>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Evaluate.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Evaluate.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Foreach">
            <summary> Foreach directive used for moving through arrays,
            or objects that provide an Iterator.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  Daniel Rall
            </author>
            <version>  $Id: Foreach.java 730367 2008-12-31 10:29:21Z byron $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Foreach.counterName">
            <summary> The name of the variable to use when placing
            the counter value into the context. Right
            now the default is $velocityCount.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Foreach.counterInitialValue">
            <summary> What value to start the loop counter at.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Foreach.maxNbrLoops">
            <summary> The maximum number of times we're allowed to loop.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Foreach.skipInvalidIterator">
            <summary> Whether or not to throw an Exception if the iterator is null.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Foreach.elementKey">
            <summary> The reference name used to access each
            of the elements in the list object. It
            is the $item in the following:
            
            #foreach ($item in $list)
            
            This can be used class wide because
            it is immutable.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.Foreach.uberInfo">
            <summary>  immutable, so create in init</summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  simple init - init the tree and get the elementKey from
            the AST
            </summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.Put(NVelocity.Context.IInternalContextAdapter,System.String,System.Object)">
            <summary> Extension hook to allow subclasses to control whether loop vars
            are set locally or not. So, those in favor of VELOCITY-285, can
            make that happen easily by overriding this and having it use
            context.localPut(k,v). See VELOCITY-630 for more on this.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  renders the #foreach() block</summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Foreach.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Foreach.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Foreach.NullHolderContext">
            <summary> A special context to use when the foreach iterator returns a null.  This
            is required since the standard context may not support nulls.
            All puts and gets are passed through, except for the foreach iterator key.
            </summary>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.NullHolderContext.#ctor(System.String,NVelocity.Context.IInternalContextAdapter)">
            <summary> Create the context as a wrapper to be used within the foreach</summary>
            <param name="key">the reference used in the foreach
            </param>
            <param name="context">the parent context
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.NullHolderContext.Get(System.String)">
            <summary> Get an object from the context, or null if the key is equal to the loop variable</summary>
            <seealso cref="!:org.apache.velocity.context.InternalContextAdapter.get(java.lang.String)">
            </seealso>
            <exception cref="T:NVelocity.Exception.MethodInvocationException">passes on potential exception from reference method call
            </exception>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.NullHolderContext.Put(System.String,System.Object)">
            <seealso cref="!:org.apache.velocity.context.InternalContextAdapter.put(java.lang.String key, java.lang.Object value)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.NullHolderContext.LocalPut(System.String,System.Object)">
            <summary> Allows callers to explicitly put objects in the local context.
            Objects added to the context through this method always end up
            in the top-level context of possible wrapped contexts.
            
            </summary>
            <param name="key">name of item to set.
            </param>
            <param name="value">object to set to key.
            </param>
            <seealso cref="!:org.apache.velocity.context.InternalWrapperContext.localPut(String, Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Foreach.NullHolderContext.Remove(System.Object)">
            <summary> Remove an object from the context</summary>
            <seealso cref="!:org.apache.velocity.context.InternalContextAdapter.remove(java.lang.Object key)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Include">
            <summary> <p>Pluggable directive that handles the #include() statement in VTL.
            This #include() can take multiple arguments of either
            StringLiteral or Reference.</p>
            
            <p>Notes:</p>
            <ol>
            <li>For security reasons, the included source material can only come
            from somewhere within the template root tree.  If you want to include
            content from elsewhere on your disk, Add extra template roots, or use
            a link from somwhere under template root to that content.</li>
            
            <li>By default, there is no output to the render stream in the event of
            a problem.  You can override this behavior with two property values :
            include.output.errormsg.start
            include.output.errormsg.end
            If both are defined in velocity.properties, they will be used to
            in the render output to bracket the arg string that caused the
            problem.
            Ex. : if you are working in html then
            include.output.errormsg.start=&lt;!-- #include Error :
            include.output.errormsg.end= --&gt;
            might be an excellent way to start...</li>
            
            <li>As noted above, #include() can take multiple arguments.
            Ex : #include('foo.vm' 'bar.vm' $foo)
            will include all three if valid to output without any
            special separator.</li>
            </ol>
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:kav@kav.dk">Kasper Nielsen</a>
            </author>
            <version>  $Id: Include.java 724825 2008-12-09 18:56:06Z nbubna $
            </version>
        </member>
        <member name="T:NVelocity.Runtime.Directive.InputBase">
            <summary> Base class for directives which do input operations
            (e.g. <code>#include()</code>, <code>#parse()</code>, etc.).
            
            </summary>
            <author>  <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>
            </author>
            <since> 1.4
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Directive.InputBase.GetInputEncoding(NVelocity.Context.IInternalContextAdapter)">
            <summary> Decides the encoding used during input processing of this
            directive.
            
            Get the resource, and assume that we use the encoding of the
            current template the 'current resource' can be
            <code>null</code> if we are processing a stream....
            
            </summary>
            <param name="context">The context to derive the default input encoding
            from.
            </param>
            <returns> The encoding to use when processing this directive.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Include.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  simple Init - Init the tree and Get the elementKey from
            the AST
            </summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Include.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  iterates through the argument list and renders every
            argument that is appropriate.  Any non appropriate
            arguments are logged, but render() continues.
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  ResourceNotFoundException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Include.RenderOutput(NVelocity.Runtime.Parser.Node.INode,NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <summary>  does the parameters rendering of the included file
            
            </summary>
            <param name="node">AST argument of type StringLiteral or Reference
            </param>
            <param name="context">valid context so we can render References
            </param>
            <param name="writer">output Writer
            </param>
            <returns> boolean success or failure.  failures are logged
            </returns>
            <exception cref="!:IOException">
            </exception>
            <exception cref="T:NVelocity.Exception.MethodInvocationException">
            </exception>
            <exception cref="T:NVelocity.Exception.ResourceNotFoundException">
            </exception>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Include.OutputErrorToStream(System.IO.TextWriter,System.String)">
            <summary>  Puts a message to the render output stream if ERRORMSG_START / END
            are valid property strings.  Mainly used for end-user template
            debugging.
            </summary>
            <param name="writer">
            </param>
            <param name="msg">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Include.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Include.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Literal">
            <summary> A very simple directive that leverages the Node.literal()
            to grab the literal rendition of a node. We basically
            grab the literal value on Init(), then repeatedly use
            that during render().
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: Literal.java 471381 2006-11-05 08:56:58Z wglass $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Literal.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Store the literal rendition of a node using
            the Node.literal().
            </summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Literal.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Throw the literal rendition of the block between
            #literal()/#end into the writer.
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Literal.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Literal.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Macro">
            <summary>  Macro implements the macro definition directive of VTL.
            
            example :
            
            #macro( isnull $i )
            #if( $i )
            $i
            #end
            #end
            
            This object is used at parse time to mainly process and register the
            macro.  It is used inline in the parser when processing a directive.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: Macro.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Macro.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>   render() doesn't do anything in the final output rendering.
            There is no output from a #macro() directive.
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Macro.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <seealso cref="!:org.apache.velocity.runtime.directive.Directive.Init(org.apache.velocity.runtime.RuntimeServices, org.apache.velocity.context.InternalContextAdapter, NVelocity.Runtime.Paser.Node.Node)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Macro.ProcessAndRegister(NVelocity.Runtime.IRuntimeServices,NVelocity.Runtime.Parser.Token,NVelocity.Runtime.Parser.Node.INode,System.String)">
            <summary>  Used by Parser.java to process VMs during the parsing process.
            
            This method does not render the macro to the output stream,
            but rather <i>processes the macro body</i> into the internal
            representation used by {#link
            org.apache.velocity.runtime.directive.VelocimacroProxy}
            objects, and if not currently used, adds it to the macro
            Factory.
            </summary>
            <param name="rs">
            </param>
            <param name="t">
            </param>
            <param name="node">
            </param>
            <param name="sourceTemplate">
            </param>
            <throws>  IOException </throws>
            <throws>  ParseException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Macro.GetArgArray(NVelocity.Runtime.Parser.Node.INode,NVelocity.Runtime.IRuntimeServices)">
            <summary> Creates an array containing the literal text from the macro
            arguement(s) (including the macro's name as the first arg).
            
            </summary>
            <param name="node">The parse node from which to grok the argument
            list.  It's expected to include the block node tree (for the
            macro body).
            </param>
            <param name="rsvc">For debugging purposes only.
            </param>
            <returns> array of arguments
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Macro.MacroToString(System.Text.StringBuilder,System.String[])">
            <summary> For debugging purposes.  Formats the arguments from
            <code>argArray</code> and appends them to <code>buf</code>.
            
            </summary>
            <param name="buf">A StringBuffer. If null, a new StringBuffer is allocated.
            </param>
            <param name="argArray">The Macro arguments to format
            
            </param>
            <returns> A StringBuffer containing the formatted arguments. If a StringBuffer
            has passed in as buf, this method returns it.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Macro.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Macro.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.MacroParseException">
            <summary>  Exception to indicate problem happened while constructing #macro()
            
            For internal use in parser - not to be passed to app level
            
            </summary>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: MacroParseException.java 736127 2009-01-20 21:59:00Z byron $
            </version>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.ParseException”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.Runtime.Parser.ParseException.#ctor(NVelocity.Runtime.Parser.Token,System.Int32[][],System.String[])”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.ParseException.#ctor">
            <summary> The following constructors are for use by you for whatever
            purpose you can think of.  Constructing the exception in this
            manner makes the exception behave in the normal way - i.e., as
            documented in the class "Throwable".  The fields "errorToken",
            "expectedTokenSequences", and "tokenImage" do not contain
            relevant information.  The JavaCC generated code does not use
            these constructors.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParseException.specialConstructor">
            <summary> This variable determines which constructor was used to create
            this object and thereby affects the semantics of the
            "getMessage" method (see below).
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParseException.currentToken">
            <summary> This is the last token that has been consumed successfully.  If
            this object has been created due to a parse error, the token
            followng this token will (therefore) be the first error token.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParseException.expectedTokenSequences">
            <summary> Each entry in this array is an array of integers.  Each array
            of integers represents a sequence of tokens (by their ordinal
            values) that is expected at this point of the parse.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParseException.tokenImage">
            <summary> This is a reference to the "tokenImage" array of the generated
            parser within which the parse error occurred.  This array is
            defined in the generated ...Constants interface.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParseException.eol">
            <summary> The end of line string for this machine.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ParseException.AddEscapes(System.String)">
            <summary> Used to convert raw characters to their escaped version
            when these raw version cannot be used as part of an ASCII
            string literal.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.ParseException.Message">
            <summary> This method has the standard behavior when this object has been
            created using the standard constructors.  Otherwise, it uses
            "currentToken" and "expectedTokenSequences" to generate a parse
            error message and returns it.  If this object has been created
            due to a parse error, and you do not catch it (it gets thrown
            from the parser), then this method is called during the printing
            of the final stack trace, and hence the correct error message
            gets displayed.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.MacroParseException.#ctor(System.String,System.String,NVelocity.Runtime.Parser.Token)">
            <param name="msg">
            </param>
            <param name="templateName">
            </param>
            <param name="currentToken">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.MacroParseException.AppendTemplateInfo(System.Text.StringBuilder)">
            <param name="sb">
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Directive.MacroParseException.TemplateName">
            <summary> returns the Template name where this exception occured.</summary>
            <returns> The Template name where this exception occured.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Directive.MacroParseException.LineNumber">
            <summary> returns the line number where this exception occured.</summary>
            <returns> The line number where this exception occured.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Directive.MacroParseException.ColumnNumber">
            <summary> returns the column number where this exception occured.</summary>
            <returns> The column number where this exception occured.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Directive.MacroParseException.Message">
            <summary> This method has the standard behavior when this object has been
            created using the standard constructors.  Otherwise, it uses
            "currentToken" and "expectedTokenSequences" to generate a parse
            Error message and returns it.  If this object has been created
            due to a parse Error, and you do not catch it (it gets thrown
            from the parser), then this method is called during the printing
            of the final stack Trace, and hence the correct Error message
            gets displayed.
            </summary>
            <returns> the current message.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Directive.Parse">
            <summary> Pluggable directive that handles the <code>#parse()</code>
            statement in VTL.
            
            <pre>
            Notes:
            -----
            1) The parsed source material can only come from somewhere in
            the TemplateRoot tree for security reasons. There is no way
            around this.  If you want to include content from elsewhere on
            your disk, use a link from somwhere under Template Root to that
            content.
            
            2) There is a limited parse depth.  It is set as a property
            "directive.parse.max.depth = 10" by default.  This 10 deep
            limit is a safety feature to prevent infinite loops.
            </pre>
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:Christoph.Reck@dlr.de">Christoph Reck</a>
            </author>
            <version>  $Id: Parse.java 724825 2008-12-09 18:56:06Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Parse.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Init's the #parse directive.</summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.Parse.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>  iterates through the argument list and renders every
            argument that is appropriate.  Any non appropriate
            arguments are logged, but render() continues.
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException </throws>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Parse.Type">
            <summary> Return type of this directive.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.Parse.Name">
            <summary> Return name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.RuntimeMacro">
            <summary> This class acts as a proxy for potential macros.  When the AST is built
            this class is inserted as a placeholder for the macro (whether or not
            the macro is actually defined).  At render time we check whether there is
            a implementation for the macro call. If an implementation cannot be
            found the literal text is rendered.
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Directive.RuntimeMacro.macroName">
            <summary> Name of the macro</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.RuntimeMacro.sourceTemplate">
            <summary> source template name</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.RuntimeMacro.literal">
            <summary> Literal text of the macro</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.RuntimeMacro.node">
            <summary> Node of the macro call</summary>
        </member>
        <member name="F:NVelocity.Runtime.Directive.RuntimeMacro.strictRef">
            <summary> Indicates if we are running in strict reference mode.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Directive.RuntimeMacro.#ctor(System.String,System.String)">
            <summary> Create a RuntimeMacro instance. Macro name and source
            template stored for later use.
            
            </summary>
            <param name="macroName">name of the macro
            </param>
            <param name="sourceTemplate">template where macro call is made
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.RuntimeMacro.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Intialize the Runtime macro. At the Init time no implementation so we
            just save the values to use at the render time.
            
            </summary>
            <param name="rs">runtime services
            </param>
            <param name="context">InternalContextAdapter
            </param>
            <param name="node">node containing the macro call
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.RuntimeMacro.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Velocimacro implementation is not known at the Init time. So look for
            a implementation in the macro libaries and if finds one renders it. The
            parameters rendering is delegated to the VelocimacroProxy object. When
            looking for a macro we first loot at the template with has the
            macro call then we look at the macro lbraries in the order they appear
            in the list. If a macro has many definitions above look up will
            determine the precedence.
            
            </summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <param name="node">
            </param>
            <returns> true if the rendering is successfull
            </returns>
            <throws>  IOException </throws>
            <throws>  ResourceNotFoundException </throws>
            <throws>  ParseErrorException </throws>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.RuntimeMacro.Type">
            <summary> Velocimacros are always LINE
            type directives.
            
            </summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.RuntimeMacro.Literal">
            <summary> It is probably quite rare that we need to render the macro literal
            so do it only on-demand and then cache the value. This tactic helps to
            reduce memory usage a bit.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Directive.RuntimeMacro.Name">
            <summary> Return name of this Velocimacro.
            
            </summary>
            <returns> The name of this Velocimacro.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Directive.VelocimacroProxy">
            <summary>  VelocimacroProxy.java
            
            a proxy Directive-derived object to fit with the current directive system
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: VelocimacroProxy.java 704172 2008-10-13 17:29:25Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Directive.VelocimacroProxy.SetName(System.String)">
            <summary> sets the directive name of this VM
            
            </summary>
            <param name="name">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Directive.VelocimacroProxy.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> Renders the macro using the context.
            
            </summary>
            <param name="context">Current rendering context
            </param>
            <param name="writer">Writer for output
            </param>
            <param name="node">AST that calls the macro
            </param>
            <returns> True if the directive rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  MacroOverflowException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Directive.VelocimacroProxy.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary> The major meat of VelocimacroProxy, Init() checks the # of arguments.
            
            </summary>
            <param name="rs">
            </param>
            <param name="context">
            </param>
            <param name="node">
            </param>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Directive.VelocimacroProxy.Type">
            <summary> Velocimacros are always LINE type directives.</summary>
            <returns> The type of this directive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.VelocimacroProxy.ArgArray">
            <summary> sets the array of arguments specified in the macro definition
            
            </summary>
            <param name="arr">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Directive.VelocimacroProxy.NodeTree">
            <param name="tree">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Directive.VelocimacroProxy.NumArgs">
            <summary> returns the number of ars needed for this VM
            
            </summary>
            <returns> The number of ars needed for this VM
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Directive.VelocimacroProxy.Name">
            <summary> Return name of this Velocimacro.</summary>
            <returns> The name of this Velocimacro.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.IParserPool">
            <summary> Provides instances of parsers as needed.  Get() will return a new parser if
            available.  If a parser is acquired from the pool, Put() should be called
            with that parser to make it available again for reuse.
            
            </summary>
            <author>  <a href="mailto:sergek@lokitech.com">Serge Knystautas</a>
            </author>
            <version>  $Id: RuntimeInstance.java 384374 2006-03-08 23:19:30Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.IParserPool.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <summary> Initialize the pool so that it can begin serving parser instances.</summary>
            <param name="svc">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.IParserPool.Get">
            <summary> Retrieve an instance of a parser pool.</summary>
            <returns> A parser object.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IParserPool.Put(NVelocity.Runtime.Parser.Parser)">
            <summary> Return the parser to the pool so that it may be reused.</summary>
            <param name="parser">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.IRuntimeServices">
            <summary> Interface for internal runtime services that are needed by the
            various components w/in Velocity.  This was taken from the old
            Runtime singleton, and anything not necessary was removed.
            
            Currently implemented by RuntimeInstance.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magusson Jr.</a>
            </author>
            <version>  $Id: RuntimeServices.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.Init">
            <summary> This is the primary initialization method in the Velocity
            Runtime. The systems that are setup/initialized here are
            as follows:
            
            <ul>
            <li>Logging System</li>
            <li>ResourceManager</li>
            <li>Parser Pool</li>
            <li>Global Cache</li>
            <li>Static Content Include System</li>
            <li>Velocimacro System</li>
            </ul>
            </summary>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.SetProperty(System.String,System.Object)">
            <summary> Allows an external system to set a property in
            the Velocity Runtime.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="value">property value
            </param>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.AddProperty(System.String,System.Object)">
            <summary> Add a property to the configuration. If it already
            exists then the value stated here will be added
            to the configuration entry. For example, if
            
            resource.loader = file
            
            is already present in the configuration and you
            
            addProperty("resource.loader", "classpath")
            
            Then you will end up with a Vector like the
            following:
            
            ["file", "classpath"]
            
            </summary>
            <param name="key">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.ClearProperty(System.String)">
            <summary> Clear the values pertaining to a particular
            property.
            
            </summary>
            <param name="key">of property to clear
            </param>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetProperty(System.String)">
            <summary>  Allows an external caller to Get a property.  The calling
            routine is required to know the type, as this routine
            will return an Object, as that is what properties can be.
            
            </summary>
            <param name="key">property to return
            </param>
            <returns> The value.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.Init(Commons.Collections.ExtendedProperties)">
            <summary> Initialize the Velocity Runtime with a Properties
            object.
            
            </summary>
            <param name="p">
            </param>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.Init(System.String)">
            <summary> Initialize the Velocity Runtime with the name of
            ExtendedProperties object.
            
            </summary>
            <param name="configurationFile">
            </param>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.Parse(System.String,System.String)">
            <summary> Wraps the String in a StringReader and passes it off to
            {@link #parse(Reader,String)}.
            </summary>
            <since> 1.6
            </since>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.IRuntimeServices.Parse(System.IO.TextReader,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.IRuntimeServices.Parse(System.IO.TextReader,System.String,System.Boolean)">
            <summary>  Parse the input and return the root of the AST node structure.
            
            </summary>
            <param name="reader">inputstream retrieved by a resource loader
            </param>
            <param name="templateName">name of the template being parsed
            </param>
            <param name="dumpNamespace">flag to dump the Velocimacro namespace for this template
            </param>
            <returns> The AST representing the template.
            </returns>
            <throws>  ParseException </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.String)">
            <summary> Renders the input string using the context into the output writer.
            To be used when a template is dynamically constructed, or want to use
            Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="out"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log
            messages in case of Error
            </param>
            <param name="instring">input string containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While rendering to the writer, an I/O problem occured. </throws>
            <since> Velocity 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.IO.TextReader)">
            <summary> Renders the input reader using the context into the output writer.
            To be used when a template is dynamically constructed, or want to
            use Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="writer"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log messages
            in case of Error
            </param>
            <param name="reader">Reader containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While reading from the reader or rendering to the writer, </throws>
            <summary>                     an I/O problem occured.
            </summary>
            <since> Velocity 1.6
            </since>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.IRuntimeServices.InvokeVelocimacro(System.String,System.String,System.String[],NVelocity.Context.IContext,System.IO.TextWriter)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetTemplate(System.String)">
            <summary> Returns a <code>Template</code> from the resource manager.
            This method assumes that the character encoding of the
            template is set by the <code>input.encoding</code>
            property.  The default is "ISO-8859-1"
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetTemplate(System.String,System.String)">
            <summary> Returns a <code>Template</code> from the resource manager
            
            </summary>
            <param name="name">The  name of the desired template.
            </param>
            <param name="encoding">Character encoding of the template
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetContent(System.String)">
            <summary> Returns a static content resource from the
            resource manager.  Uses the current value
            if INPUT_ENCODING as the character encoding.
            
            </summary>
            <param name="name">Name of content resource to Get
            </param>
            <returns> parsed ContentResource object ready for use
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException </throws>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetContent(System.String,System.String)">
            <summary> Returns a static content resource from the
            resource manager.
            
            </summary>
            <param name="name">Name of content resource to Get
            </param>
            <param name="encoding">Character encoding to use
            </param>
            <returns> parsed ContentResource object ready for use
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException </throws>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetLoaderNameForResource(System.String)">
            <summary>  Determines is a template exists, and returns name of the loader that
            provides it.  This is a slightly less hokey way to support
            the Velocity.TemplateExists() utility method, which was broken
            when per-template encoding was introduced.  We can revisit this.
            
            </summary>
            <param name="resourceName">Name of template or content resource
            </param>
            <returns> class name of loader than can provide it
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetString(System.String,System.String)">
            <summary> String property accessor method with default to hide the
            configuration implementation.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="defaultValue"> default value to return if key not
            found in resource manager.
            </param>
            <returns> String  value of key or default
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetVelocimacro(System.String,System.String)">
            <summary> Returns the appropriate VelocimacroProxy object if strVMname
            is a valid current Velocimacro.
            
            </summary>
            <param name="vmName"> Name of velocimacro requested
            </param>
            <param name="templateName">Name of the namespace.
            </param>
            <returns> VelocimacroProxy
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetVelocimacro(System.String,System.String,System.String)">
            <summary> Returns the appropriate VelocimacroProxy object if strVMname
            is a valid current Velocimacro.
            
            </summary>
            <param name="vmName"> Name of velocimacro requested
            </param>
            <param name="templateName">Name of the namespace.
            </param>
            <param name="renderingTemplate">Name of the template we are currently rendering. This
            information is needed when VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL setting is true
            and template contains a macro with the same name as the global macro library.
            
            </param>
            <since> Velocity 1.6
            
            </since>
            <returns> VelocimacroProxy
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.AddVelocimacro(System.String,NVelocity.Runtime.Parser.Node.INode,System.String[],System.String)">
            <summary> Adds a new Velocimacro. Usually called by Macro only while parsing.
            
            </summary>
            <param name="name"> Name of velocimacro
            </param>
            <param name="macro"> root AST node of the parsed macro
            </param>
            <param name="argArray"> Array of strings, containing the
            #macro() arguments.  the 0th is the name.
            </param>
            <param name="sourceTemplate">
            </param>
            <since> Velocity 1.6
            
            </since>
            <returns> boolean  True if added, false if rejected for some
            reason (either parameters or permission settings)
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.IsVelocimacro(System.String,System.String)">
            <summary>  Checks to see if a VM exists
            
            </summary>
            <param name="vmName"> Name of velocimacro
            </param>
            <param name="templateName">
            </param>
            <returns> boolean  True if VM by that name exists, false if not
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.DumpVMNamespace(System.String)">
            <summary>  tells the vmFactory to dump the specified namespace.  This is to support
            clearing the VM list when in inline-VM-local-scope mode
            </summary>
            <param name="namespace">
            </param>
            <returns> True if the Namespace was dumped.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetString(System.String)">
            <summary> String property accessor method to hide the configuration implementation</summary>
            <param name="key"> property key
            </param>
            <returns>   value of key or null
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetInt(System.String)">
            <summary> Int property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key">property key
            </param>
            <returns> int value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetInt(System.String,System.Int32)">
            <summary> Int property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key"> property key
            </param>
            <param name="defaultValue">default value
            </param>
            <returns> int  value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetBoolean(System.String,System.Boolean)">
            <summary> Boolean property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key"> property key
            </param>
            <param name="def">default default value if property not found
            </param>
            <returns> boolean  value of key or default value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetApplicationAttribute(System.Object)">
            <summary> Return the specified application attribute.
            
            </summary>
            <param name="key">The name of the attribute to retrieve.
            </param>
            <returns> The value of the attribute.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.SetApplicationAttribute(System.Object,System.Object)">
            <summary> Set the specified application attribute.
            
            </summary>
            <param name="key">The name of the attribute to set.
            </param>
            <param name="value">The attribute value to set.
            </param>
            <returns> the displaced attribute value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.CreateNewParser">
            <summary> Create a new parser instance.</summary>
            <returns> A new parser instance.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.IRuntimeServices.GetDirective(System.String)">
            <summary> Retrieve a previously instantiated directive.</summary>
            <param name="name">name of the directive
            </param>
            <returns> the directive with that name, if any
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Runtime.IRuntimeServices.Configuration">
            <summary> Return the velocity runtime configuration object.
            
            </summary>
            <returns> ExtendedProperties configuration object which houses
            the velocity runtime properties.
            </returns>
            <summary> Allow an external system to set an ExtendedProperties
            object to use. This is useful where the external
            system also uses the ExtendedProperties class and
            the velocity configuration is a subset of
            parent application's configuration. This is
            the case with Turbine.
            
            </summary>
            <param name="configuration">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.IRuntimeServices.Uberspect">
            <summary> Returns the configured class introspection/reflection
            implementation.
            </summary>
            <returns> The current Uberspect object.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.IRuntimeServices.Log">
            <summary> Returns a convenient LogMessage instance that wraps the current LogChute.</summary>
            <returns> A Log object.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.IRuntimeServices.ApplicationEventCartridge">
            <summary> Returns the event handlers for the application.</summary>
            <returns> The event handlers for the application.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.IRuntimeServices.Introspector">
            <summary> Returns the configured method introspection/reflection
            implementation.
            </summary>
            <returns> The configured method introspection/reflection
            implementation.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.IRuntimeServices.Initialized">
            <summary> Returns true if the RuntimeInstance has been successfully initialized.</summary>
            <returns> True if the RuntimeInstance has been successfully initialized.
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Log.HoldingLogChute”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Log.ILogChute.Init(NVelocity.Runtime.IRuntimeServices)">
            <summary> Initializes this LogChute.</summary>
            <param name="rs">
            </param>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.Log.ILogChute.Log(System.Int32,System.String)">
            <summary> Send a Log message from Velocity.</summary>
            <param name="level">
            </param>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.ILogChute.Log(System.Int32,System.String,System.Exception)">
            <summary> Send a Log message from Velocity along with an exception or Error</summary>
            <param name="level">
            </param>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.ILogChute.IsLevelEnabled(System.Int32)">
            <summary> Tell whether or not a Log level is enabled.</summary>
            <param name="level">
            </param>
            <returns> True if a level is enabled.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Log.HoldingLogChute.Init(NVelocity.Runtime.IRuntimeServices)">
            <seealso cref="!:LogChute.Init(IRuntimeServices)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Log.HoldingLogChute.Log(System.Int32,System.String)">
            <summary> Logs messages. All we do is store them until 'later'.
            
            </summary>
            <param name="level">severity level
            </param>
            <param name="message">complete Error message
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.HoldingLogChute.Log(System.Int32,System.String,System.Exception)">
            <summary> Logs messages and errors. All we do is store them until 'later'.
            
            </summary>
            <param name="level">severity level
            </param>
            <param name="message">complete Error message
            </param>
            <param name="t">the accompanying java.lang.Throwable
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.HoldingLogChute.IsLevelEnabled(System.Int32)">
            <seealso cref="!:org.apache.velocity.runtime.Log.LogChute.IsLevelEnabled(int)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Log.HoldingLogChute.TransferTo(NVelocity.Runtime.Log.ILogChute)">
            <summary> Dumps the Log messages this chute is holding into a new chute</summary>
            <param name="newChute">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Log.LogChute_Fields">
            <summary> Base interface that logging systems need to implement. This
            is the blessed descendant of the old LogSystem interface.
            
            </summary>
            <author>  <a href="mailto:jon@latchkey.com">Jon S. Stevens</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:nbubna@apache.org">Nathan Bubna</a>
            </author>
            <version>  $Id: LogChute.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.TRACE_PREFIX">
            <summary>Prefix string for Trace messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.DEBUG_PREFIX">
            <summary>Prefix string for Debug messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.INFO_PREFIX">
            <summary>Prefix string for Info messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.WARN_PREFIX">
            <summary>Prefix string for Warn messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.ERROR_PREFIX">
            <summary>Prefix string for Error messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.TRACE_ID">
            <summary>ID for Trace messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.DEBUG_ID">
            <summary>ID for Debug messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.INFO_ID">
            <summary>ID for Info messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.WARN_ID">
            <summary>ID for warning messages. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogChute_Fields.ERROR_ID">
            <summary>ID for Error messages. </summary>
        </member>
        <member name="T:NVelocity.Runtime.Log.Log">
            <summary> Convenient wrapper for LogChute functions. This implements
            the RuntimeLogger methods (and then some).  It is hoped that
            use of this will fully replace use of the RuntimeLogger.
            
            </summary>
            <author>  <a href="mailto:nbubna@apache.org">Nathan Bubna</a>
            </author>
            <version>  $Id: LogMessage.java 724825 2008-12-09 18:56:06Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.#ctor">
            <summary> Creates a new LogMessage that wraps a HoldingLogChute.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.#ctor(NVelocity.Runtime.Log.ILogChute)">
            <summary> Creates a new LogMessage that wraps the specified LogChute.</summary>
            <param name="chute">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.SetLogChute(NVelocity.Runtime.Log.ILogChute)">
            <summary> Updates the LogChute wrapped by this LogMessage instance.</summary>
            <param name="chute">The new value for the Log chute.
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.GetLogChute">
            <summary> Returns the LogChute wrapped by this LogMessage instance.</summary>
            <returns> The LogChute wrapped by this LogMessage instance.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Trace(System.Object)">
            <summary> LogMessage a Trace message.</summary>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Trace(System.Object,System.Exception)">
            <summary> LogMessage a Trace message and accompanying Throwable.</summary>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Debug(System.Object)">
            <summary> LogMessage a Debug message.</summary>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Debug(System.Object,System.Exception)">
            <summary> LogMessage a Debug message and accompanying Throwable.</summary>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Info(System.Object)">
            <summary> LogMessage an Info message.</summary>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Info(System.Object,System.Exception)">
            <summary> LogMessage an Info message and accompanying Throwable.</summary>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Warn(System.Object)">
            <summary> LogMessage a warning message.</summary>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Warn(System.Object,System.Exception)">
            <summary> LogMessage a warning message and accompanying Throwable.</summary>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Error(System.Object)">
            <summary> LogMessage an Error message.</summary>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.Error(System.Object,System.Exception)">
            <summary> LogMessage an Error message and accompanying Throwable.</summary>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.FormatFileString(NVelocity.Runtime.Directive.Directive)">
            <summary> Creates a string that formats the template filename with line number
            and column of the given Directive. We use this routine to provide a cosistent format for displaying 
            file errors.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.FormatFileString(NVelocity.Runtime.Parser.Node.INode)">
            <summary> Creates a string that formats the template filename with line number
            and column of the given Node. We use this routine to provide a cosistent format for displaying 
            file errors.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.FormatFileString(NVelocity.Util.Introspection.Info)">
            <summary> Simply creates a string that formats the template filename with line number
            and column. We use this routine to provide a cosistent format for displaying 
            file errors.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.Log.FormatFileString(System.String,System.Int32,System.Int32)">
            <summary> Simply creates a string that formats the template filename with line number
            and column. We use this routine to provide a cosistent format for displaying 
            file errors.
            </summary>
            <param name="template">File name of template, can be null
            </param>
            <param name="linenum">Line number within the file
            </param>
            <param name="colnum">Column number withing the file at linenum
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Log.Log.TraceEnabled">
            <summary> Returns true if Trace level messages will be printed by the LogChute.</summary>
            <returns> If Trace level messages will be printed by the LogChute.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Log.Log.DebugEnabled">
            <summary> Returns true if Debug level messages will be printed by the LogChute.</summary>
            <returns> True if Debug level messages will be printed by the LogChute.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Log.Log.InfoEnabled">
            <summary> Returns true if Info level messages will be printed by the LogChute.</summary>
            <returns> True if Info level messages will be printed by the LogChute.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Log.Log.WarnEnabled">
            <summary> Returns true if Warn level messages will be printed by the LogChute.</summary>
            <returns> True if Warn level messages will be printed by the LogChute.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Log.Log.ErrorEnabled">
            <summary> Returns true if Error level messages will be printed by the LogChute.</summary>
            <returns> True if Error level messages will be printed by the LogChute.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Log.LogDisplayWrapper">
            <summary> This is a wrapper around a Log object, that can Add a prefix to Log messages
            and also turn logging on and off dynamically. It is mainly used to control the
            logging of VelociMacro generation messages but is actually generic enough code.
            
            </summary>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: LogDisplayWrapper.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogDisplayWrapper.prefix">
            <summary>The prefix to record with every Log message </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogDisplayWrapper.outputMessages">
            <summary>Log messages only if true </summary>
        </member>
        <member name="F:NVelocity.Runtime.Log.LogDisplayWrapper.log">
            <summary>The LogMessage object we wrap </summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.#ctor(NVelocity.Runtime.Log.Log,System.String,System.Boolean)">
            <summary> Create a new LogDisplayWrapper</summary>
            <param name="Log">The LogMessage object to wrap.
            </param>
            <param name="prefix">The prefix to record with all messages.
            </param>
            <param name="outputMessages">True when messages should actually Get logged.
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.GetLogChute">
            <summary> make sure that we always use the right LogChute Object</summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.LogMessage(System.Int32,System.Object)">
            <seealso cref="!:LogMessage.Log(int, Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.LogMessage(System.Int32,System.Object,System.Exception)">
            <seealso cref="!:LogMessage.Log(int, Object, Throwable)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Trace(System.Boolean,System.Object)">
            <summary> LogMessage a Trace message.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Trace(System.Boolean,System.Object,System.Exception)">
            <summary> LogMessage a Trace message and accompanying Throwable.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Debug(System.Boolean,System.Object)">
            <summary> LogMessage a Debug message.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Debug(System.Boolean,System.Object,System.Exception)">
            <summary> LogMessage a Debug message and accompanying Throwable.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Info(System.Boolean,System.Object)">
            <summary> LogMessage an Info message.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Info(System.Boolean,System.Object,System.Exception)">
            <summary> LogMessage an Info message and accompanying Throwable.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Warn(System.Boolean,System.Object)">
            <summary> LogMessage a warning message.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Warn(System.Boolean,System.Object,System.Exception)">
            <summary> LogMessage a warning message and accompanying Throwable.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Error(System.Boolean,System.Object)">
            <summary> LogMessage an Error message.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogDisplayWrapper.Error(System.Boolean,System.Object,System.Exception)">
            <summary> LogMessage an Error message and accompanying Throwable.</summary>
            <param name="doLogging">LogMessage only if this parameter is true.
            </param>
            <param name="message">
            </param>
            <param name="t">
            </param>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Log.LogManager”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Log.LogManager.IsProbablyProvidedLogChute(System.String)">
            <summary> Simply tells whether the specified classname probably is provided
            by Velocity or is implemented by someone else.  Not surefire, but
            it'll probably always be right.  In any case, this method shouldn't
            be relied upon for anything important.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Log.LogManager.UpdateLog(NVelocity.Runtime.Log.Log,NVelocity.Runtime.IRuntimeServices)">
            <summary> Update the Log instance with the appropriate ILogChute and other
            settings determined by the RuntimeServices.
            </summary>
            <param name="Log">
            </param>
            <param name="rsvc">
            </param>
            <throws>  Exception </throws>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Log.NullLogChute">
            <summary>  Logger used in case of failure. Does nothing.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:nbubna@optonline.net">Nathan Bubna.</a>
            </author>
            <version>  $Id: NullLogChute.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Log.NullLogChute.Init(NVelocity.Runtime.IRuntimeServices)">
            <seealso cref="!:org.apache.velocity.runtime.Log.LogChute.Init(org.apache.velocity.runtime.RuntimeServices)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Log.NullLogChute.Log(System.Int32,System.String)">
            <summary> logs messages to the great Garbage Collector in the sky
            
            </summary>
            <param name="level">severity level
            </param>
            <param name="message">complete Error message
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.NullLogChute.Log(System.Int32,System.String,System.Exception)">
            <summary> logs messages and their accompanying Throwables
            to the great Garbage Collector in the sky
            
            </summary>
            <param name="level">severity level
            </param>
            <param name="message">complete Error message
            </param>
            <param name="t">the java.lang.Throwable
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.NullLogChute.IsLevelEnabled(System.Int32)">
            <seealso cref="!:org.apache.velocity.runtime.Log.LogChute.IsLevelEnabled(int)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Log.SystemLogChute">
            <summary> Logger used when no other is configured.  By default, all messages
            will be printed to the System.err output stream.
            
            </summary>
            <author>  <a href="mailto:nbubna@apache.org">Nathan Bubna</a>
            </author>
            <version>  $Id: SystemLogChute.java 718424 2008-11-17 22:50:43Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Log.SystemLogChute.Log(System.Int32,System.String)">
            <summary> Logs messages to either std.out or std.err
            depending on their severity.
            
            </summary>
            <param name="level">severity level
            </param>
            <param name="message">complete Error message
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.SystemLogChute.Log(System.Int32,System.String,System.Exception)">
            <summary> Logs messages to the system console so long as the specified level
            is equal to or greater than the level this LogChute is enabled for.
            If the level is equal to or greater than LogChute.ERROR_ID, 
            messages will be printed to System.err. Otherwise, they will be 
            printed to System.out. If a java.lang.Throwable accompanies the 
            message, it's stack Trace will be printed to the same stream
            as the message.
            
            </summary>
            <param name="level">severity level
            </param>
            <param name="message">complete Error message
            </param>
            <param name="t">the java.lang.Throwable
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Log.SystemLogChute.IsLevelEnabled(System.Int32)">
            <summary> This will return true if the specified level
            is equal to or higher than the level this
            LogChute is enabled for.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Log.SystemLogChute.EnabledLevel">
            <summary> Returns the current minimum level at which messages will be printed.</summary>
            <summary> Set the minimum level at which messages will be printed.</summary>
        </member>
        <member name="P:NVelocity.Runtime.Log.SystemLogChute.SystemErrLevel">
            <summary> Returns the current minimum level at which messages will be printed
            to System.err instead of System.out.
            </summary>
            <summary> Set the minimum level at which messages will be printed to System.err
            instead of System.out.
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.ParserPoolImpl">
            <summary> This wraps the original parser SimplePool class.  It also handles
            instantiating ad-hoc parsers if none are available.
            
            </summary>
            <author>  <a href="mailto:sergek@lokitech.com">Serge Knystautas</a>
            </author>
            <version>  $Id: RuntimeInstance.java 384374 2006-03-08 23:19:30Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.ParserPoolImpl.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <summary> Create the underlying "pool".</summary>
            <param name="rsvc">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.ParserPoolImpl.Get">
            <summary> Call the wrapped pool.  If none are available, it will create a new
            temporary one.
            </summary>
            <returns> A parser Object.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.ParserPoolImpl.Put(NVelocity.Runtime.Parser.Parser)">
            <summary> Call the wrapped pool.</summary>
            <param name="parser">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Parser.ICharStream">
            <summary> This interface describes a character stream that maintains line and
            column number positions of the characters.  It also has the capability
            to backup the stream to some extent.  An implementation of this
            interface is used in the TokenManager implementation generated by
            JavaCCParser.
            
            All the methods except backup can be implemented in any fashion. backup
            needs to be implemented correctly for the correct operation of the lexer.
            Rest of the methods are all used to Get information like line number,
            column number and the String that constitutes a token and are not used
            by the lexer. Hence their implementation won't affect the generated lexer's
            operation.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ICharStream.ReadChar">
            <summary> Returns the next character from the selected input.  The method
            of selecting the input is the responsibility of the class
            implementing this interface.  Can throw any java.io.IOException.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ICharStream.Backup(System.Int32)">
            <summary> Backs up the input stream by amount steps. Lexer calls this method if it
            had already read some characters, but could not use them to match a
            (longer) token. So, they will be used again as the prefix of the next
            token and it is the implemetation's responsibility to do this right.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ICharStream.BeginToken">
            <summary> Returns the next character that marks the beginning of the next token.
            All characters must remain in the buffer between two successive calls
            to this method to implement backup correctly.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ICharStream.GetImage">
            <summary> Returns a string made up of characters from the marked token beginning 
            to the current buffer position. Implementations have the choice of returning
            anything that they want to. For example, for efficiency, one might decide
            to just return null, which is a valid implementation.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ICharStream.GetSuffix(System.Int32)">
            <summary> Returns an array of characters that make up the suffix of length 'len' for
            the currently matched token. This is used to build up the matched string
            for use in actions in the case of MORE. A simple and inefficient
            implementation of this is as follows :
            
            {
            String t = GetImage();
            return t.substring(t.length() - len, t.length()).toCharArray();
            }
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ICharStream.Done">
            <summary> The lexer calls this function to indicate that it is done with the stream
            and hence implementations can free any resources held by this class.
            Again, the body of this function can be just empty and it will not
            affect the lexer's operation.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.ICharStream.EndColumn">
            <summary> Returns the column number of the last character for current token (being
            matched after the last call to BeginTOken).
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.ICharStream.EndLine">
            <summary> Returns the line number of the last character for current token (being
            matched after the last call to BeginTOken).
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.ICharStream.BeginColumn">
            <summary> Returns the column number of the first character for current token (being
            matched after the last call to BeginTOken).
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.ICharStream.BeginLine">
            <summary> Returns the line number of the first character for current token (being
            matched after the last call to BeginTOken).
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.AbstractExecutor">
            <summary> Abstract class that is used to Execute an arbitrary
            method that is in introspected. This is the superclass
            for the GetExecutor and PropertyExecutor.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: AbstractExecutor.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.AbstractExecutor.Execute(System.Object)">
            <summary> Execute method against context.</summary>
            <param name="instance">
            </param>
            <returns> The resulting object.
            </returns>
            <throws>  IllegalAccessException </throws>
            <throws>  InvocationTargetException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.AbstractExecutor.Alive">
            <summary> Tell whether the executor is alive by looking
            at the value of the method.
            
            </summary>
            <returns> True if executor is alive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.AbstractExecutor.Method">
            <summary> Method to be executed.</summary>
            <param name="method">
            </param>
            <since> 1.5
            </since>
            <returns> The current method.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.AbstractExecutor.Property">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTAddNode”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTMathNode”忽略有格式错误的 XML 注释 -->
        <member name="T:NVelocity.Runtime.Parser.Node.SimpleNode">
            <summary> </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.INode">
            <summary>  This file describes the interface between the Velocity code
            and the JavaCC generated code.
            
            </summary>
            <author>  <a href="mailto:hps@intermeta.de">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: Node.java 720228 2008-11-24 16:58:33Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Open">
            <summary>This method is called after the node has been made the current
            node.  It indicates that child nodes can now be added to it. 
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Close">
            <summary>This method is called after all the child nodes have been
            added.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.AddChild(NVelocity.Runtime.Parser.Node.INode,System.Int32)">
            <summary> This method tells the node to Add its argument to the node's
            list of children.
            </summary>
            <param name="n">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.GetChild(System.Int32)">
            <summary> This method returns a child node.  The children are numbered
            from zero, left to right.
            </summary>
            <param name="i">
            </param>
            <returns> A child node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.GetNumChildren">
            <summary> Return the number of children the node has.</summary>
            <returns> The number of children of this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <param name="visitor">
            </param>
            <param name="data">
            </param>
            <returns> The Node execution result object.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.ChildrenAccept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:jjtAccept(ParserVisitor, Object)">
            </seealso>
            <param name="visitor">
            </param>
            <param name="data">
            </param>
            <returns> The node execution result.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> The Init result.
            </returns>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <param name="context">
            </param>
            <returns> The evaluation result.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Value(NVelocity.Context.IInternalContextAdapter)">
            <param name="context">
            </param>
            <returns> The node value.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <returns> True if the node rendered successfully.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  ParseErrorException </throws>
            <throws>  ResourceNotFoundException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.INode.Execute(System.Object,NVelocity.Context.IInternalContextAdapter)">
            <param name="instance">
            </param>
            <param name="context">
            </param>
            <returns> The execution result.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.LastToken">
            <returns> The last token.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.Type">
            <returns> The NodeType.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.Info">
            <returns> The current node Info.
            </returns>
            <param name="Info">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.Line">
            <returns> The current line position.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.Column">
            <returns> The current column position.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.TemplateName">
            <returns> the file name of the template
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.Parent">
            <summary> This pair of methods are used to inform the node of its
            parent.
            </summary>
            <param name="n">*
            </param>
            <returns> The node parent.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.FirstToken">
            <returns> The first token.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.Literal">
            <returns> A literal.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.INode.IsInvalid">
            <returns>
            Mark the node as invalid.
            True if the node is invalid.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.#ctor(System.Int32)">
            <param name="i">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Open">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtOpen()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Close">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtClose()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.SetFirstToken(NVelocity.Runtime.Parser.Token)">
            <param name="t">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.AddChild(NVelocity.Runtime.Parser.Node.INode,System.Int32)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtAddChild(NVelocity.Runtime.Paser.Node.Node, int)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.GetChild(System.Int32)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtGetChild(int)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.GetNumChildren">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtGetNumChildren()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtAccept(NVelocity.Runtime.Paser.Node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.ChildrenAccept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.childrenAccept(NVelocity.Runtime.Paser.Node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.ToString(System.String)">
            <param name="prefix">
            </param>
            <returns> String representation of this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Dump(System.String)">
            <summary> Override this method if you want to customize how the node dumps
            out its children.
            
            </summary>
            <param name="prefix">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.GetLocation(NVelocity.Context.IInternalContextAdapter)">
            <summary> Return a string that tells the current location of this node.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <throws>  TemplateInitException  </throws>
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.Init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.Evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.value(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.Execute(System.Object,NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.Execute(java.lang.Object, org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SimpleNode.ToString">
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.LastToken">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.getLastToken()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.Type">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.getType()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.Info">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.getInfo()">
            </seealso>
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.setInfo(int)">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.Line">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.getLine()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.Column">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.getColumn()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.FirstToken">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.getFirstToken()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.Parent">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtGetParent()">
            </seealso>
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.jjtSetParent(NVelocity.Runtime.Paser.Node.Node)">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.Literal">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.literal()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SimpleNode.IsInvalid">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.setInvalid()">
            </seealso>
            <seealso cref="!:NVelocity.Runtime.Paser.Node.Node.isInvalid()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMathNode.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMathNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMathNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <summary> gets the two args and performs the operation on them
            
            </summary>
            <param name="context">
            </param>
            <returns> result or null
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMathNode.HandleSpecial(System.Object,System.Object,NVelocity.Context.IInternalContextAdapter)">
            <summary> Extension hook to allow special behavior by subclasses
            If this method returns a non-null value, that is returned,
            rather than the result of the math operation.
            </summary>
            <seealso cref="!:ASTAddNode.handleSpecial">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMathNode.Perform(System.Object,System.Object,NVelocity.Context.IInternalContextAdapter)">
            <summary> Performs the math operation represented by this node.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAddNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAddNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAddNode.HandleSpecial(System.Object,System.Object,NVelocity.Context.IInternalContextAdapter)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAddNode.Perform(System.Object,System.Object,NVelocity.Context.IInternalContextAdapter)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTAndNode">
            <summary> Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTAndNode.java 687184 2008-08-19 22:16:39Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAndNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAndNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAndNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAndNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <summary>  Returns the value of the expression.
            Since the value of the expression is simply the boolean
            result of Evaluate(), lets return that.
            </summary>
            <param name="context">
            </param>
            <returns> The value of the expression.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Parser.Node.ASTAndNode.Evaluate(NVelocity.Context.IInternalContextAdapter)”忽略有格式错误的 XML 注释 -->
        <member name="T:NVelocity.Runtime.Parser.Node.ASTAssignment">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAssignment.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAssignment.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTAssignment.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTBlock">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTBlock.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTBlock.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTBlock.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTBlock.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTComment">
            <summary>  Represents all comments...
            
            </summary>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTComment.java 517553 2007-03-13 06:09:58Z wglass $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTComment.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTComment.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTComment.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTComment.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary>  We need to make sure we catch any of the dreaded MORE tokens.</summary>
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> The data object.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTComment.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTDirective">
            <summary> This class is responsible for handling the pluggable
            directives in VTL.
            
            For example :  #foreach()
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:kav@kav.dk">Kasper Nielsen</a>
            </author>
            <version>  $Id: ASTDirective.java 720228 2008-11-24 16:58:33Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDirective.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDirective.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDirective.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.jjtAccept(NVelocity.Runtime.Paser.Node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDirective.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDirective.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDirective.ToString">
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.ASTDirective.DirectiveName">
            <summary>  Gets the name of this directive.</summary>
            <returns> The name of this directive.
            </returns>
            <summary>   Sets the directive name.  Used by the parser.  This keeps us from having to
            dig it out of the token stream and gives the parse the change to override.
            </summary>
            <param name="str">
            </param>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTDivNode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDivNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTDivNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTElseIfStatement">
            <summary> This class is responsible for handling the ElseIf VTL control statement.
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTElseIfStatement.java 517553 2007-03-13 06:09:58Z wglass $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseIfStatement.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseIfStatement.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseIfStatement.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseIfStatement.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <summary> An ASTElseStatement is true if the expression
            it contains evaluates to true. Expressions know
            how to Evaluate themselves, so we do that
            here and return the value back to ASTIfStatement
            where this node was originally asked to Evaluate
            itself.
            </summary>
            <param name="context">
            </param>
            <returns> True if all childs are true.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseIfStatement.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTElseStatement">
            <summary> This class is responsible for handling the Else VTL control statement.
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTElseStatement.java 517553 2007-03-13 06:09:58Z wglass $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseStatement.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseStatement.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseStatement.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTElseStatement.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <summary> An ASTElseStatement always evaluates to
            true. Basically behaves like an #if(true).
            </summary>
            <param name="context">
            </param>
            <returns> Always true.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTEQNode">
            <summary>  Handles <code>arg1  == arg2</code>
            
            This operator requires that the LHS and RHS are both of the
            same Class OR both are subclasses of java.lang.Number
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>  <a href="mailto:pero@antaramusic.de">Peter Romianowski</a>
            </author>
            <version>  $Id: ASTEQNode.java 691048 2008-09-01 20:26:11Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEQNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEQNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEQNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEQNode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <summary>   Calculates the value of the logical expression
            
            arg1 == arg2
            
            All class types are supported.   Uses equals() to
            determine equivalence.  This should work as we represent
            with the types we already support, and anything else that
            implements equals() to mean more than identical references.
            
            
            </summary>
            <param name="context"> internal context used to Evaluate the LHS and RHS
            </param>
            <returns> true if equivalent, false if not equivalent,
            false if not compatible arguments, or false
            if either LHS or RHS is null
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEQNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTEscape">
            <summary> This class is responsible for handling Escapes
            in VTL.
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTEscape.java 517553 2007-03-13 06:09:58Z wglass $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTEscape.val">
            <summary>Used by the parser </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscape.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscape.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscape.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscape.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscape.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTEscapedDirective">
            <summary> This class is responsible for handling EscapedDirectives
            in VTL.
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTEscapedDirective.java 517553 2007-03-13 06:09:58Z wglass $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscapedDirective.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscapedDirective.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscapedDirective.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTEscapedDirective.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTExpression">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTExpression.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTExpression.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTExpression.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTExpression.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTExpression.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTFalse">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFalse.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFalse.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFalse.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFalse.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFalse.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral">
            <summary> Handles floating point numbers.  The value will be either a Double
            or a BigDecimal.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary>  Initialization method - doesn't do much but do the object
            creation.  We only need to do it once.
            </summary>
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> The data object.
            </returns>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTGENode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGENode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGENode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGENode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGENode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGENode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.value(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTGTNode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGTNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGTNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGTNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGTNode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTGTNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.value(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTIdentifier">
            <summary>  ASTIdentifier.java
            
            Method support for identifiers :  $foo
            
            mainly used by ASTRefrence
            
            Introspection is now moved to 'just in time' or at render / execution
            time. There are many reasons why this has to be done, but the
            primary two are   thread safety, to remove any context-derived
            information from class member  variables.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTIdentifier.java 720228 2008-11-24 16:58:33Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTIdentifier.uberInfo">
            <summary>  This is really immutable after the Init, so keep one for this node</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTIdentifier.strictRef">
            <summary> Indicates if we are running in strict reference mode.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIdentifier.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIdentifier.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIdentifier.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIdentifier.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary>  simple Init - don't do anything that is context specific.
            just Get what we need from the AST, which is static.
            </summary>
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> The data object.
            </returns>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIdentifier.Execute(System.Object,NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Execute(java.lang.Object, org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTIfStatement">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIfStatement.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIfStatement.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIfStatement.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIfStatement.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIfStatement.Process(NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.IParserVisitor)">
            <param name="context">
            </param>
            <param name="visitor">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTIncludeStatement">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIncludeStatement.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIncludeStatement.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIncludeStatement.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTIntegerLiteral">
            <summary> Handles integer numbers.  The value will be either an Integer, a Long, or a BigInteger.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerLiteral.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerLiteral.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerLiteral.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerLiteral.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerLiteral.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTIntegerRange">
            <summary> handles the range 'operator'  [ n .. m ]
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerRange.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerRange.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerRange.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTIntegerRange.Value(NVelocity.Context.IInternalContextAdapter)">
            <summary>  does the real work.  Creates an Vector of Integers with the
            right value range
            
            </summary>
            <param name="context"> app context used if Left or Right of .. is a ref
            </param>
            <returns> Object array of Integers
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTLENode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLENode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLENode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLENode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLENode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLENode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.value(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTLTNode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLTNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLTNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLTNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLTNode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTLTNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.value(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTMap">
            <summary> AST Node for creating a map / dictionary.
            
            This class was originally generated from Parset.jjt.
            
            </summary>
            <version>  $Id: ASTMap.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMap.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMap.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMap.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMap.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTMethod">
            <summary>  ASTMethod.java
            
            Method support for references :  $foo.method()
            
            NOTE :
            
            introspection is now done at render time.
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTMethod.java 720228 2008-11-24 16:58:33Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTMethod.strictRef">
            <summary> Indicates if we are running in strict reference mode.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary>  simple Init - Init our subtree and Get what we can from
            the AST
            </summary>
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> The Init result
            </returns>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.Execute(System.Object,NVelocity.Context.IInternalContextAdapter)">
            <summary>  invokes the method.  Returns null if a problem, the
            parameters return if the method returns something, or
            an empty string "" if the method returns void
            </summary>
            <param name="instance">
            </param>
            <param name="context">
            </param>
            <returns> Result or null.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.ASTMethod.MethodName">
            <returns> Returns the methodName.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTMethod.MethodCacheKey">
            <summary> Internal class used as key for method cache.  Combines
            ASTMethod fields with array of parameter classes.  Has
            public access (and complete constructor) for unit test 
            purposes.
            </summary>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.MethodCacheKey.Equals(System.Object)">
            <seealso cref="!:java.lang.Object.equals(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMethod.MethodCacheKey.GetHashCode">
            <seealso cref="!:java.lang.Object.hashCode()">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTModNode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTModNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTModNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTMulNode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMulNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTMulNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTNENode">
            <summary>  Handles <code>arg1  != arg2</code>
            
            This operator requires that the LHS and RHS are both of the
            same Class OR both are subclasses of java.lang.Number
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>  <a href="mailto:pero@antaramusic.de">Peter Romianowski</a>
            </author>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNENode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNENode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNENode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNENode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNENode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTNotNode">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNotNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNotNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNotNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNotNode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTNotNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTObjectArray">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTObjectArray.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTObjectArray.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTObjectArray.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTObjectArray.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTOrNode">
            <summary> Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTOrNode.java 685370 2008-08-12 23:36:35Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTOrNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTOrNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTOrNode.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTOrNode.Value(NVelocity.Context.IInternalContextAdapter)">
            <summary>  Returns the value of the expression.
            Since the value of the expression is simply the boolean
            result of Evaluate(), lets return that.
            </summary>
            <param name="context">
            </param>
            <returns> The Expression value.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTOrNode.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <summary>  the logical or :
            the rule :
            left || null -> left
            null || right -> right
            null || null -> false
            left || right ->  left || right
            </summary>
            <param name="context">
            </param>
            <returns> The evaluation result.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTParameters">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTParameters.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTParameters.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTParameters.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTprocess">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTprocess.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTprocess.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTprocess.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTReference”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.Runtime.Parser.Node.ASTReference.strictRef">
            <summary> Indicates if we are running in strict reference mode.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.Execute(System.Object,NVelocity.Context.IInternalContextAdapter)">
            <summary>   gets an Object that 'is' the value of the reference
            
            </summary>
            <param name="o">  unused Object parameter
            </param>
            <param name="context">context used to generate value
            </param>
            <returns> The execution result.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <summary>  gets the value of the reference and outputs it to the
            writer.
            
            </summary>
            <param name="context"> context of data to use in getting value
            </param>
            <param name="writer">  writer to render to
            </param>
            <returns> True if rendering was successful.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.GetNullString(NVelocity.Context.IInternalContextAdapter)">
            <summary> This method helps to implement the "render literal if null" functionality.
            
            VelocimacroProxy saves references to macro arguments (AST nodes) so that if we have a macro
            #foobar($a $b) then there is key "$a.literal" which points to the literal presentation of the
            argument provided to variable $a. If the value of $a is null, we render the string that was
            provided as the argument.
            
            </summary>
            <param name="context">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <summary>   Computes boolean value of this reference
            Returns the actual value of reference return type
            boolean, and 'true' if value is not null
            
            </summary>
            <param name="context">context to compute value with
            </param>
            <returns> True if evaluation was ok.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:org.apache.velocity.runtime.parser.node.SimpleNode.value(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.SetValue(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary>  Sets the value of a complex reference (something like $foo.bar)
            Currently used by ASTSetReference()
            
            </summary>
            <seealso cref="T:NVelocity.Runtime.Parser.Node.ASTSetDirective">
            
            </seealso>
            <param name="context">context object containing this reference
            </param>
            <param name="value">Object to set as value
            </param>
            <returns> true if successful, false otherwise
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTReference.GetVariableValue(NVelocity.Context.IContext,System.String)">
            <param name="context">
            </param>
            <param name="variable">
            </param>
            <returns> The evaluated value of the variable.
            </returns>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.ASTReference.RootString">
            <summary>  Returns the 'root string', the reference key</summary>
            <returns> the root string.
            </returns>
        </member>
        <!-- 对于成员“P:NVelocity.Runtime.Parser.Node.ASTReference.Literal”忽略有格式错误的 XML 注释 -->
        <member name="T:NVelocity.Runtime.Parser.Node.ASTSetDirective">
            <summary> Node for the #set directive
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ASTSetDirective.java 720228 2008-11-24 16:58:33Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTSetDirective.uberInfo">
            <summary>  This is really immutable after the Init, so keep one for this node</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTSetDirective.strictRef">
            <summary> Indicates if we are running in strict reference mode.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSetDirective.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSetDirective.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSetDirective.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSetDirective.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary>  simple Init.  We can Get the RHS and LHS as the the tree structure is static</summary>
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> Init result.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSetDirective.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <summary>   puts the value of the RHS into the context under the key of the LHS</summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <returns> True if rendering was sucessful.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.ASTSetDirective.LeftHandSide">
            <summary>  returns the ASTReference that is the LHS of the set statememt
            
            </summary>
            <returns> left hand side of #set statement
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.ASTSetDirective.RightHandSide">
            <summary>  returns the RHS Node of the set statement
            
            </summary>
            <returns> right hand side of #set statement
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTStop">
            <summary> This class is responsible for handling the #stop directive
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <version>  $Id: ASTStop.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStop.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStop.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStop.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStop.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <summary> Do not output anything, just shut off the rendering.</summary>
            <param name="context">
            </param>
            <param name="writer">
            </param>
            <returns> Always true.
            </returns>
            <throws>  IOException </throws>
            <throws>  MethodInvocationException </throws>
            <throws>  ParseErrorException </throws>
            <throws>  ResourceNotFoundException </throws>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTStringLiteral">
            <summary> ASTStringLiteral support. Will Interpolate!
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: ASTStringLiteral.java 705297 2008-10-16 17:59:24Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.ASTStringLiteral.containsLineComment">
            <summary>true if the string contains a line comment (##) </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <summary> Init : we don't have to do much. Init the tree (there shouldn't be one)
            and then see if interpolation is turned on.
            
            </summary>
            <param name="context">
            </param>
            <param name="data">
            </param>
            <returns> Init result.
            </returns>
            <throws>  TemplateInitException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.AdjTokenLineNums(NVelocity.Runtime.Parser.Node.INode)">
            <summary> Adjust all the line and column numbers that comprise a node so that they
            are corrected for the string literals position within the template file.
            This is neccessary if an exception is thrown while processing the node so
            that the line and column position reported reflects the Error position
            within the template and not just relative to the Error position within
            the string literal.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.Unescape(System.String)">
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.jjtAccept(NVelocity.Runtime.Paser.Node.ParserVisitor,">
            java.lang.Object)
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTStringLiteral.Value(NVelocity.Context.IInternalContextAdapter)">
            <summary> renders the value of the string literal If the properties allow, and the
            string literal contains a $ or a # the literal is rendered against the
            context Otherwise, the stringlit is returned.
            
            </summary>
            <param name="context">
            </param>
            <returns> result of the rendering.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.ASTStringLiteral.Constant">
            <summary> Check to see if this is an interpolated string.</summary>
            <returns> true if this is constant (not an interpolated string)
            </returns>
            <since> 1.6
            </since>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.ASTSubtractNode”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSubtractNode.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTSubtractNode.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTText">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTText.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTText.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTText.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTText.Init(NVelocity.Context.IInternalContextAdapter,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTText.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTTrue">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTTrue.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTTrue.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTTrue.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTTrue.Evaluate(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Evaluate(org.apache.velocity.context.InternalContextAdapter)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTTrue.Value(NVelocity.Context.IInternalContextAdapter)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Value(NVelocity.Context.IInternalContextAdapter)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTVariable">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTVariable.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTVariable.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTVariable.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ASTWord">
            <summary> </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTWord.#ctor(System.Int32)">
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTWord.#ctor(NVelocity.Runtime.Parser.Parser,System.Int32)">
            <param name="p">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ASTWord.Accept(NVelocity.Runtime.Parser.Node.IParserVisitor,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SimpleNode.Accept(NVelocity.Runtime.Paser.Node.IParserVisitor, System.Object)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.BooleanPropertyExecutor”忽略有格式错误的 XML 注释 -->
        <member name="T:NVelocity.Runtime.Parser.Node.PropertyExecutor">
            <summary> Returned the value of object property when executed.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.PropertyExecutor.#ctor(NVelocity.Runtime.Log.Log,NVelocity.Util.Introspection.Introspector,System.Type,System.String)">
            <param name="Log">
            </param>
            <param name="introspector">
            </param>
            <param name="clazz">
            </param>
            <param name="property">
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.PropertyExecutor.Discover(System.Type,System.String)">
            <param name="clazz">
            </param>
            <param name="property">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.PropertyExecutor.Execute(System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.AbstractExecutor.Execute(java.lang.Object)">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.PropertyExecutor.Introspector">
            <returns> The current introspector.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.BooleanPropertyExecutor.#ctor(NVelocity.Runtime.Log.Log,NVelocity.Util.Introspection.Introspector,System.Type,System.String)">
            <param name="Log">
            </param>
            <param name="introspector">
            </param>
            <param name="clazz">
            </param>
            <param name="property">
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.GetExecutor">
            <summary> Executor that simply tries to Execute a Get(key)
            operation. This will try to find a Get(key) method
            for any type of object, not just objects that
            implement the Map interface as was previously
            the case.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: GetExecutor.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.GetExecutor.#ctor(NVelocity.Runtime.Log.Log,NVelocity.Util.Introspection.Introspector,System.Type,System.String)">
            <param name="Log">
            </param>
            <param name="introspector">
            </param>
            <param name="clazz">
            </param>
            <param name="property">
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.GetExecutor.Discover(System.Type)">
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.GetExecutor.Execute(System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.AbstractExecutor.Execute(java.lang.Object)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.IParserVisitor">
            <summary> Interface used in implementation of visitor pattern.  Based on
            code autogenerated by JavaCC. Formerly found in package
            org.apache.velocity.runtime.parser.
            
            </summary>
            <version>  $Id: ParserVisitor.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.SimpleNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTprocess,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTEscapedDirective,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTEscape,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTComment,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIntegerLiteral,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTStringLiteral,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIdentifier,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTWord,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTDirective,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTBlock,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTMap,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTObjectArray,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIntegerRange,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTMethod,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTReference,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTTrue,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTFalse,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTText,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIfStatement,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTElseStatement,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTElseIfStatement,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTSetDirective,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTStop,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTExpression,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTAssignment,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTOrNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTAndNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTEQNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTNENode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTLTNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTGTNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTLENode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTGENode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTAddNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTSubtractNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTMulNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTDivNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTModNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.IParserVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTNotNode,System.Object)">
            <param name="node">
            </param>
            <param name="data">
            </param>
            <returns> The object rendered by this node.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.MapGetExecutor">
            <summary> GetExecutor that is smart about Maps. If it detects one, it does not
            use Reflection but a cast to access the getter. 
            
            </summary>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: MapGetExecutor.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.MapSetExecutor">
            <summary> SetExecutor that is smart about Maps. If it detects one, it does not
            use Reflection but a cast to access the setter. 
            
            </summary>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: MapSetExecutor.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.SetExecutor">
            <summary> Abstract class that is used to Execute an arbitrary
            method that is in introspected. This is the superclass
            for the PutExecutor and SetPropertyExecutor.
            
            There really should be a superclass for this and AbstractExecutor (which should
            be refactored to GetExecutor) because they differ only in the Execute() method.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: SetExecutor.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.SetExecutor.log">
            <summary>Class logger </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Node.SetExecutor.method">
            <summary> Method to be executed.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SetExecutor.Execute(System.Object,System.Object)">
            <summary> Execute method against context.</summary>
            <param name="instance">
            </param>
            <param name="value">
            </param>
            <returns> The result of the invocation.
            </returns>
            <throws>  IllegalAccessException </throws>
            <throws>  InvocationTargetException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SetExecutor.Alive">
            <summary> Tell whether the executor is alive by looking
            at the value of the method.
            </summary>
            <returns> True if the executor is alive.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SetExecutor.Method">
            <returns> The method to invoke.
            </returns>
             /// <param name="method">
            </param>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Parser.Node.MathUtils”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.MathUtils.Add(System.Type,System.Object,System.Object)">
            <summary> Add two numbers and return the correct value / type.
            Overflow detection is done for integer values (byte, short, int, long) only!
            </summary>
            <param name="op1">
            </param>
            <param name="op2">
            </param>
            <returns> Addition result.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.MathUtils.Subtract(System.Type,System.Object,System.Object)">
            <summary> Subtract two numbers and return the correct value / type.
            Overflow detection is done for integer values (byte, short, int, long) only!
            </summary>
            <param name="op1">
            </param>
            <param name="op2">
            </param>
            <returns> Subtraction result.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.MathUtils.Multiply(System.Type,System.Object,System.Object)">
            <summary> Multiply two numbers and return the correct value / type.
            Overflow detection is done for integer values (byte, short, int, long) only!
            </summary>
            <param name="op1">
            </param>
            <param name="op2">
            </param>
            <returns> Multiplication result.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.MathUtils.Divide(System.Type,System.Object,System.Object)">
            <summary> Divide two numbers. The result will be returned as Integer-type if and only if
            both sides of the division operator are Integer-types. Otherwise a Float, Double,
            or BigDecimal will be returned.
            </summary>
            <param name="op1">
            </param>
            <param name="op2">
            </param>
            <returns> Division result.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.MathUtils.Modulo(System.Type,System.Object,System.Object)">
            <summary> Modulo two numbers.</summary>
            <param name="op1">
            </param>
            <param name="op2">
            </param>
            <returns> Modulo result.
            
            </returns>
            <throws>  ArithmeticException If at least one parameter is a BigDecimal </throws>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.NodeUtils">
            <summary> Utilities for dealing with the AST node structure.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: NodeUtils.java 687386 2008-08-20 16:57:07Z nbubna $
            </version>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Parser.Node.NodeUtils.GetSpecialText(NVelocity.Runtime.Parser.Token)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Node.NodeUtils.TokenLiteral(NVelocity.Runtime.Parser.Token)">
            <summary>  complete node literal</summary>
            <param name="t">
            </param>
            <returns> A node literal.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.ObjectComparer">
            <summary>
            ObjectComparer allows you to compare primitive types and some others
            using IComparable interface whenever possible, and performing type
            conversions to get the best possible result.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.ObjectComparer.CompareObjects(System.Object,System.Object)">
            <summary>
            Tries to compare two random objects.  -1 is returned 
            if x is smaller than y, 1 the other way around, or 0 
            if they are equal.
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.PutExecutor">
            <summary> Executor that simply tries to Execute a Put(key, value)
            operation. This will try to find a Put(key) method
            for any type of object, not just objects that
            implement the Map interface as was previously
            the case.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: PutExecutor.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.PutExecutor.#ctor(NVelocity.Runtime.Log.Log,NVelocity.Util.Introspection.Introspector,System.Type,System.Object,System.String)">
            <param name="Log">
            </param>
            <param name="introspector">
            </param>
            <param name="clazz">
            </param>
            <param name="arg">
            </param>
            <param name="property">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.PutExecutor.Discover(System.Type,System.Object)">
            <param name="clazz">
            </param>
            <param name="arg">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.PutExecutor.Execute(System.Object,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.SetExecutor.Execute(java.lang.Object, java.lang.Object)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Node.SetPropertyExecutor">
            <summary> Executor for looking up property names in the passed in class
            This will try to find a set&lt;foo&gt;(key, value) method
            
            </summary>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: SetPropertyExecutor.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SetPropertyExecutor.#ctor(NVelocity.Runtime.Log.Log,NVelocity.Util.Introspection.Introspector,System.Type,System.String,System.Object)">
            <param name="Log">
            </param>
            <param name="introspector">
            </param>
            <param name="clazz">
            </param>
            <param name="property">
            </param>
            <param name="arg">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SetPropertyExecutor.Discover(System.Type,System.String,System.Object)">
            <param name="clazz">
            </param>
            <param name="property">
            </param>
            <param name="arg">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Node.SetPropertyExecutor.Execute(System.Object,System.Object)">
            <summary> Execute method against context.</summary>
            <param name="instance">
            </param>
            <param name="value">
            </param>
            <returns> The value of the invocation.
            </returns>
            <throws>  IllegalAccessException </throws>
            <throws>  InvocationTargetException </throws>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Node.SetPropertyExecutor.Introspector">
            <returns> The current introspector.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Parser">
            <summary> This class is responsible for parsing a Velocity
            template. This class was generated by JavaCC using
            the JJTree extension to produce an Abstract
            Syntax Tree (AST) of the template.
            
            Please look at the Parser.jjt file which is
            what controls the generation of this class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: Parser.java 736127 2009-01-20 21:59:00Z byron $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Parser.directives">
            <summary>  This Hashtable contains a list of all of the dynamic directives.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.Parser.currentTemplateName">
            <summary>  Name of current template we are parsing.  Passed to us in parse()</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.#ctor(NVelocity.Runtime.IRuntimeServices)">
            <summary> This constructor was added to allow the re-use of parsers.
            The normal constructor takes a single argument which
            an InputStream. This simply creates a re-usable parser
            object, we satisfy the requirement of an InputStream
            by using a newline character as an input stream.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Parse(System.IO.TextReader,System.String)">
            <summary> This was also added to allow parsers to be
            re-usable. Normal JavaCC use entails passing an
            input stream to the constructor and the parsing
            process is carried out once. We want to be able
            to re-use parsers: we do this by adding this
            method and re-initializing the lexer with
            the new stream that we want parsed.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.GetDirective(System.String)">
            <summary>  This method gets a Directive from the directives Hashtable</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.IsDirective(System.String)">
            <summary>  This method finds out of the directive exists in the directives
            Hashtable.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.escapedDirective(System.String)">
            <summary> Produces a processed output for an escaped control or
            pluggable directive
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Process">
            <summary> This method is what starts the whole parsing
            process. After the parsing is complete and
            the template has been turned into an AST,
            this method returns the root of AST which
            can subsequently be traversed by a visitor
            which implements the ParserVisitor interface
            which is generated automatically by JavaCC
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Statement">
            <summary> These are the types of statements that
            are acceptable in Velocity templates.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.EscapedDirective">
            <summary>  used to separate the notion of a valid directive that has been
            escaped, versus something that looks like a directive and
            is just schmoo.  This is important to do as a separate production
            that creates a node, because we want this, in either case, to stop
            the further parsing of the Directive() tree.
            </summary>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Parser.Parser.Escape”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.Parser.Identifier">
            <summary> This method corresponds to variable
            references in Velocity templates.
            The following are examples of variable
            references that may be found in a
            template:
            
            $foo
            $bar
            
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.DirectiveArg">
            <summary>   Supports the arguments for the Pluggable Directives</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Directive">
            <summary>   Supports the Pluggable Directives
            #foo( arg+ )
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Map">
            <summary> for creating a map in a #set
            
            #set($foo = {$foo : $bar, $blargh : $thingy})
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.IntegerRange">
            <summary>  supports the [n..m] vector generator for use in
            the #foreach() to generate measured ranges w/o
            needing explicit support from the app/servlet
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Parameter">
            <summary> This method has yet to be fully implemented
            but will allow arbitrarily nested method
            calls
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Method">
            <summary> This method has yet to be fully implemented
            but will allow arbitrarily nested method
            calls
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.Text">
            <summary> This method is responsible for allowing
            all non-grammar text to pass through
            unscathed.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.SetDirective">
            <summary>  Currently support both types of set :
            #set( expr )
            #set expr
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Parser.StopStatement">
            <summary> This method corresponds to the #stop
            directive which just simulates and EOF
            so that parsing stops. The #stop directive
            is useful for end-user debugging
            purposes.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Parser.Directives">
            <summary>  This method sets the directives Hashtable</summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Parser.LeftParenthesis">
            <summary> Check whether there is a left parenthesis with leading optional
            whitespaces. This method is used in the semantic look ahead of
            Directive method. This is done in code instead of as a production
            for simplicity and efficiency.
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.ParserConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.EOF">
            <summary>End of File. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LBRACKET">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.RBRACKET">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.COMMA">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DOUBLEDOT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.COLON">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LEFT_CURLEY">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.RIGHT_CURLEY">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LPAREN">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.RPAREN">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.REFMOD2_RPAREN">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.ESCAPE_DIRECTIVE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.SET_DIRECTIVE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DOLLAR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DOLLARBANG">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.HASH">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.SINGLE_LINE_COMMENT_START">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DOUBLE_ESCAPE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.ESCAPE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.TEXT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.SINGLE_LINE_COMMENT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.FORMAL_COMMENT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.MULTI_LINE_COMMENT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.WHITESPACE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.STRING_LITERAL">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.TRUE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.FALSE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.NEWLINE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.MINUS">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.PLUS">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.MULTIPLY">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DIVIDE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.MODULUS">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_AND">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_OR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_LT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_LE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_GT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_GE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_EQUALS">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_NOT_EQUALS">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LOGICAL_NOT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.EQUALS">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.END">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.IF_DIRECTIVE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.ELSEIF_DIRECTIVE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.ELSE_DIRECTIVE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.STOP_DIRECTIVE">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DIGIT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.INTEGER_LITERAL">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.FLOATING_POINT_LITERAL">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.EXPONENT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LETTER">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DIRECTIVE_CHAR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.WORD">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.BRACKETED_WORD">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.ALPHA_CHAR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.ALPHANUM_CHAR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.IDENTIFIER_CHAR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.IDENTIFIER">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DOT">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.LCURLY">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.RCURLY">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.REFERENCE_TERMINATOR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DIRECTIVE_TERMINATOR">
            <summary>RegularExpression Id. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DIRECTIVE">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.REFMOD2">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.REFMODIFIER">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.DEFAULT">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.REFERENCE">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.PRE_DIRECTIVE">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.IN_MULTI_LINE_COMMENT">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.IN_FORMAL_COMMENT">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.IN_SINGLE_LINE_COMMENT">
            <summary>Lexical state. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.ParserConstants.TokenImage">
            <summary>Literal token values. </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.ParserState">
            <summary>
            
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.ParserTokenManager">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Parser.ParserTokenManager.stateStackPop”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.ParserTokenManager.stateStackPush">
            <summary>  pops a state off the stack, and restores paren counts
            
            </summary>
            <returns> boolean : success of operation
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ParserTokenManager.clearStateVars">
            <summary>  Clears all state variables, resets to
            start values, clears stateStack.  Call
            before parsing.
            </summary>
            <returns> void
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Parser.ParserTokenManager.RPARENHandler">
            <summary>  handles the dropdown logic when encountering a RPAREN</summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.TemplateParseException">
            <summary> This is an extension of the ParseException, which also takes a
            template name.
            
            </summary>
            <seealso cref="!:org.apache.velocity.runtime.parser.ParseException">
            
            </seealso>
            <author>  <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: TemplateParseException.java 703544 2008-10-10 18:15:53Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Parser.TemplateParseException.templateName">
            <summary> This is the name of the template which contains the parsing Error, or
            null if not defined.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.TemplateParseException.#ctor(NVelocity.Runtime.Parser.Token,System.Int32[][],System.String[],System.String)">
            <summary> This constructor is used to Add a template name
            to Info cribbed from a ParseException generated in the parser.
            </summary>
            <param name="currentTokenVal">
            </param>
            <param name="expectedTokenSequencesVal">
            </param>
            <param name="tokenImageVal">
            </param>
            <param name="templateNameVal">
            </param>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Parser.TemplateParseException.#ctor(NVelocity.Runtime.Parser.Token,System.Int32[][],System.String[])”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.Parser.TemplateParseException.#ctor">
            <summary> The following constructors are for use by you for whatever
            purpose you can think of.  Constructing the exception in this
            manner makes the exception behave in the normal way - i.e., as
            documented in the class "Throwable".  The fields "errorToken",
            "expectedTokenSequences", and "tokenImage" do not contain
            relevant information.  The JavaCC generated code does not use
            these constructors.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.TemplateParseException.#ctor(System.String)">
            <summary> Creates a new TemplateParseException object.
            
            </summary>
            <param name="message">TODO: DOCUMENT ME!
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.TemplateParseException.AppendTemplateInfo(System.Text.StringBuilder)">
            <param name="sb">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Parser.TemplateParseException.TemplateName">
            <summary> returns the Template name where this exception occured.</summary>
            <returns> The Template name where this exception occured.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.TemplateParseException.LineNumber">
            <summary> returns the line number where this exception occured.</summary>
            <returns> The line number where this exception occured.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.TemplateParseException.ColumnNumber">
            <summary> returns the column number where this exception occured.</summary>
            <returns> The column number where this exception occured.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Parser.TemplateParseException.Message">
            <summary> This method has the standard behavior when this object has been
            created using the standard constructors.  Otherwise, it uses
            "currentToken" and "expectedTokenSequences" to generate a parse
            Error message and returns it.  If this object has been created
            due to a parse Error, and you do not catch it (it gets thrown
            from the parser), then this method is called during the printing
            of the final stack Trace, and hence the correct Error message
            gets displayed.
            </summary>
            <returns> The Error message.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Parser.Token">
            <summary> Describes the input token stream.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Token.ToString">
            <summary> Returns the image.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.Token.NewToken(System.Int32)">
            <summary> Returns a new Token object, by default. However, if you want, you
            can create and return subclass objects based on the value of ofKind.
            Simply Add the cases to the switch for all those special cases.
            For example, if you have a subclass of Token called IDToken that
            you want to create if ofKind is ID, simlpy Add something like :
            
            case MyParserConstants.ID : return new IDToken();
            
            to the following switch statement. Then you can cast matchedToken
            variable to the appropriate type and use it in your lexical actions.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Token.Kind">
            <summary> An integer that describes the kind of this token.  This numbering
            system is determined by JavaCCParser, and a table of these numbers is
            stored in the file ...Constants.java.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Token.BeginLine">
            <summary> beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Token.Image">
            <summary> The string image of the token.</summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Token.Next">
            <summary> A reference to the next regular (non-special) token from the input
            stream.  If this is the last token from the input stream, or if the
            token manager has not read tokens beyond this one, this field is
            set to null.  This is true only if this token is also a regular
            token.  Otherwise, see below for a description of the contents of
            this field.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.Token.SpecialToken">
            <summary> This field is used to access special tokens that occur prior to this
            token, but after the immediately preceding regular (non-special) token.
            If there are no such special tokens, this field is set to null.
            When there are more than one such special token, this field refers
            to the last of these special tokens, which in turn refers to the next
            previous special token through its specialToken field, and so on
            until the first special token (whose specialToken field is null).
            The next fields of special tokens refer to other special tokens that
            immediately follow it (without an intervening regular token).  If there
            is no such token, this field is null.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.TokenMgrError.LEXICAL_ERROR">
            <summary> Lexical error occured.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.TokenMgrError.STATIC_LEXER_ERROR">
            <summary> An attempt wass made to create a second instance of a static token manager.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.TokenMgrError.INVALID_LEXICAL_STATE">
            <summary> Tried to change to an invalid lexical state.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.TokenMgrError.LOOP_DETECTED">
            <summary> Detected (and bailed out of) an infinite loop in the token manager.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Parser.TokenMgrError.errorCode">
            <summary> Indicates the reason why the exception is thrown. It will have
            one of the above 4 values.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.TokenMgrError.AddEscapes(System.String)">
            <summary> Replaces unprintable characters by their espaced (or unicode escaped)
            equivalents in the given string
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.TokenMgrError.LexicalError(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Char)">
            <summary> Returns a detailed message for the Error when it is thrown by the
            token manager to indicate a lexical error.
            Parameters :
            EOFSeen     : indicates if EOF caused the lexicl error
            curLexState : lexical state in which this error occured
            errorLine   : line number when the error occured
            errorColumn : column number when the error occured
            errorAfter  : prefix that was seen before this error occured
            curchar     : the offending character
            Note: You can customize the lexical error message by modifying this method.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Parser.TokenMgrError.Message">
            <summary> You can also modify the body of this method to customize your error messages.
            For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
            of end-users concern, so you can return something like :
            
            "Internal Error : Please file a bug report .... "
            
            from this method for such cases in the release version of your parser.
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.Parser.VelocityCharStream">
            <summary> An implementation of interface CharStream, where the stream is assumed to
            contain only ASCII characters (without unicode processing).
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.BeginToken">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.BeginToken()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.ReadChar">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.readChar()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.Backup(System.Int32)">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.backup(int)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.#ctor(System.IO.TextReader,System.Int32,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
            <param name="buffersize">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.#ctor(System.IO.TextReader,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.ReInit(System.IO.TextReader,System.Int32,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
            <param name="buffersize">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.ReInit(System.IO.TextReader,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
            <param name="buffersize">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.ReInit(System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
            <param name="buffersize">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.ReInit(System.IO.Stream,System.Int32,System.Int32)">
            <param name="dstream">
            </param>
            <param name="startline">
            </param>
            <param name="startcolumn">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.GetImage">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.GetImage()">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.GetSuffix(System.Int32)">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.GetSuffix(int)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Parser.VelocityCharStream.Done">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.Done()">
            </seealso>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Parser.VelocityCharStream.AdjustBeginLineColumn(System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.Runtime.Parser.VelocityCharStream.EndColumn">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.getEndColumn()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.VelocityCharStream.EndLine">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.getEndLine()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.VelocityCharStream.BeginColumn">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.getBeginColumn()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Parser.VelocityCharStream.BeginLine">
            <seealso cref="!:org.apache.velocity.runtime.parser.CharStream.getBeginLine()">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Resource.ContentResource">
            <summary> This class represent a general text resource that may have been
            retrieved from any number of possible sources.
            
            Also of interest is Velocity's {@link org.apache.velocity.Template}
            <code>Resource</code>.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ContentResource.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Resource">
            <summary> This class represent a general text resource that
            may have been retrieved from any number of possible
            sources.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: Resource.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.MILLIS_PER_SECOND">
            <summary> The number of milliseconds in a minute, used to calculate the
            check interval.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.resourceLoader">
            <summary> The template loader that initially loaded the input
            stream for this template, and knows how to check the
            source of the input stream for modification.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.modificationCheckInterval">
            <summary> How often the file modification time is checked (in seconds).</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.lastModified">
            <summary> The file modification time (in milliseconds) for the cached template.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.nextCheck">
            <summary> The next time the file modification time will be checked (in
            milliseconds).
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.name">
            <summary>  Name of the resource</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.encoding">
            <summary>  Character encoding of this resource</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.data">
            <summary>  Resource might require ancillary storage of some kind</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Resource.type">
            <summary>  Resource type (RESOURCE_TEMPLATE or RESOURCE_CONTENT)</summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Resource.#ctor">
            <summary>  Default constructor</summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Resource.Process">
            <summary> Perform any subsequent processing that might need
            to be done by a resource. In the case of a template
            the parameters parsing of the input stream needs to be
            performed.
            
            </summary>
            <returns> Whether the resource could be processed successfully.
            For a {@link org.apache.velocity.Template} or {@link
            org.apache.velocity.runtime.resource.ContentResource}, this
            indicates whether the resource could be read.
            </returns>
            <exception cref="!:ResourceNotFoundException">Similar in semantics as
            returning <code>false</code>.
            </exception>
            <throws>  ParseErrorException </throws>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Resource.RequiresChecking">
            <summary> Is it time to check to see if the resource
            source has been updated?
            </summary>
            <returns> True if resource must be checked.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Resource.Touch">
            <summary> 'Touch' this template and thereby resetting
            the nextCheck field.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.RuntimeServices">
            <param name="rs">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.IsSourceModified">
            <returns> True if source has been modified.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.ModificationCheckInterval">
            <summary> Set the modification check interval.</summary>
            <param name="ModificationCheckInterval">The interval (in seconds).
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.Name">
            <summary> Get the name of this template.</summary>
            <returns> The name of this template.
            </returns>
            <summary> Set the name of this resource, for example
            test.vm.
            </summary>
            <param name="Name">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.Encoding">
            <summary>  Get the encoding of this resource
            for example, "ISO-8859-1"
            </summary>
            <returns> The encoding of this resource.
            </returns>
            <summary>  set the encoding of this resource
            for example, "ISO-8859-1"
            </summary>
            <param name="Encoding">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.LastModified">
            <summary> Return the lastModifed time of this
            resource.
            </summary>
            <returns> The lastModifed time of this resource.
            </returns>
            <summary> Set the last modified time for this
            resource.
            </summary>
            <param name="LastModified">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.ResourceLoader">
            <summary> Return the template loader that pulled
            in the template stream
            </summary>
            <returns> The resource loader for this resource.
            </returns>
            <summary> Set the template loader for this template. Set
            when the Runtime determines where this template
            came from the list of possible sources.
            </summary>
            <param name="ResourceLoader">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.Data">
            <summary> Get arbitrary data object that might be used
            by the resource.
            </summary>
            <returns> The data object for this resource.
            </returns>
            <summary> Set arbitrary data object that might be used
            by the resource.
            </summary>
            <param name="Data">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Resource.Type">
            <returns> type code of the Resource
            </returns>
            <since> 1.6
            </since>
            <summary> Sets the type of this Resource (RESOURCE_TEMPLATE or RESOURCE_CONTENT)</summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ContentResource.#ctor">
            <summary>Default empty constructor </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ContentResource.Process">
            <summary> Pull in static content and store it.</summary>
            <returns> True if everything went ok.
            
            </returns>
            <exception cref="T:NVelocity.Exception.ResourceNotFoundException">Resource could not be
            found.
            </exception>
        </member>
        <member name="T:NVelocity.Runtime.Resource.IResourceCache">
            <summary> Interface that defines the shape of a pluggable resource cache
            for the included ResourceManager
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ResourceCache.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceCache.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <summary>  initializes the ResourceCache.  Will be
            called before any utilization
            
            </summary>
            <param name="rs">RuntimeServices to use for logging, etc
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceCache.Get(System.Object)">
            <summary>  retrieves a Resource from the
            cache
            
            </summary>
            <param name="resourceKey">key for Resource to be retrieved
            </param>
            <returns> Resource specified or null if not found
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceCache.Put(System.Object,NVelocity.Runtime.Resource.Resource)">
            <summary>  stores a Resource in the cache
            
            </summary>
            <param name="resourceKey">key to associate with the Resource
            </param>
            <param name="resource">Resource to be stored
            </param>
            <returns> existing Resource stored under this key, or null if none
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceCache.Remove(System.Object)">
            <summary>  removes a Resource from the cache
            
            </summary>
            <param name="resourceKey">resource to be removed
            </param>
            <returns> stored under key
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceCache.EnumerateKeys">
            <summary>  returns an Iterator of Keys in the cache.</summary>
            <returns> An Iterator of Keys in the cache.
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader”忽略有格式错误的 XML 注释 -->
        <member name="T:NVelocity.Runtime.Resource.Loader.ResourceLoader">
            <summary> This is abstract class the all text resource loaders should
            extend.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ResourceLoader.java 687518 2008-08-21 00:18:03Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.ResourceLoader.isCachingOn">
            <summary> Does this loader want templates produced with it
            cached in the Runtime.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.ResourceLoader.modificationCheckInterval">
            <summary> This property will be passed on to the templates
            that are created with this loader.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.ResourceLoader.className">
            <summary> Class name for this loader, for logging/debuggin
            purposes.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoader.CommonInit(NVelocity.Runtime.IRuntimeServices,Commons.Collections.ExtendedProperties)">
            <summary> This initialization is used by all resource
            loaders and must be called to set up common
            properties shared by all resource loaders
            </summary>
            <param name="rs">
            </param>
            <param name="configuration">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoader.Init(Commons.Collections.ExtendedProperties)">
            <summary> Initialize the template loader with a
            a resources class.
            </summary>
            <param name="configuration">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoader.GetResourceStream(System.String)">
            <summary> Get the InputStream that the Runtime will parse
            to create a template.
            </summary>
            <param name="source">
            </param>
            <returns> The input stream for the requested resource.
            </returns>
            <throws>  ResourceNotFoundException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoader.IsSourceModified(NVelocity.Runtime.Resource.Resource)">
            <summary> Given a template, check to see if the source of InputStream
            has been modified.
            </summary>
            <param name="resource">
            </param>
            <returns> True if the resource has been modified.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoader.GetLastModified(NVelocity.Runtime.Resource.Resource)">
            <summary> Get the last modified time of the InputStream source
            that was used to create the template. We need the template
            here because we have to extract the name of the template
            in order to locate the InputStream source.
            </summary>
            <param name="resource">
            </param>
            <returns> Time in millis when the resource has been modified.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoader.ResourceExists(System.String)">
            <summary> Check whether any given resource exists. This is not really
            a very efficient test and it can and should be overridden in the
            subclasses extending ResourceLoader. 
            
            </summary>
            <param name="resourceName">The name of a resource.
            </param>
            <returns> true if a resource exists and can be accessed.
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Loader.ResourceLoader.ClassName">
            <summary> Return the class name of this resource Loader</summary>
            <returns> Class name of the resource loader.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Loader.ResourceLoader.CachingOn">
            <summary> The Runtime uses this to find out whether this
            template loader wants the Runtime to cache
            templates created with InputStreams provided
            by this loader.
            </summary>
            <returns> True if this resource loader caches.
            </returns>
            <summary> Set the caching state. If true, then this loader
            would like the Runtime to cache templates that
            have been created with InputStreams provided
            by this loader.
            </summary>
            <param name="value">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Loader.ResourceLoader.ModificationCheckInterval">
            <summary> Get the interval at which the InputStream source
            should be checked for modifications.
            </summary>
            <returns> The modification check interval.
            </returns>
            <summary> Set the interval at which the InputStream source
            should be checked for modifications.
            </summary>
            <param name="modificationCheckInterval">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.Init(Commons.Collections.ExtendedProperties)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.init(org.apache.commons.collections.ExtendedProperties)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.IsSourceModified(NVelocity.Runtime.Resource.Resource)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.isSourceModified(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.GetLastModified(NVelocity.Runtime.Resource.Resource)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.getLastModified(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.GetResourceStream(System.String)">
            <summary> Get an InputStream so that the Runtime can build a
            template with it.
            
            </summary>
            <param name="name">name of template
            </param>
            <returns> InputStream containing template
            </returns>
            <throws>  ResourceNotFoundException </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.ReadLastModified(NVelocity.Runtime.Resource.Resource,System.String)">
            <summary> Fetches the last modification time of the resource
            
            </summary>
            <param name="resource">Resource object we are finding timestamp of
            </param>
            <param name="operation">string for logging, indicating caller's intention
            
            </param>
            <returns> timestamp as long
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.OpenDbConnection">
            <summary> Gets connection to the datasource specified through the configuration
            parameters.
            
            </summary>
            <returns> connection
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.CloseDbConnection(System.Data.IDbConnection)">
            <summary> Closes connection to the datasource</summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.CloseResultSet(System.Data.IDataReader)">
            <summary> Closes the result set.</summary>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.ReadData(System.Data.IDbConnection,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.Runtime.Resource.Loader.DataSourceResourceLoader.DataSource">
            <summary> Set the DataSource used by this resource loader.  Call this as an alternative to
            specifying the data source name via properties.
            </summary>
            <param name="dataSource">The data source for this ResourceLoader.
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Loader.FileResourceLoader">
            <summary> A loader for templates stored on the file system.  Treats the template
            as relative to the configured root path.  If the root path is empty
            treats the template name as an absolute path.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>  <a href="mailto:mailmur@yahoo.com">Aki Nieminen</a>
            </author>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: FileResourceLoader.java 687518 2008-08-21 00:18:03Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.FileResourceLoader.paths">
            <summary> The paths to search for templates.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.FileResourceLoader.templatePaths">
            <summary> Used to map the path that a template was found on
            so that we can properly check the modification
            times of the files. This is synchronizedMap
            instance.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.FileResourceLoader.unicode">
            <summary>Shall we Inspect unicode files to see what encoding they contain?. </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.Init(Commons.Collections.ExtendedProperties)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.Init(org.apache.commons.collections.ExtendedProperties)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.GetResourceStream(System.String)">
            <summary> Get an InputStream so that the Runtime can build a
            template with it.
            
            </summary>
            <param name="templateName">name of template to Get
            </param>
            <returns> InputStream containing the template
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>         in the file template path.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.ResourceExists(System.String)">
            <summary> Overrides superclass for better performance.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.FindTemplate(System.String,System.String)">
            <summary> Try to find a template given a normalized path.
            
            </summary>
            <param name="path">a normalized path
            </param>
            <param name="template">name of template to find
            </param>
            <returns> InputStream input stream that will be parsed
            
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.IsSourceModified(NVelocity.Runtime.Resource.Resource)">
            <summary> How to keep track of all the modified times
            across the paths.  Note that a file might have
            appeared in a directory which is earlier in the
            path; so we should search the path and see if
            the file we find that way is the same as the one
            that we have cached.
            </summary>
            <param name="resource">
            </param>
            <returns> True if the source has been modified.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.GetLastModified(NVelocity.Runtime.Resource.Resource)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.getLastModified(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.FileResourceLoader.GetFile(System.String,System.String)">
            <summary> Create a File based on either a relative path if given, or absolute path otherwise</summary>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Loader.ResourceLoaderFactory">
            <summary> Factory to grab a template loader.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: ResourceLoaderFactory.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.ResourceLoaderFactory.GetLoader(NVelocity.Runtime.IRuntimeServices,System.String)">
            <summary> Gets the loader specified in the configuration file.</summary>
            <param name="rs">
            </param>
            <param name="loaderClassName">
            </param>
            <returns> TemplateLoader
            </returns>
            <throws>  Exception </throws>
        </member>
        <!-- 对于成员“T:NVelocity.Runtime.Resource.Loader.StringResourceLoader”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_STATIC">
            <summary> Key to determine whether the repository should be set as the static one or not.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_STATIC_DEFAULT">
            <summary> By default, repositories are stored statically (shared across the VM).</summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_CLASS">
            <summary>Key to look up the repository implementation class. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_NAME">
            <summary> Key to look up the name for the repository to be used.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_ENCODING">
            <summary>Key to look up the repository char encoding. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_ENCODING_DEFAULT">
            <summary>The default repository encoding. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_CLASS_DEFAULT">
            <summary>The default implementation class. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Loader.StringResourceLoader.REPOSITORY_NAME_DEFAULT">
            <summary>The default name for string resource repositories
            ('org.apache.velocity.runtime.resource.util.StringResourceRepository').
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.GetRepository">
            <summary> Returns a reference to the default static repository.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.GetRepository(System.String)">
            <summary> Returns a reference to the repository stored statically under the
            specified name.
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.SetRepository(System.String,NVelocity.Runtime.Resource.Util.IStringResourceRepository)">
            <summary> Sets the specified {@link StringResourceRepository} in static storage
            under the specified name.
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.RemoveRepository(System.String)">
            <summary> Removes the {@link StringResourceRepository} stored under the specified
            name.
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.ClearRepositories">
            <summary> Removes all statically stored {@link StringResourceRepository}s.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.Init(Commons.Collections.ExtendedProperties)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.Init(org.apache.commons.collections.ExtendedProperties)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.CceateRepository(System.String,System.String)">
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.ResourceExists(System.String)">
            <summary> Overrides superclass for better performance.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.GetResourceStream(System.String)">
            <summary> Get an InputStream so that the Runtime can build a
            template with it.
            
            </summary>
            <param name="name">name of template to Get.
            </param>
            <returns> InputStream containing the template.
            </returns>
            <throws>  ResourceNotFoundException Ff template not found </throws>
            <summary>         in the RepositoryFactory.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.IsSourceModified(NVelocity.Runtime.Resource.Resource)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.isSourceModified(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.StringResourceLoader.GetLastModified(NVelocity.Runtime.Resource.Resource)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.getLastModified(org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Loader.URLResourceLoader">
            <summary> This is a simple URL-based loader.
            
            </summary>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:nbubna@apache.org">Nathan Bubna</a>
            </author>
            <version>  $Id: URLResourceLoader.java 191743 2005-06-21 23:22:20Z dlr $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.URLResourceLoader.Init(Commons.Collections.ExtendedProperties)">
            <seealso cref="!:org.apache.velocity.runtime.resource.loader.ResourceLoader.Init(org.apache.commons.collections.ExtendedProperties)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.URLResourceLoader.GetResourceStream(System.String)">
            <summary> Get an InputStream so that the Runtime can build a
            template with it.
            
            </summary>
            <param name="name">name of template to fetch bytestream of
            </param>
            <returns> InputStream containing the template
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>         in the file template path.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.URLResourceLoader.IsSourceModified(NVelocity.Runtime.Resource.Resource)">
            <summary> Checks to see if a resource has been deleted, moved or modified.
            
            </summary>
            <param name="resource">Resource  The resource to check for modification
            </param>
            <returns> boolean  True if the resource has been modified, moved, or unreachable
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Loader.URLResourceLoader.GetLastModified(NVelocity.Runtime.Resource.Resource)">
            <summary> Checks to see when a resource was last modified
            
            </summary>
            <param name="resource">Resource the resource to check
            </param>
            <returns> long The time when the resource was last modified or 0 if the file can't be reached
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Loader.URLResourceLoader.Timeout">
            <summary> Returns the current, custom timeout setting. If negative, there is no custom timeout.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="T:NVelocity.Runtime.Resource.ResourceCacheImpl">
            <summary> Default implementation of the resource cache for the default
            ResourceManager.  The cache uses a <i>least recently used</i> (LRU)
            algorithm, with a maximum size specified via the
            <code>resource.manager.cache.size</code> property (idenfied by the
            {@link
            org.apache.velocity.runtime.RuntimeConstants#RESOURCE_MANAGER_DEFAULTCACHE_SIZE}
            constant).  This property Get be set to <code>0</code> or less for
            a greedy, unbounded cache (the behavior from pre-v1.5).
            
            </summary>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>
            </author>
            <version>  $Id: ResourceCacheImpl.java 685385 2008-08-12 23:59:06Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceCacheImpl.cache">
            <summary> Cache storage, assumed to be thread-safe.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceCacheImpl.rsvc">
            <summary> Runtime services, generally initialized by the
            <code>Initialize()</code> method.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceCacheImpl.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <seealso cref="!:org.apache.velocity.runtime.resource.ResourceCache.Initialize(org.apache.velocity.runtime.RuntimeServices)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceCacheImpl.Get(System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.resource.ResourceCache.Get(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceCacheImpl.Put(System.Object,NVelocity.Runtime.Resource.Resource)">
            <seealso cref="!:org.apache.velocity.runtime.resource.ResourceCache.Put(java.lang.Object, org.apache.velocity.runtime.resource.Resource)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceCacheImpl.Remove(System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.resource.ResourceCache.remove(java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceCacheImpl.EnumerateKeys">
            <seealso cref="!:org.apache.velocity.runtime.resource.ResourceCache.enumerateKeys()">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.Resource.ResourceFactory">
            <summary> Class responsible for instantiating <code>Resource</code> objects,
            given name and type.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ResourceFactory.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceFactory.getResource(System.String,System.Int32)">
            <param name="resourceName">
            </param>
            <param name="resourceType">
            </param>
            <returns> The resource described by name and type.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Resource.ResourceManagerConstants">
            <summary> Class to manage the text resource for the Velocity
            Runtime.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:paulo.gaspar@krankikom.de">Paulo Gaspar</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: ResourceManager.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerConstants.RESOURCE_TEMPLATE">
            <summary> A template resources.</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerConstants.RESOURCE_CONTENT">
            <summary> A static content resource.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceManager.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <summary> Initialize the ResourceManager.</summary>
            <param name="rs">
            </param>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceManager.GetResource(System.String,System.Int32,System.String)">
            <summary> Gets the named resource.  Returned class type corresponds to specified type
            (i.e. <code>Template</code> to <code>RESOURCE_TEMPLATE</code>).
            
            </summary>
            <param name="resourceName">The name of the resource to retrieve.
            </param>
            <param name="resourceType">The type of resource (<code>RESOURCE_TEMPLATE</code>,
            <code>RESOURCE_CONTENT</code>, etc.).
            </param>
            <param name="encoding"> The character encoding to use.
            </param>
            <returns> Resource with the template parsed and ready.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if a problem in parse </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.IResourceManager.GetLoaderNameForResource(System.String)">
            <summary>  Determines is a template exists, and returns name of the loader that
            provides it.  This is a slightly less hokey way to support
            the Velocity.TemplateExists() utility method, which was broken
            when per-template encoding was introduced.  We can revisit this.
            
            </summary>
            <param name="resourceName">Name of template or content resource
            </param>
            <returns> class name of loader than can provide it
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Resource.ResourceManagerImpl">
            <summary> Class to manage the text resource for the Velocity Runtime.
            
            </summary>
            <author>   <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <author>   <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>   <a href="mailto:paulo.gaspar@krankikom.de">Paulo Gaspar</a>
            </author>
            <author>   <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>   <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>   $Id: ResourceManagerImpl.java 692505 2008-09-05 18:21:51Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.RESOURCE_TEMPLATE">
            <summary>A template resources. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.RESOURCE_CONTENT">
            <summary>A static content resource. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.RESOURCE_LOADER_IDENTIFIER">
            <summary>token used to identify the loader internally. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.globalCache">
            <summary>Object implementing ResourceCache to be our resource manager's Resource cache. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.resourceLoaders">
            <summary>The List of templateLoaders that the Runtime will use to locate the InputStream source of a template. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.sourceInitializerList">
            <summary> This is a list of the template input stream source initializers, basically properties for a particular template stream
            source. The order in this list reflects numbering of the properties i.e.
            
            <p>&lt;loader-id&gt;.resource.loader.&lt;property&gt; = &lt;value&gt;</p>
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.isInit">
            <summary> Has this Manager been initialized?</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.logWhenFound">
            <summary>switch to turn off Log notice when a resource is found for the first time. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.rsvc">
            <summary>The internal RuntimeServices object. </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.ResourceManagerImpl.log">
            <summary>Logging. </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.Initialize(NVelocity.Runtime.IRuntimeServices)">
            <summary> Initialize the ResourceManager.
            
            </summary>
            <param name="rsvc"> The Runtime Services object which is associated with this Resource Manager.
            
            </param>
            <throws>   Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.AssembleResourceLoaderInitializers">
            <summary> This will produce a List of Hashtables, each hashtable contains the intialization Info for a particular resource loader. This
            Hashtable will be passed in when initializing the the template loader.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.GetResource(System.String,System.Int32,System.String)">
            <summary> Gets the named resource. Returned class type corresponds to specified type (i.e. <code>Template</code> to <code>
            RESOURCE_TEMPLATE</code>).
            
            This method is now unsynchronized which requires that ResourceCache
            implementations be thread safe (as the default is).
            
            </summary>
            <param name="resourceName"> The name of the resource to retrieve.
            </param>
            <param name="resourceType"> The type of resource (<code>RESOURCE_TEMPLATE</code>, <code>RESOURCE_CONTENT</code>, etc.).
            </param>
            <param name="encoding"> The character encoding to use.
            
            </param>
            <returns>  Resource with the template parsed and ready.
            
            </returns>
            <throws>   ResourceNotFoundException  if template not found from any available source. </throws>
            <throws>   ParseErrorException  if template cannot be parsed due to syntax (or other) Error. </throws>
            <throws>   Exception  if a problem in parse </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.CreateResource(System.String,System.Int32)">
            <summary> Create a new Resource of the specified type.
            
            </summary>
            <param name="resourceName"> The name of the resource to retrieve.
            </param>
            <param name="resourceType"> The type of resource (<code>RESOURCE_TEMPLATE</code>, <code>RESOURCE_CONTENT</code>, etc.).
            </param>
            <returns>  new instance of appropriate resource type
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.LoadResource(System.String,System.Int32,System.String)">
            <summary> Loads a resource from the current set of resource loaders.
            
            </summary>
            <param name="resourceName"> The name of the resource to retrieve.
            </param>
            <param name="resourceType"> The type of resource (<code>RESOURCE_TEMPLATE</code>, <code>RESOURCE_CONTENT</code>, etc.).
            </param>
            <param name="encoding"> The character encoding to use.
            
            </param>
            <returns>  Resource with the template parsed and ready.
            
            </returns>
            <throws>   ResourceNotFoundException  if template not found from any available source. </throws>
            <throws>   ParseErrorException  if template cannot be parsed due to syntax (or other) Error. </throws>
            <throws>   Exception  if a problem in parse </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.RefreshResource(NVelocity.Runtime.Resource.Resource,System.String)">
            <summary> Takes an existing resource, and 'refreshes' it. This generally means that the source of the resource is checked for changes
            according to some cache/check algorithm and if the resource changed, then the resource data is reloaded and re-parsed.
            
            </summary>
            <param name="resource"> resource to refresh
            </param>
            <param name="encoding"> character encoding of the resource to refresh.
            
            </param>
            <throws>   ResourceNotFoundException  if template not found from current source for this Resource </throws>
            <throws>   ParseErrorException  if template cannot be parsed due to syntax (or other) Error. </throws>
            <throws>   Exception  if a problem in parse </throws>
        </member>
        <member name="M:NVelocity.Runtime.Resource.ResourceManagerImpl.GetLoaderNameForResource(System.String)">
            <summary> Determines if a template exists, and returns name of the loader that provides it. This is a slightly less hokey way to
            support the Velocity.TemplateExists() utility method, which was broken when per-template encoding was introduced. We can
            revisit this.
            
            </summary>
            <param name="resourceName"> Name of template or content resource
            
            </param>
            <returns>  class name of loader than can provide it
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Util.StringResource">
            <summary> Wrapper for Strings containing templates, allowing to Add additional meta
            data like timestamps.
            
            </summary>
            <author>  <a href="mailto:eelco.hillenius@openedge.nl">Eelco Hillenius</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: StringResource.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Util.StringResource.body">
            <summary>template body </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Util.StringResource.encoding">
            <summary>encoding </summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Util.StringResource.lastModified">
            <summary>last modified ts </summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.StringResource.#ctor(System.String,System.String)">
            <summary> convenience constructor; sets body to 'body' and sets lastModified to now</summary>
            <param name="body">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Util.StringResource.Body">
            <summary> Sets the template body.</summary>
            <returns> String containing the template body.
            </returns>
            <summary> Sets a new  value for the template body.</summary>
            <param name="body">New body value
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Util.StringResource.LastModified">
            <summary> Returns the modification date of the template.</summary>
            <returns> Modification date in milliseconds.
            </returns>
            <summary> Changes the last modified parameter.</summary>
            <param name="lastModified">The modification time in millis.
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Util.StringResource.Encoding">
            <summary> Returns the encoding of this String resource.
            
            </summary>
            <returns> The encoding of this String resource.
            </returns>
            <summary> Sets the encoding of this string resource.
            
            </summary>
            <param name="encoding">The new encoding of this resource.
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Util.IStringResourceRepository">
            <summary> A StringResourceRepository functions as a central repository for Velocity templates
            stored in Strings.
            
            </summary>
            <author>  <a href="mailto:eelco.hillenius@openedge.nl">Eelco Hillenius</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: StringResourceRepository.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.IStringResourceRepository.GetStringResource(System.String)">
            <summary> Get the string resource that is stored with given key</summary>
            <param name="name">String name to retrieve from the repository.
            </param>
            <returns> A StringResource containing the template.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.IStringResourceRepository.PutStringResource(System.String,System.String)">
            <summary> Add a string resource with given key.</summary>
            <param name="name">The String name to store the template under.
            </param>
            <param name="body">A String containing a template.
            </param>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.IStringResourceRepository.PutStringResource(System.String,System.String,System.String)">
            <summary> Add a string resource with given key.</summary>
            <param name="name">The String name to store the template under.
            </param>
            <param name="body">A String containing a template.
            </param>
            <param name="encoding">The encoding of this string template
            </param>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.IStringResourceRepository.RemoveStringResource(System.String)">
            <summary> delete a string resource with given key.</summary>
            <param name="name">The string name to remove from the repository.
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Util.IStringResourceRepository.Encoding">
            <summary> Returns the current encoding of this repository.
            
            </summary>
            <returns> The current encoding of this repository.
            </returns>
            <summary> Sets the default encoding of the repository. Encodings can also be stored per
            template string. The default implementation does this correctly.
            
            </summary>
            <param name="encoding">The encoding to use.
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl">
            <summary> Default implementation of StringResourceRepository.
            Uses a HashMap for storage
            
            </summary>
            <author>  <a href="mailto:eelco.hillenius@openedge.nl">Eelco Hillenius</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: StringResourceRepositoryImpl.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.resources">
            <summary> mem store</summary>
        </member>
        <member name="F:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.encoding">
            <summary> Current Repository encoding.</summary>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.GetStringResource(System.String)">
            <seealso cref="!:StringResourceRepository.GetStringResource(java.lang.String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.PutStringResource(System.String,System.String)">
            <seealso cref="!:StringResourceRepository.PutStringResource(java.lang.String, java.lang.String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.PutStringResource(System.String,System.String,System.String)">
            <seealso cref="!:StringResourceRepository.PutStringResource(java.lang.String, java.lang.String, java.lang.String)">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.RemoveStringResource(System.String)">
            <seealso cref="!:StringResourceRepository.RemoveStringResource(java.lang.String)">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.Resource.Util.StringResourceRepositoryImpl.Encoding">
            <seealso cref="!:org.apache.velocity.runtime.resource.util.StringResourceRepository.getEncoding()">
            </seealso>
            <seealso cref="!:org.apache.velocity.runtime.resource.util.StringResourceRepository.setEncoding(java.lang.String)">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.RuntimeConstants">
            <summary> This class defines the keys that are used in the velocity.properties file so that they can be referenced as a constant within
            Java code.
            
            </summary>
            <author>   <a href="mailto:jon@latchkey.com">Jon S. Stevens</a>
            </author>
            <author>   <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>   <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>   $Id: RuntimeConstants.java 702218 2008-10-06 18:15:18Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RUNTIME_LOG">
            <summary>Location of the velocity Log file. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RUNTIME_LOG_LOGSYSTEM">
            <summary>externally provided logger. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS">
            <summary>class of Log system to use. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RUNTIME_REFERENCES_STRICT">
            <summary> Properties referenced in the template are required to exist the object</summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RUNTIME_LOG_REFERENCE_LOG_INVALID">
            <summary>Logging of invalid references. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.COUNTER_NAME">
            <summary>Counter reference name in #foreach directives. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.COUNTER_INITIAL_VALUE">
            <summary>Initial counter value in #foreach directives. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.MAX_NUMBER_LOOPS">
            <summary>Maximum allowed number of loops. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.SKIP_INVALID_ITERATOR">
            <summary> Whether to throw an exception or just skip bad iterables. Default is true.</summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.SET_NULL_ALLOWED">
            <summary>if set to true then allows #set to accept null values in the right hand side. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.ERRORMSG_START">
            <summary> Starting tag for Error messages triggered by passing a parameter not allowed in the #include directive. Only string literals,
            and references are allowed.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.ERRORMSG_END">
            <summary> Ending tag for Error messages triggered by passing a parameter not allowed in the #include directive. Only string literals,
            and references are allowed.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.PARSE_DIRECTIVE_MAXDEPTH">
            <summary>Maximum recursion depth allowed for the #parse directive. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.DEFINE_DIRECTIVE_MAXDEPTH">
            <summary>Maximum recursion depth allowed for the #define directive. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.EVALUATE_CONTEXT_CLASS">
            <summary> class to use for local context with #Evaluate()</summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RESOURCE_MANAGER_CACHE_CLASS">
            <summary> The <code>resource.manager.cache.class</code> property specifies the name of the
            {@link org.apache.velocity.runtime.resource.ResourceCache} implementation to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RESOURCE_MANAGER_DEFAULTCACHE_SIZE">
            <summary>The <code>resource.manager.cache.size</code> property specifies the cache upper bound (if relevant). </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RESOURCE_MANAGER_LOGWHENFOUND">
            <summary>controls if the finding of a resource is logged. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.RESOURCE_LOADER">
            <summary> Key used to retrieve the names of the resource loaders to be used. In a properties file they may appear as the following:
            
            <p>resource.loader = file,classpath</p>
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.FILE_RESOURCE_LOADER_PATH">
            <summary>The public handle for setting a path in the FileResourceLoader. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.FILE_RESOURCE_LOADER_CACHE">
            <summary>The public handle for turning the caching on in the FileResourceLoader. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.EVENTHANDLER_REFERENCEINSERTION">
            <summary> The <code>eventhandler.referenceinsertion.class</code> property specifies a list of the
            {@link org.apache.velocity.app.event.IReferenceInsertionEventHandler} implementations to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.EVENTHANDLER_NULLSET">
            <summary> The <code>eventhandler.nullset.class</code> property specifies a list of the
            {@link org.apache.velocity.app.event.NullSetEventHandler} implementations to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.EVENTHANDLER_METHODEXCEPTION">
            <summary> The <code>eventhandler.methodexception.class</code> property specifies a list of the
            {@link org.apache.velocity.app.event.IMethodExceptionEventHandler} implementations to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.EVENTHANDLER_INCLUDE">
            <summary> The <code>eventhandler.include.class</code> property specifies a list of the
            {@link org.apache.velocity.app.event.IIncludeEventHandler} implementations to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.EVENTHANDLER_INVALIDREFERENCES">
            <summary> The <code>eventhandler.invalidreferences.class</code> property specifies a list of the
            {@link org.apache.velocity.app.event.IInvalidReferenceEventHandler} implementations to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_LIBRARY">
            <summary>Name of local Velocimacro library template. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_LIBRARY_DEFAULT">
            <summary>Default Velocimacro library template. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_LIBRARY_AUTORELOAD">
            <summary>switch for autoloading library-sourced VMs (for development). </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_PERM_ALLOW_INLINE">
            <summary>boolean (true/false) default true : allow inline (in-template) macro definitions. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL">
            <summary>boolean (true/false) default false : allow inline (in-template) macro definitions to replace existing. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_PERM_INLINE_LOCAL">
            <summary>Switch for forcing inline macros to be local : default false. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_MESSAGES_ON">
            <summary>Switch for VM blather : default true. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_CONTEXT_LOCALSCOPE">
            <summary>switch for local context in VM : default false. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_ARGUMENTS_STRICT">
            <summary>if true, throw an exception for wrong number of arguments *</summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.VM_MAX_DEPTH">
            <summary> Specify the maximum depth for macro calls</summary>
            <since> 1.6
            </since>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.INTERPOLATE_STRINGLITERALS">
            <summary>Switch for the interpolation facility for string literals. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.INPUT_ENCODING">
            <summary>The character encoding for the templates. Used by the parser in processing the input streams. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.OUTPUT_ENCODING">
            <summary>Encoding for the output stream. Currently used by Anakia and VelocityServlet </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.ENCODING_DEFAULT">
            <summary>Default Encoding is ISO-8859-1. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.UBERSPECT_CLASSNAME">
            <summary>key name for uberspector. Multiple classnames can be specified,in which case uberspectors will be chained. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.INTROSPECTOR_RESTRICT_PACKAGES">
            <summary>A comma separated list of packages to restrict access to in the SecureIntrospector. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.INTROSPECTOR_RESTRICT_CLASSES">
            <summary>A comma separated list of classes to restrict access to in the SecureIntrospector. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.STRICT_MATH">
            <summary>Switch for ignoring nulls in math equations vs throwing exceptions. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.PARSER_POOL_CLASS">
            <summary> The <code>parser.pool.class</code> property specifies the name of the {@link org.apache.velocity.util.SimplePool}
            implementation to use.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.PARSER_POOL_SIZE">
            <seealso cref="F:NVelocity.Runtime.RuntimeConstants.NUMBER_OF_PARSERS">
            </seealso>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.DEFAULT_RUNTIME_PROPERTIES">
            <summary>Default Runtime properties. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.DEFAULT_RUNTIME_DIRECTIVES">
            <summary>Default Runtime properties. </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeConstants.NUMBER_OF_PARSERS">
            <summary> The default number of parser instances to create. Configurable via the parameter named by the {@link #PARSER_POOL_SIZE}
            constant.
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.RuntimeInstance">
            <summary> This is the Runtime system for Velocity. It is the
            single access point for all functionality in Velocity.
            It adheres to the mediator pattern and is the only
            structure that developers need to be familiar with
            in order to Get Velocity to perform.
            
            The Runtime will also cooperate with external
            systems like Turbine. Runtime properties can
            set and then the Runtime is initialized.
            
            Turbine, for example, knows where the templates
            are to be loaded from, and where the Velocity
            Log file should be placed.
            
            So in the case of Velocity cooperating with Turbine
            the code might look something like the following:
            
            <blockquote><code><pre>
            ri.SetProperty(Runtime.FILE_RESOURCE_LOADER_PATH, templatePath);
            ri.SetProperty(Runtime.RUNTIME_LOG, pathToVelocityLog);
            ri.Init();
            </pre></code></blockquote>
            
            <pre>
            -----------------------------------------------------------------------
            N O T E S  O N  R U N T I M E  I N I T I A L I Z A T I O N
            -----------------------------------------------------------------------
            Init()
            
            If Init() is called by itself the RuntimeInstance will Initialize
            with a set of default values.
            -----------------------------------------------------------------------
            Init(String/Properties)
            
            In this case the default velocity properties are layed down
            first to provide a solid base, then any properties provided
            in the given properties object will override the corresponding
            default property.
            -----------------------------------------------------------------------
            </pre>
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:jlb@houseofdistraction.com">Jeff Bowden</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magusson Jr.</a>
            </author>
            <version>  $Id: RuntimeInstance.java 703049 2008-10-09 03:18:58Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.vmFactory">
            <summary>  VelocimacroFactory object to manage VMs</summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.log">
            <summary> The Runtime logger.  We start with an instance of
            a 'primordial logger', which just collects Log messages
            then, when the Log system is initialized, all the
            messages Get dumpted out of the primordial one into the real one.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.parserPool">
            <summary> The Runtime parser pool</summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.initializing">
            <summary> Indicate whether the Runtime is in the midst of initialization.</summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.initialized">
            <summary> Indicate whether the Runtime has been fully initialized.</summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.overridingProperties">
            <summary> These are the properties that are laid down over top
            of the default properties when requested.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.runtimeDirectives">
            <summary> This is a hashtable of initialized directives.
            The directives that populate this hashtable are
            taken from the RUNTIME_DEFAULT_DIRECTIVES
            property file. This hashtable is passed
            to each parser that is created.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.configuration">
            <summary> Object that houses the configuration options for
            the velocity runtime. The ExtendedProperties object allows
            the convenient retrieval of a subset of properties.
            For example all the properties for a resource loader
            can be retrieved from the main ExtendedProperties object
            using something like the following:
            
            ExtendedProperties loaderConfiguration =
            configuration.subset(loaderID);
            
            And a configuration is a lot more convenient to deal
            with then conventional properties objects, or Maps.
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.RuntimeInstance.eventCartridge">
            <summary> This stores the engine-wide set of event handlers.  Event handlers for
            each specific merge are stored in the context.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.#ctor">
            <summary> Creates a new RuntimeInstance object.</summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.Init">
            <summary> This is the primary initialization method in the Velocity
            Runtime. The systems that are setup/initialized here are
            as follows:
            
            <ul>
            <li>Logging System</li>
            <li>ResourceManager</li>
            <li>EventHandler</li>
            <li>Parser Pool</li>
            <li>Global Cache</li>
            <li>Static Content Include System</li>
            <li>Velocimacro System</li>
            </ul>
            </summary>
            <throws>  Exception When an Error occured during initialization. </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.RequireInitialization">
            <summary> Init or die! (with some Log help, of course)</summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.InitializeIntrospection">
            <summary>  Gets the classname for the Uberspect introspection package and
            instantiates an instance.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.SetDefaultProperties">
            <summary> Initializes the Velocity Runtime with properties file.
            The properties file may be in the file system proper,
            or the properties file may be in the classpath.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.SetProperty(System.String,System.Object)">
            <summary> Allows an external system to set a property in
            the Velocity Runtime.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="value">property value
            </param>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.AddProperty(System.String,System.Object)">
            <summary> Add a property to the configuration. If it already
            exists then the value stated here will be added
            to the configuration entry. For example, if
            
            resource.loader = file
            
            is already present in the configuration and you
            
            addProperty("resource.loader", "classpath")
            
            Then you will end up with a Vector like the
            following:
            
            ["file", "classpath"]
            
            </summary>
            <param name="key">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.ClearProperty(System.String)">
            <summary> Clear the values pertaining to a particular
            property.
            
            </summary>
            <param name="key">of property to clear
            </param>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetProperty(System.String)">
            <summary>  Allows an external caller to Get a property.  The calling
            routine is required to know the type, as this routine
            will return an Object, as that is what properties can be.
            
            </summary>
            <param name="key">property to return
            </param>
            <returns> Value of the property or null if it does not exist.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.InitializeProperties">
            <summary> Initialize Velocity properties, if the default
            properties have not been laid down first then
            do so. Then proceed to process any overriding
            properties. Laying down the default properties
            gives a much greater chance of having a
            working system.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.Init(Commons.Collections.ExtendedProperties)">
            <summary> Initialize the Velocity Runtime with a Properties
            object.
            
            </summary>
            <param name="p">
            </param>
            <throws>  Exception When an Error occurs during initialization. </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.Init(System.String)">
            <summary> Initialize the Velocity Runtime with the name of
            ExtendedProperties object.
            
            </summary>
            <param name="configurationFile">
            </param>
            <throws>  Exception When an Error occurs during initialization. </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.InitializeLog">
            <summary> Initialize the Velocity logging system.
            
            </summary>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.InitializeDirectives">
            <summary> This methods initializes all the directives
            that are used by the Velocity Runtime. The
            directives to be initialized are listed in
            the RUNTIME_DEFAULT_DIRECTIVES properties
            file.
            
            </summary>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.AddDirective(NVelocity.Runtime.Directive.Directive)">
            <summary> Programatically Add a directive.</summary>
            <param name="directive">
            </param>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetDirective(System.String)">
            <summary> Retrieve a previously instantiated directive.</summary>
            <param name="name">name of the directive
            </param>
            <returns> the {@link Directive} for that name
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.RemoveDirective(System.String)">
            <summary> Remove a directive.</summary>
            <param name="name">name of the directive.
            </param>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.LoadDirective(System.String)">
            <summary>  instantiates and loads the directive with some basic checks
            
            </summary>
            <param name="directiveClass">classname of directive to load
            </param>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.InitializeParserPool">
            <summary> Initializes the Velocity parser pool.</summary>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.CreateNewParser">
            <summary> Returns a JavaCC generated Parser.
            
            </summary>
            <returns> Parser javacc generated parser
            </returns>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.RuntimeInstance.Parse(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.Runtime.RuntimeInstance.Parse(System.IO.TextReader,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.RuntimeInstance.Parse(System.IO.TextReader,System.String,System.Boolean)">
            <summary>  Parse the input and return the root of the AST node structure.
            
            </summary>
            <param name="reader">Reader retrieved by a resource loader
            </param>
            <param name="templateName">name of the template being parsed
            </param>
            <param name="dumpNamespace">flag to dump the Velocimacro namespace for this template
            </param>
            <returns> A root node representing the template as an AST tree.
            </returns>
            <throws>  ParseException When the template could not be parsed. </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.String)">
            <summary> Renders the input string using the context into the output writer.
            To be used when a template is dynamically constructed, or want to use
            Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="out"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log
            messages in case of Error
            </param>
            <param name="instring">input string containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While rendering to the writer, an I/O problem occured. </throws>
            <since> Velocity 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.Evaluate(NVelocity.Context.IContext,System.IO.TextWriter,System.String,System.IO.TextReader)">
            <summary> Renders the input reader using the context into the output writer.
            To be used when a template is dynamically constructed, or want to
            use Velocity as a token replacer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="writer"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log messages
            in case of Error
            </param>
            <param name="reader">Reader containing the VTL to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While reading from the reader or rendering to the writer, </throws>
            <summary>                     an I/O problem occured.
            </summary>
            <since> Velocity 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.Render(NVelocity.Context.IContext,System.IO.TextWriter,System.String,NVelocity.Runtime.Parser.Node.SimpleNode)">
            <summary> Initializes and renders the AST {@link SimpleNode} using the context
            into the output writer.
            
            </summary>
            <param name="context">context to use in rendering input string
            </param>
            <param name="writer"> Writer in which to render the output
            </param>
            <param name="logTag"> string to be used as the template name for Log messages
            in case of Error
            </param>
            <param name="nodeTree">SimpleNode which is the root of the AST to be rendered
            
            </param>
            <returns> true if successful, false otherwise.  If false, see
            Velocity runtime Log for errors
            </returns>
            <throws>  ParseErrorException The template could not be parsed. </throws>
            <throws>  MethodInvocationException A method on a context object could not be invoked. </throws>
            <throws>  ResourceNotFoundException A referenced resource could not be loaded. </throws>
            <throws>  IOException While rendering to the writer, an I/O problem occured. </throws>
            <since> Velocity 1.6
            </since>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.RuntimeInstance.InvokeVelocimacro(System.String,System.String,System.String[],NVelocity.Context.IContext,System.IO.TextWriter)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetTemplate(System.String)">
            <summary> Returns a <code>Template</code> from the resource manager.
            This method assumes that the character encoding of the
            template is set by the <code>input.encoding</code>
            property.  The default is "ISO-8859-1"
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetTemplate(System.String,System.String)">
            <summary> Returns a <code>Template</code> from the resource manager
            
            </summary>
            <param name="name">The  name of the desired template.
            </param>
            <param name="encoding">Character encoding of the template
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetContent(System.String)">
            <summary> Returns a static content resource from the
            resource manager.  Uses the current value
            if INPUT_ENCODING as the character encoding.
            
            </summary>
            <param name="name">Name of content resource to Get
            </param>
            <returns> parsed ContentResource object ready for use
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException When the template could not be parsed. </throws>
            <throws>  Exception Any other Error. </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetContent(System.String,System.String)">
            <summary> Returns a static content resource from the
            resource manager.
            
            </summary>
            <param name="name">Name of content resource to Get
            </param>
            <param name="encoding">Character encoding to use
            </param>
            <returns> parsed ContentResource object ready for use
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException When the template could not be parsed. </throws>
            <throws>  Exception Any other Error. </throws>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetLoaderNameForResource(System.String)">
            <summary>  Determines if a template exists and returns name of the loader that
            provides it.  This is a slightly less hokey way to support
            the Velocity.ResourceExists() utility method, which was broken
            when per-template encoding was introduced.  We can revisit this.
            
            </summary>
            <param name="resourceName">Name of template or content resource
            </param>
            <returns> class name of loader than can provide it
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetString(System.String,System.String)">
            <summary> String property accessor method with default to hide the
            configuration implementation.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="defaultValue"> default value to return if key not
            found in resource manager.
            </param>
            <returns> value of key or default
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetVelocimacro(System.String,System.String)">
            <summary> Returns the appropriate VelocimacroProxy object if vmName
            is a valid current Velocimacro.
            
            </summary>
            <param name="vmName">Name of velocimacro requested
            </param>
            <param name="templateName">Name of the template that contains the velocimacro.
            </param>
            <returns> The requested VelocimacroProxy.
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetVelocimacro(System.String,System.String,System.String)">
            <summary> Returns the appropriate VelocimacroProxy object if vmName
            is a valid current Velocimacro.
            
            </summary>
            <param name="vmName"> Name of velocimacro requested
            </param>
            <param name="templateName">Name of the namespace.
            </param>
            <param name="renderingTemplate">Name of the template we are currently rendering. This
            information is needed when VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL setting is true
            and template contains a macro with the same name as the global macro library.
            
            </param>
            <since> Velocity 1.6
            
            </since>
            <returns> VelocimacroProxy
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.AddVelocimacro(System.String,NVelocity.Runtime.Parser.Node.INode,System.String[],System.String)">
            <summary> Adds a new Velocimacro. Usually called by Macro only while parsing.
            
            Called by org.apache.velocity.runtime.directive.processAndRegister
            
            </summary>
            <param name="name"> Name of velocimacro
            </param>
            <param name="macro"> root AST node of the parsed macro
            </param>
            <param name="argArray"> Array of strings, containing the
            #macro() arguments.  the 0th is the name.
            </param>
            <param name="sourceTemplate">
            </param>
            <since> Velocity 1.6
            
            </since>
            <returns> boolean  True if added, false if rejected for some
            reason (either parameters or permission settings)
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.IsVelocimacro(System.String,System.String)">
            <summary>  Checks to see if a VM exists
            
            </summary>
            <param name="vmName">Name of the Velocimacro.
            </param>
            <param name="templateName">Template on which to look for the Macro.
            </param>
            <returns> True if VM by that name exists, false if not
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.DumpVMNamespace(System.String)">
            <summary> tells the vmFactory to dump the specified namespace.  This is to support
            clearing the VM list when in inline-VM-local-scope mode
            </summary>
            <param name="namespace">Namespace to dump.
            </param>
            <returns> True if namespace was dumped successfully.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetString(System.String)">
            <summary> String property accessor method to hide the configuration implementation</summary>
            <param name="key"> property key
            </param>
            <returns>   value of key or null
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetInt(System.String)">
            <summary> Int property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key">Property key
            </param>
            <returns> value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetInt(System.String,System.Int32)">
            <summary> Int property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key"> property key
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns> value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetBoolean(System.String,System.Boolean)">
            <summary> Boolean property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="def">The default value if property not found.
            </param>
            <returns> value of key or default value
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.GetApplicationAttribute(System.Object)">
            <summary>  Gets the application attribute for the given key
            
            </summary>
            <param name="key">
            </param>
            <returns> The application attribute for the given key.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeInstance.SetApplicationAttribute(System.Object,System.Object)">
            <summary>   Sets the application attribute for the given key
            
            </summary>
            <param name="key">
            </param>
            <param name="o">The new application attribute.
            </param>
            <returns> The old value of this attribute or null if it hasn't been set before.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.Initialized">
            <summary> Returns true if the RuntimeInstance has been successfully initialized.</summary>
            <returns> True if the RuntimeInstance has been successfully initialized.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.Configuration">
            <summary> Return the velocity runtime configuration object.
            
            </summary>
            <returns> Configuration object which houses the Velocity runtime
            properties.
            </returns>
            <summary> Allow an external system to set an ExtendedProperties
            object to use. This is useful where the external
            system also uses the ExtendedProperties class and
            the velocity configuration is a subset of
            parent application's configuration. This is
            the case with Turbine.
            
            </summary>
            <param name="configuration">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.DefaultEncoding">
            <summary> Retrieves and caches the configured default encoding
            for better performance. (VELOCITY-606)
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.Log">
            <summary> Returns a convenient LogMessage instance that wraps the current LogChute.
            Use this to Log Error messages. It has the usual methods.
            
            </summary>
            <returns> A convenience LogMessage instance that wraps the current LogChute.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.Introspector">
            <summary>  Return the Introspector for this instance</summary>
            <returns> The Introspector for this instance
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.ApplicationEventCartridge">
            <summary> Returns the event handlers for the application.</summary>
            <returns> The event handlers for the application.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeInstance.Uberspect">
            <summary> Returns the Uberspect object for this Instance.
            
            </summary>
            <returns> The Uberspect object for this Instance.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.RuntimeSingleton">
            <summary> This is the Runtime system for Velocity. It is the
            single access point for all functionality in Velocity.
            It adheres to the mediator pattern and is the only
            structure that developers need to be familiar with
            in order to Get Velocity to perform.
            
            The Runtime will also cooperate with external
            systems like Turbine. Runtime properties can
            set and then the Runtime is initialized.
            
            Turbine for example knows where the templates
            are to be loaded from, and where the velocity
            Log file should be placed.
            
            So in the case of Velocity cooperating with Turbine
            the code might look something like the following:
            
            <pre>
            RuntimeSingleton.SetProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, templatePath);
            RuntimeSingleton.SetProperty(RuntimeConstants.RUNTIME_LOG, pathToVelocityLog);
            RuntimeSingleton.Init();
            </pre>
            
            <pre>
            -----------------------------------------------------------------------
            N O T E S  O N  R U N T I M E  I N I T I A L I Z A T I O N
            -----------------------------------------------------------------------
            RuntimeSingleton.Init()
            
            If Runtime.Init() is called by itself the Runtime will
            Initialize with a set of default values.
            -----------------------------------------------------------------------
            RuntimeSingleton.Init(String/Properties)
            
            In this case the default velocity properties are layed down
            first to provide a solid base, then any properties provided
            in the given properties object will override the corresponding
            default property.
            -----------------------------------------------------------------------
            </pre>
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:jlb@houseofdistraction.com">Jeff Bowden</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magusson Jr.</a>
            </author>
            <author>  <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>
            
            </author>
            <seealso cref="!:org.apache.velocity.runtime.RuntimeInstance">
            
            </seealso>
            <version>  $Id: RuntimeSingleton.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.Init">
            <summary> This is the primary initialization method in the Velocity
            Runtime. The systems that are setup/initialized here are
            as follows:
            
            <ul>
            <li>Logging System</li>
            <li>ResourceManager</li>
            <li>Event Handlers</li>
            <li>Parser Pool</li>
            <li>Global Cache</li>
            <li>Static Content Include System</li>
            <li>Velocimacro System</li>
            </ul>
            </summary>
            <throws>  Exception When an Error occured during initialization. </throws>
            <seealso cref="M:NVelocity.Runtime.RuntimeInstance.Init">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.SetProperty(System.String,System.Object)">
            <summary> Allows an external system to set a property in
            the Velocity Runtime.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="value">property value
            </param>
            <seealso cref="!:RuntimeInstance.SetProperty(String, Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.AddProperty(System.String,System.Object)">
            <summary> Add a property to the configuration. If it already
            exists then the value stated here will be added
            to the configuration entry. For example, if
            
            resource.loader = file
            
            is already present in the configuration and you
            
            addProperty("resource.loader", "classpath")
            
            Then you will end up with a Vector like the
            following:
            
            ["file", "classpath"]
            
            </summary>
            <param name="key">
            </param>
            <param name="value">
            </param>
            <seealso cref="!:RuntimeInstance.addProperty(String, Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.ClearProperty(System.String)">
            <summary> Clear the values pertaining to a particular
            property.
            
            </summary>
            <param name="key">of property to clear
            </param>
            <seealso cref="!:RuntimeInstance.clearProperty(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetProperty(System.String)">
            <summary>  Allows an external caller to Get a property.  The calling
            routine is required to know the type, as this routine
            will return an Object, as that is what properties can be.
            
            </summary>
            <param name="key">property to return
            </param>
            <returns> Value of the property or null if it does not exist.
            </returns>
            <seealso cref="!:RuntimeInstance.GetProperty(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.Init(Commons.Collections.ExtendedProperties)">
            <summary> Initialize the Velocity Runtime with a Properties
            object.
            
            </summary>
            <param name="p">
            </param>
            <throws>  Exception When an Error occurs during initialization. </throws>
            <seealso cref="!:RuntimeInstance.Init(Properties)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.Init(System.String)">
            <summary> Initialize the Velocity Runtime with the name of
            ExtendedProperties object.
            
            </summary>
            <param name="configurationFile">
            </param>
            <throws>  Exception When an Error occurs during initialization. </throws>
            <seealso cref="!:RuntimeInstance.Init(String)">
            </seealso>
        </member>
        <!-- 对于成员“M:NVelocity.Runtime.RuntimeSingleton.Parse(System.IO.TextReader,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Runtime.RuntimeSingleton.Parse(System.IO.TextReader,System.String,System.Boolean)">
            <summary>  Parse the input and return the root of the AST node structure.
            
            </summary>
            <param name="reader">Reader retrieved by a resource loader
            </param>
            <param name="templateName">name of the template being parsed
            </param>
            <param name="dumpNamespace">flag to dump the Velocimacro namespace for this template
            </param>
            <returns> A root node representing the template as an AST tree.
            </returns>
            <throws>  ParseException When the template could not be parsed. </throws>
            <seealso cref="!:RuntimeInstance.parse(Reader, String, boolean)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetTemplate(System.String)">
            <summary> Returns a <code>Template</code> from the resource manager.
            This method assumes that the character encoding of the
            template is set by the <code>input.encoding</code>
            property.  The default is "ISO-8859-1"
            
            </summary>
            <param name="name">The file name of the desired template.
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
            <seealso cref="!:RuntimeInstance.GetTemplate(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetTemplate(System.String,System.String)">
            <summary> Returns a <code>Template</code> from the resource manager
            
            </summary>
            <param name="name">The  name of the desired template.
            </param>
            <param name="encoding">Character encoding of the template
            </param>
            <returns>     The template.
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  Exception if an Error occurs in template initialization </throws>
            <throws>  ParseErrorException When the template could not be parsed. </throws>
            <throws>  Exception Any other Error. </throws>
            <seealso cref="!:RuntimeInstance.GetTemplate(String, String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetContent(System.String)">
            <summary> Returns a static content resource from the
            resource manager.  Uses the current value
            if INPUT_ENCODING as the character encoding.
            
            </summary>
            <param name="name">Name of content resource to Get
            </param>
            <returns> parsed ContentResource object ready for use
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException When the template could not be parsed. </throws>
            <throws>  Exception Any other Error. </throws>
            <seealso cref="!:RuntimeInstance.getContent(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetContent(System.String,System.String)">
            <summary> Returns a static content resource from the
            resource manager.
            
            </summary>
            <param name="name">Name of content resource to Get
            </param>
            <param name="encoding">Character encoding to use
            </param>
            <returns> parsed ContentResource object ready for use
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException When the template could not be parsed. </throws>
            <throws>  Exception Any other Error. </throws>
            <seealso cref="!:RuntimeInstance.getContent(String, String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetLoaderNameForResource(System.String)">
            <summary>  Determines is a template exists, and returns name of the loader that
            provides it.  This is a slightly less hokey way to support
            the Velocity.TemplateExists() utility method, which was broken
            when per-template encoding was introduced.  We can revisit this.
            
            </summary>
            <param name="resourceName">Name of template or content resource
            </param>
            <returns> class name of loader than can provide it
            </returns>
            <seealso cref="!:RuntimeInstance.getLoaderNameForResource(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetString(System.String,System.String)">
            <summary> String property accessor method with default to hide the
            configuration implementation.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="defaultValue"> default value to return if key not
            found in resource manager.
            </param>
            <returns> value of key or default
            </returns>
            <seealso cref="!:RuntimeInstance.getString(String, String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetVelocimacro(System.String,System.String)">
            <summary> Returns the appropriate VelocimacroProxy object if strVMname
            is a valid current Velocimacro.
            
            </summary>
            <param name="vmName">Name of velocimacro requested
            </param>
            <param name="templateName">Name of the template that contains the velocimacro.
            </param>
            <returns> The requested VelocimacroProxy.
            </returns>
            <seealso cref="!:RuntimeInstance.getVelocimacro(String, String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.AddVelocimacro(System.String,NVelocity.Runtime.Parser.Node.INode,System.String[],System.String)">
            <summary> Adds a new Velocimacro. Usually called by Macro only while parsing.
            
            </summary>
            <param name="name"> Name of a new velocimacro.
            </param>
            <param name="macro"> root AST node of the parsed macro
            </param>
            <param name="argArray"> Array of strings, containing the
            #macro() arguments.  the 0th argument is the name.
            </param>
            <param name="sourceTemplate">The template from which the macro is requested.
            </param>
            <returns> boolean  True if added, false if rejected for some
            reason (either parameters or permission settings)
            </returns>
            <seealso cref="!:RuntimeInstance.addVelocimacro(String, Node, String[], String)">
            </seealso>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.IsVelocimacro(System.String,System.String)">
            <summary>  Checks to see if a VM exists
            
            </summary>
            <param name="vmName">Name of the Velocimacro.
            </param>
            <param name="templateName">Template on which to look for the Macro.
            </param>
            <returns> True if VM by that name exists, false if not
            </returns>
            <seealso cref="!:RuntimeInstance.isVelocimacro(String, String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.DumpVMNamespace(System.String)">
            <summary> tells the vmFactory to dump the specified namespace.  This is to support
            clearing the VM list when in inline-VM-local-scope mode
            </summary>
            <param name="namespace">Namespace to dump.
            </param>
            <returns> True if namespace was dumped successfully.
            </returns>
            <seealso cref="!:RuntimeInstance.dumpVMNamespace(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetString(System.String)">
            <summary> String property accessor method to hide the configuration implementation</summary>
            <param name="key"> property key
            </param>
            <returns>   value of key or null
            </returns>
            <seealso cref="!:RuntimeInstance.getString(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetInt(System.String)">
            <summary> Int property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key">Property key
            </param>
            <returns> value
            </returns>
            <seealso cref="!:RuntimeInstance.getInt(String)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetInt(System.String,System.Int32)">
            <summary> Int property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key"> property key
            </param>
            <param name="defaultValue">The default value.
            </param>
            <returns> value
            </returns>
            <seealso cref="!:RuntimeInstance.getInt(String, int)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetBoolean(System.String,System.Boolean)">
            <summary> Boolean property accessor method to hide the configuration implementation.
            
            </summary>
            <param name="key">property key
            </param>
            <param name="def">The default value if property not found.
            </param>
            <returns> value of key or default value
            </returns>
            <seealso cref="!:RuntimeInstance.getBoolean(String, boolean)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.RuntimeSingleton.GetApplicationAttribute(System.Object)">
            <summary>  Gets the application attribute for the given key
            
            </summary>
            <seealso cref="!:org.apache.velocity.runtime.RuntimeServices.getApplicationAttribute(Object)">
            </seealso>
            <param name="key">
            </param>
            <returns> The application attribute for the given key.
            </returns>
            <seealso cref="!:RuntimeInstance.getApplicationAttribute(Object)">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.Initialized">
            <summary> Returns true if the RuntimeInstance has been successfully initialized.</summary>
            <returns> True if the RuntimeInstance has been successfully initialized.
            </returns>
            <seealso cref="!:RuntimeInstance.isInitialized()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.RuntimeServices">
            <summary> Returns the RuntimeServices Instance used by this wrapper.
            
            </summary>
            <returns> The RuntimeServices Instance used by this wrapper.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.Configuration">
            <summary> Return the velocity runtime configuration object.
            
            </summary>
            <returns> ExtendedProperties configuration object which houses
            the velocity runtime properties.
            </returns>
            <seealso cref="!:RuntimeInstance.getConfiguration()">
            </seealso>
            <summary> Allow an external system to set an ExtendedProperties
            object to use. This is useful where the external
            system also uses the ExtendedProperties class and
            the velocity configuration is a subset of
            parent application's configuration. This is
            the case with Turbine.
            
            </summary>
            <param name="configuration">
            </param>
            <seealso cref="!:RuntimeInstance.setConfiguration(ExtendedProperties)">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.Log">
            <summary> Returns a convenient LogMessage instance that wraps the current LogChute.
            
            </summary>
            <returns> A convenience LogMessage instance that wraps the current LogChute.
            </returns>
            <seealso cref="!:RuntimeInstance.getLog()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.Introspector">
            <summary>  Return the Introspector for this RuntimeInstance
            
            </summary>
            <returns> Introspector object for this runtime instance
            </returns>
            <seealso cref="!:RuntimeInstance.getIntrospector()">
            </seealso>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.EventCartridge">
            <summary> Returns the event handlers for the application.</summary>
            <returns> The event handlers for the application.
            </returns>
            <seealso cref="!:RuntimeInstance.getApplicationEventCartridge()">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.RuntimeSingleton.Uberspect">
            <summary> Returns the Uberspect object for this Instance.
            
            </summary>
            <returns> The Uberspect object for this Instance.
            </returns>
            <seealso cref="!:org.apache.velocity.runtime.RuntimeServices.getUberspect()">
            </seealso>
            <seealso cref="!:RuntimeInstance.getUberspect()">
            </seealso>
        </member>
        <member name="T:NVelocity.Runtime.VelocimacroFactory">
            <summary>  VelocimacroFactory.java
            
            manages the set of VMs in a running Velocity engine.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: VelocimacroFactory.java 718442 2008-11-18 00:01:17Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.rsvc">
            <summary>  runtime services for this instance</summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.log">
            <summary>  the Log for this instance</summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.vmManager">
            <summary>  VMManager : deal with namespace management
            and actually keeps all the VM definitions
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.replaceAllowed">
            <summary>  determines if replacement of global VMs are allowed
            controlled by  VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.addNewAllowed">
            <summary>  controls if new VMs can be added.  Set by
            VM_PERM_ALLOW_INLINE  Note the assumption that only
            through inline defs can this happen.
            additions through autoloaded VMs is allowed
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.templateLocal">
            <summary>  sets if template-local namespace in used</summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.autoReloadLibrary">
            <summary>  determines if the libraries are auto-loaded
            when they change
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.macroLibVec">
            <summary>  vector of the library names</summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.libModMap">
            <summary>  map of the library Template objects
            used for reload determination
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.#ctor(NVelocity.Runtime.IRuntimeServices)">
            <summary>  C'tor for the VelociMacro factory.
            
            </summary>
            <param name="rsvc">Reference to a runtime services object.
            </param>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.InitVelocimacro">
            <summary>  Initialize the factory - setup all permissions
            load all global libraries.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.AddVelocimacro(System.String,System.String,System.String[],System.String)">
            <summary> Adds a macro to the factory.
            
            addVelocimacro(String, Node, String[] argArray, String) should be used internally
            instead of this.
            
            </summary>
            <param name="name">Name of the Macro to Add.
            </param>
            <param name="macroBody">String representation of the macro.
            </param>
            <param name="argArray">Macro arguments. First element is the macro name.
            </param>
            <param name="sourceTemplate">Source template from which the macro gets registered.
            
            </param>
            <returns> true if Macro was registered successfully.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.AddVelocimacro(System.String,NVelocity.Runtime.Parser.Node.INode,System.String[],System.String)">
            <summary> Adds a macro to the factory.
            
            </summary>
            <param name="name">Name of the Macro to Add.
            </param>
            <param name="macroBody">root node of the parsed macro AST
            </param>
            <param name="argArray">Name of the macro arguments. First element is the macro name.
            </param>
            <param name="sourceTemplate">Source template from which the macro gets registered.
            </param>
            <returns> true if Macro was registered successfully.
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.CanAddVelocimacro(System.String,System.String)">
            <summary>  determines if a given macro/namespace (name, source) combo is allowed
            to be added
            
            </summary>
            <param name="name">Name of VM to Add
            </param>
            <param name="sourceTemplate">Source template that contains the defintion of the VM
            </param>
            <returns> true if it is allowed to be added, false otherwise
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.IsVelocimacro(System.String,System.String)">
            <summary> Tells the world if a given directive string is a Velocimacro</summary>
            <param name="vm">Name of the Macro.
            </param>
            <param name="sourceTemplate">Source template from which the macro should be loaded.
            </param>
            <returns> True if the given name is a macro.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.GetVelocimacro(System.String,System.String)">
            <summary>  parameters factory : creates a Directive that will
            behave correctly wrt getting the framework to
            dig out the correct # of args
            </summary>
            <param name="vmName">Name of the Macro.
            </param>
            <param name="sourceTemplate">Source template from which the macro should be loaded.
            </param>
            <returns> A directive representing the Macro.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.GetVelocimacro(System.String,System.String,System.String)">
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.DumpVMNamespace(System.String)">
            <summary> tells the vmManager to dump the specified namespace
            
            </summary>
            <param name="namespace">Namespace to dump.
            </param>
            <returns> True if namespace has been dumped successfully.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.SetAddMacroPermission(System.Boolean)">
            <summary> sets the permission to Add new macros</summary>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroFactory.SetReplacementPermission(System.Boolean)">
            <summary> sets the permission for allowing addMacro() calls to replace existing VM's</summary>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroFactory.TemplateLocalInline">
            <summary> sets permission to have VMs local in scope to their declaring template note that this is
            really taken care of in the VMManager class, but we need it here for gating purposes in addVM
            eventually, I will slide this all into the manager, maybe.
            </summary>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroFactory.Autoload">
            <summary>  Get the switch for automatic reloading of
            global library-based VMs
            </summary>
            <summary>  set the switch for automatic reloading of
            global library-based VMs
            </summary>
        </member>
        <member name="T:NVelocity.Runtime.VelocimacroFactory.Twonk">
            <summary> small container class to hold the tuple
            of a template and modification time.
            We keep the modification time so we can
            'override' it on a reload to prevent
            recursive reload due to inter-calling
            VMs in a library
            </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.Twonk.template">
            <summary>Template kept in this container. </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroFactory.Twonk.modificationTime">
            <summary>modification time of the template. </summary>
        </member>
        <member name="T:NVelocity.Runtime.VelocimacroManager">
            <summary> Manages VMs in namespaces.  Currently, two namespace modes are
            supported:
            
            <ul>
            <li>flat - all allowable VMs are in the global namespace</li>
            <li>local - inline VMs are added to it's own template namespace</li>
            </ul>
            
            Thanks to <a href="mailto:JFernandez@viquity.com">Jose Alberto Fernandez</a>
            for some ideas incorporated here.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:JFernandez@viquity.com">Jose Alberto Fernandez</a>
            </author>
            <version>  $Id: VelocimacroManager.java 698376 2008-09-23 22:15:49Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroManager.namespaceHash">
            <summary>Hash of namespace hashes. </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroManager.globalNamespace">
            <summary>reference to global namespace hash </summary>
        </member>
        <member name="F:NVelocity.Runtime.VelocimacroManager.libraries">
            <summary>set of names of library tempates/namespaces </summary>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.#ctor(NVelocity.Runtime.IRuntimeServices)">
            <summary> Adds the global namespace to the hash.</summary>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.AddVM(System.String,NVelocity.Runtime.Parser.Node.INode,System.String[],System.String,System.Boolean)">
            <summary> Adds a VM definition to the cache.
            
            Called by VelocimacroFactory.addVelociMacro (after parsing and discovery in Macro directive)
            
            </summary>
            <param name="vmName">Name of the new VelociMacro.
            </param>
            <param name="macroBody">String representation of the macro body.
            </param>
            <param name="argArray">Array of macro parameters, first parameter is the macro name.
            </param>
            <param name="namespace">The namespace/template from which this macro has been loaded.
            </param>
            <returns> Whether everything went okay.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.Get(System.String,System.String)">
            <summary> Gets a VelocimacroProxy object by the name / source template duple.
            
            </summary>
            <param name="vmName">Name of the VelocityMacro to look up.
            </param>
            <param name="namespace">Namespace in which to look up the macro.
            </param>
            <returns> A proxy representing the Macro.
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.Get(System.String,System.String,System.String)">
            <summary> Gets a VelocimacroProxy object by the name / source template duple.
            
            </summary>
            <param name="vmName">Name of the VelocityMacro to look up.
            </param>
            <param name="namespace">Namespace in which to look up the macro.
            </param>
            <param name="renderingTemplate">Name of the template we are currently rendering.
            </param>
            <returns> A proxy representing the Macro.
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.DumpNamespace(System.String)">
            <summary> Removes the VMs and the namespace from the manager.
            Used when a template is reloaded to avoid
            losing memory.
            
            </summary>
            <param name="namespace">namespace to dump
            </param>
            <returns> boolean representing success
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.GetNamespace(System.String,System.Boolean)">
            <summary>  returns the hash for the specified namespace, and if it doesn't exist
            will create a new one and Add it to the namespaces
            
            </summary>
            <param name="namespace"> name of the namespace :)
            </param>
            <param name="addIfNew"> flag to Add a new namespace if it doesn't exist
            </param>
            <returns> namespace Map of VMs or null if doesn't exist
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.AddNamespace(System.String)">
            <summary>   adds a namespace to the namespaces
            
            </summary>
            <param name="namespace">name of namespace to Add
            </param>
            <returns> Hash added to namespaces, ready for use
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.UsingNamespaces(System.String)">
            <summary>  determines if currently using namespaces.
            
            </summary>
            <param name="namespace">currently ignored
            </param>
            <returns> true if using namespaces, false if not
            </returns>
        </member>
        <member name="M:NVelocity.Runtime.VelocimacroManager.GetLibraryName(System.String,System.String)">
            <summary> Return the library name for a given macro.</summary>
            <param name="vmName">Name of the Macro to look up.
            </param>
            <param name="namespace">Namespace to look the macro up.
            </param>
            <returns> The name of the library which registered this macro in a namespace.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.NamespaceUsage">
            <summary>  public switch to let external user of manager to control namespace
            usage indep of properties.  That way, for example, at startup the
            library files are loaded into global namespace
            
            </summary>
            <param name="namespaceOn">True if namespaces should be used.
            </param>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.RegisterFromLib">
            <summary> Should macros registered from Libraries be marked special?</summary>
            <param name="registerFromLib">True if macros from Libs should be marked.
            </param>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.TemplateLocalInlineVM">
            <summary> Should macros from the same template be inlined?
            
            </summary>
            <param name="inlineLocalMode">True if macros should be inlined on the same template.
            </param>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.InlineReplacesGlobal">
            <since> 1.6
            </since>
        </member>
        <member name="T:NVelocity.Runtime.VelocimacroManager.MacroEntry">
            <summary>  wrapper class for holding VM information</summary>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.MacroEntry.FromLibrary">
            <summary> Returns true if the macro was registered from a library.</summary>
            <returns> True if the macro was registered from a library.
            </returns>
            <summary> Has the macro been registered from a library.</summary>
            <param name="fromLibrary">True if the macro was registered from a Library.
            </param>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.MacroEntry.NodeTree">
            <summary> Returns the node tree for this macro.</summary>
            <returns> The node tree for this macro.
            </returns>
        </member>
        <member name="P:NVelocity.Runtime.VelocimacroManager.MacroEntry.SourceTemplate">
            <summary> Returns the source template name for this macro.</summary>
            <returns> The source template name for this macro.
            </returns>
        </member>
        <member name="T:NVelocity.Runtime.Visitor.BaseVisitor">
            <summary> This is the base class for all visitors.
            For each AST node, this class will provide
            a bare-bones method for traversal.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: BaseVisitor.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Runtime.Visitor.BaseVisitor.context">
            <summary>Context used during traversal </summary>
        </member>
        <member name="F:NVelocity.Runtime.Visitor.BaseVisitor.writer">
            <summary>Writer used as the output sink </summary>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.SimpleNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.SimpleNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTprocess,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTprocess, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTExpression,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTExpression, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTAssignment,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTAssignment, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTOrNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTOrNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTAndNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTAndNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTEQNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTEQNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTNENode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTNENode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTLTNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTLTNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTGTNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTGTNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTLENode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTLENode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTGENode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTGENode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTAddNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTAddNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTSubtractNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTSubtractNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTMulNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTMulNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTDivNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTDivNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTModNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTModNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTNotNode,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTNotNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIntegerLiteral,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIntegerLiteral, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTFloatingPointLiteral, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTStringLiteral,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTStringLiteral, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIdentifier,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIdentifier, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTMethod,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTMethod, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTReference,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTReference, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTTrue,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTTrue, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTFalse,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTFalse, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTBlock,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTBlock, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTText,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTText, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIfStatement,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIfStatement, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTElseStatement,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTElseStatement, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTElseIfStatement,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTElseIfStatement, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTComment,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTComment, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTObjectArray,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTObjectArray, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTWord,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTWord, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTSetDirective,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTSetDirective, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTDirective,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTDirective, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTEscapedDirective,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTEscapedDirective, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTEscape,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTEscape, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTMap,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTMap, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTIntegerRange,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIntegerRange, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.BaseVisitor.Visit(NVelocity.Runtime.Parser.Node.ASTStop,System.Object)">
            <seealso cref="!:NVelocity.Runtime.Paser.Node.ParserVisitor.visit(NVelocity.Runtime.Paser.Node.ASTStop, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Runtime.Visitor.BaseVisitor.Writer">
            <param name="writer">
            </param>
        </member>
        <member name="P:NVelocity.Runtime.Visitor.BaseVisitor.Context">
            <param name="context">
            </param>
        </member>
        <member name="T:NVelocity.Runtime.Visitor.NodeViewMode">
            <summary> This class is simply a visitor implementation
            that traverses the AST, produced by the Velocity
            parsing process, and creates a visual structure
            of the AST. This is primarily used for
            debugging, but it useful for documentation
            as well.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <version>  $Id: NodeViewMode.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.IndentString">
            <summary>Indent child nodes to help visually identify
            the structure of the AST.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.ShowNode(NVelocity.Runtime.Parser.Node.INode,System.Object)">
            <summary> Display the type of nodes and optionally the
            first token.
            </summary>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.SimpleNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.SimpleNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTprocess,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTprocess, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTExpression,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTExpression, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTAssignment,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTAssignment, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTOrNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTOrNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTAndNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTAndNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTEQNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTEQNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTNENode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTNENode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTLTNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTLTNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTGTNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTGTNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTLENode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTLENode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTGENode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTGENode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTAddNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTAddNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTSubtractNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTSubtractNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTMulNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTMulNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTDivNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTDivNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTModNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTModNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTNotNode,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTNotNode, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTFloatingPointLiteral,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTFloatingPointLiteral, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTIntegerLiteral,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIntegerLiteral, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTStringLiteral,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTStringLiteral, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTIdentifier,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIdentifier, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTMethod,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTMethod, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTReference,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTReference, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTTrue,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTTrue, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTFalse,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTFalse, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTBlock,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTBlock, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTText,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTText, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTIfStatement,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIfStatement, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTElseStatement,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTElseStatement, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTElseIfStatement,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTElseIfStatement, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTObjectArray,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTObjectArray, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTDirective,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTDirective, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTWord,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTWord, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTSetDirective,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTSetDirective, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTEscapedDirective,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTEscapedDirective, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTEscape,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTEscape, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTMap,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTMap, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTIntegerRange,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTIntegerRange, java.lang.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.Runtime.Visitor.NodeViewMode.Visit(NVelocity.Runtime.Parser.Node.ASTStop,System.Object)">
            <seealso cref="!:org.apache.velocity.runtime.visitor.BaseVisitor.visit(NVelocity.Runtime.Paser.Node.ASTStop, java.lang.Object)">
            </seealso>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.SupportClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="T:NVelocity.SupportClass.StringEscapeUtils">
            <summary> <p>Escapes and unescapes <code>String</code>s for
            Java, Java Script, HTML, XML, and SQL.</p>
            
            </summary>
            <author>  Apache Jakarta Turbine
            </author>
            <author>  Purple Technology
            </author>
            <author>  <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a>
            </author>
            <author>  Antony Riley
            </author>
            <author>  Helge Tesgaard
            </author>
            <author>  <a href="sean@boohai.com">Sean Brown</a>
            </author>
            <author>  <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
            </author>
            <author>  Phil Steitz
            </author>
            <author>  Pete Gieser
            </author>
            <since> 2.0
            </since>
            <version>  $Id: StringEscapeUtils.java 612880 2008-01-17 17:34:43Z ggregory $
            </version>
        </member>
        <member name="M:NVelocity.SupportClass.StringEscapeUtils.EscapeJavaScript(System.String)">
            <summary> <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>
            <p>Escapes any values it finds into their JavaScript String form.
            Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>
            
            <p>So a tab becomes the characters <code>'\\'</code> and
            <code>'t'</code>.</p>
            
            <p>The only difference between Java strings and JavaScript strings
            is that in JavaScript, a single quote must be escaped.</p>
            
            <p>Example:
            <pre>
            input string: He didn't say, "Stop!"
            output string: He didn\'t say, \"Stop!\"
            </pre>
            </p>
            
            </summary>
            <param name="str"> String to escape values in, may be null
            </param>
            <returns> String with escaped values, <code>null</code> if null string input
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringEscapeUtils.escapeJavaStyleString(System.String,System.Boolean)">
            <summary> <p>Worker method for the {@link #EscapeJavaScript(String)} method.</p>
            
            </summary>
            <param name="str">String to escape values in, may be null
            </param>
            <param name="escapeSingleQuotes">escapes single quotes if <code>true</code>
            </param>
            <returns> the escaped string
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringEscapeUtils.escapeJavaStyleString(System.IO.TextWriter,System.String,System.Boolean)">
            <summary> <p>Worker method for the {@link #EscapeJavaScript(String)} method.</p>
            
            </summary>
            <param name="out">write to receieve the escaped string
            </param>
            <param name="str">String to escape values in, may be null
            </param>
            <param name="escapeSingleQuote">escapes single quotes if <code>true</code>
            </param>
            <throws>  IOException if an IOException occurs </throws>
        </member>
        <member name="M:NVelocity.SupportClass.StringEscapeUtils.hex(System.Char)">
            <summary> <p>Returns an upper case hexadecimal <code>String</code> for the given
            character.</p>
            
            </summary>
            <param name="ch">The character to convert.
            </param>
            <returns> An upper case hexadecimal <code>String</code>
            </returns>
        </member>
        <!-- 对于成员“M:NVelocity.SupportClass.StringEscapeUtils.escapeHtml(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.SupportClass.StringEscapeUtils.escapeHtml(System.IO.TextWriter,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NVelocity.SupportClass.StringEscapeUtils.EscapeXml(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.SupportClass.StringEscapeUtils.EscapeSql(System.String)">
            <summary> <p>Escapes the characters in a <code>String</code> to be suitable to pass to
            an SQL query.</p>
            
            <p>For example,
            <pre>statement.executeQuery("SELECT * FROM MOVIES WHERE TITLE='" + 
            StringEscapeUtils.EscapeSql("McHale's Navy") + 
            "'");</pre>
            </p>
            
            <p>At present, this method only turns single-quotes into doubled single-quotes
            (<code>"McHale's Navy"</code> => <code>"McHale''s Navy"</code>). It does not
            handle the cases of percent (%) or underscore (_) for use in LIKE clauses.</p>
            
            see http://www.jguru.com/faq/view.jsp?EID=8881
            </summary>
            <param name="str"> the string to escape, may be null
            </param>
            <returns> a new String, escaped for SQL, <code>null</code> if null string input
            </returns>
        </member>
        <member name="T:NVelocity.SupportClass.IntHashMap">
            <summary> <p>A hash map that uses primitive ints for the key rather than objects.</p>
            
            <p>Note that this class is for internal optimization purposes only, and may
            not be supported in future releases of Apache Commons Lang.  Utilities of
            this sort may be included in future releases of Apache Commons Collections.</p>
            
            </summary>
            <author>  Justin Couch
            </author>
            <author>  Alex Chaffee (alex@apache.org)
            </author>
            <author>  Stephen Colebourne
            </author>
            <since> 2.0
            </since>
            <version>  $Revision: 561230 $
            </version>
            <seealso cref="!:java.util.HashMap">
            </seealso>
        </member>
        <member name="F:NVelocity.SupportClass.IntHashMap.table">
            <summary> The hash table data.</summary>
        </member>
        <member name="F:NVelocity.SupportClass.IntHashMap.count">
            <summary> The total number of entries in the hash table.</summary>
        </member>
        <member name="F:NVelocity.SupportClass.IntHashMap.threshold">
            <summary> The table is rehashed when its size exceeds this threshold.  (The
            value of this field is (int)(capacity * loadFactor).)
            
            </summary>
            <serial>
            </serial>
        </member>
        <member name="F:NVelocity.SupportClass.IntHashMap.loadFactor">
            <summary> The load factor for the hashtable.
            
            </summary>
            <serial>
            </serial>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.#ctor">
            <summary> <p>Constructs a new, empty hashtable with a default capacity and load
            factor, which is <code>20</code> and <code>0.75</code> respectively.</p>
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.#ctor(System.Int32)">
            <summary> <p>Constructs a new, empty hashtable with the specified initial capacity
            and default load factor, which is <code>0.75</code>.</p>
            
            </summary>
            <param name="initialCapacity">the initial capacity of the hashtable.
            </param>
            <throws>  IllegalArgumentException if the initial capacity is less </throws>
            <summary>   than zero.
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.#ctor(System.Int32,System.Single)">
            <summary> <p>Constructs a new, empty hashtable with the specified initial
            capacity and the specified load factor.</p>
            
            </summary>
            <param name="initialCapacity">the initial capacity of the hashtable.
            </param>
            <param name="loadFactor">the load factor of the hashtable.
            </param>
            <throws>  IllegalArgumentException  if the initial capacity is less </throws>
            <summary>             than zero, or if the load factor is nonpositive.
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.size">
            <summary> <p>Returns the number of keys in this hashtable.</p>
            
            </summary>
            <returns>  the number of keys in this hashtable.
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.contains(System.Object)">
            <summary> <p>Tests if some key maps into the specified value in this hashtable.
            This operation is more expensive than the <code>containsKey</code>
            method.</p>
            
            <p>Note that this method is identical in functionality to containsValue,
            (which is part of the Map interface in the collections framework).</p>
            
            </summary>
            <param name="value">  a value to search for.
            </param>
            <returns>     <code>true</code> if and only if some key maps to the
            <code>value</code> argument in this hashtable as
            determined by the <tt>equals</tt> method;
            <code>false</code> otherwise.
            </returns>
            <throws>   NullPointerException  if the value is <code>null</code>. </throws>
            <seealso cref="M:NVelocity.SupportClass.IntHashMap.containsKey(System.Int32)">
            </seealso>
            <seealso cref="M:NVelocity.SupportClass.IntHashMap.containsValue(System.Object)">
            </seealso>
            <seealso cref="!:java.util.Map">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.containsValue(System.Object)">
            <summary> <p>Returns <code>true</code> if this HashMap maps one or more keys
            to this value.</p>
            
            <p>Note that this method is identical in functionality to contains
            (which predates the Map interface).</p>
            
            </summary>
            <param name="value">value whose presence in this HashMap is to be tested.
            </param>
            <returns> boolean <code>true</code> if the value is contained
            </returns>
            <seealso cref="!:java.util.Map">
            </seealso>
            <since> JDK1.2
            </since>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.containsKey(System.Int32)">
            <summary> <p>Tests if the specified object is a key in this hashtable.</p>
            
            </summary>
            <param name="key"> possible key.
            </param>
            <returns> <code>true</code> if and only if the specified object is a
            key in this hashtable, as determined by the <tt>equals</tt>
            method; <code>false</code> otherwise.
            </returns>
            <seealso cref="M:NVelocity.SupportClass.IntHashMap.contains(System.Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.get_Renamed(System.Int32)">
            <summary> <p>Returns the value to which the specified key is mapped in this map.</p>
            
            </summary>
            <param name="key">  a key in the hashtable.
            </param>
            <returns>  the value to which the key is mapped in this hashtable;
            <code>null</code> if the key is not mapped to any value in
            this hashtable.
            </returns>
            <seealso cref="!:Put(int, Object)">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.rehash">
            <summary> <p>Increases the capacity of and internally reorganizes this
            hashtable, in order to accommodate and access its entries more
            efficiently.</p>
            
            <p>This method is called automatically when the number of keys
            in the hashtable exceeds this hashtable's capacity and load
            factor.</p>
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.put(System.Int32,System.Object)">
            <summary> <p>Maps the specified <code>key</code> to the specified
            <code>value</code> in this hashtable. The key cannot be
            <code>null</code>. </p>
            
            <p>The value can be retrieved by calling the <code>Get</code> method
            with a key that is equal to the original key.</p>
            
            </summary>
            <param name="key">    the hashtable key.
            </param>
            <param name="value">  the value.
            </param>
            <returns> the previous value of the specified key in this hashtable,
            or <code>null</code> if it did not have one.
            </returns>
            <throws>   NullPointerException  if the key is <code>null</code>. </throws>
            <seealso cref="!:Get(int)">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.remove(System.Int32)">
            <summary> <p>Removes the key (and its corresponding value) from this
            hashtable.</p>
            
            <p>This method does nothing if the key is not present in the
            hashtable.</p>
            
            </summary>
            <param name="key">  the key that needs to be removed.
            </param>
            <returns>  the value to which the key had been mapped in this hashtable,
            or <code>null</code> if the key did not have a mapping.
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.clear">
            <summary> <p>Clears this hashtable so that it contains no keys.</p></summary>
        </member>
        <member name="P:NVelocity.SupportClass.IntHashMap.Empty">
            <summary> <p>Tests if this hashtable maps no keys to values.</p>
            
            </summary>
            <returns>  <code>true</code> if this hashtable maps no keys to values;
            <code>false</code> otherwise.
            </returns>
        </member>
        <member name="T:NVelocity.SupportClass.IntHashMap.Entry">
            <summary> <p>Innerclass that acts as a datastructure to create a new entry in the
            table.</p>
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.IntHashMap.Entry.#ctor(System.Int32,System.Int32,System.Object,NVelocity.SupportClass.IntHashMap.Entry)">
            <summary> <p>Create a new entry with the given values.</p>
            
            </summary>
            <param name="hash">The code used to hash the object with
            </param>
            <param name="key">The key used to enter this in the table
            </param>
            <param name="value">The value for this key
            </param>
            <param name="next">A reference to the next entry in the table
            </param>
        </member>
        <!-- 对于成员“T:NVelocity.SupportClass.Entities”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.SupportClass.Entities.XML">
            <summary> <p>
            The set of entities supported by standard XML.
            </p>
            </summary>
        </member>
        <member name="F:NVelocity.SupportClass.Entities.HTML32">
            <summary> <p>
            The set of entities supported by HTML 3.2.
            </p>
            </summary>
        </member>
        <member name="F:NVelocity.SupportClass.Entities.HTML40">
            <summary> <p>
            The set of entities supported by HTML 4.0.
            </p>
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.fillWithHtml40Entities(NVelocity.SupportClass.Entities)">
            <summary> <p>
            Fills the specified entities instance with HTML 40 entities.
            </p>
            
            </summary>
            <param name="entities">the instance to be filled.
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.addEntities(System.String[][])">
            <summary> <p>
            Adds entities to this entity.
            </p>
            
            </summary>
            <param name="entityArray">array of entities to be added
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.addEntity(System.String,System.Int32)">
            <summary> <p>
            Add an entity to this entity.
            </p>
            
            </summary>
            <param name="name">name of the entity
            </param>
            <param name="value">vale of the entity
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.entityName(System.Int32)">
            <summary> <p>
            Returns the name of the entity identified by the specified value.
            </p>
            
            </summary>
            <param name="value">the value to locate
            </param>
            <returns> entity name associated with the specified value
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.entityValue(System.String)">
            <summary> <p>
            Returns the value of the entity identified by the specified name.
            </p>
            
            </summary>
            <param name="name">the name to locate
            </param>
            <returns> entity value associated with the specified name
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.escape(System.String)">
            <summary> <p>
            Escapes the characters in a <code>String</code>.
            </p>
            
            <p>
            For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
            &quot;&amp;foo;&quot;
            </p>
            
            </summary>
            <param name="str">The <code>String</code> to escape.
            </param>
            <returns> A new escaped <code>String</code>.
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.escape(System.IO.TextWriter,System.String)">
            <summary> <p>
            Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
            passed.
            </p>
            
            </summary>
            <param name="writer">The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
            </param>
            <param name="str">The <code>String</code> to escape. Assumed to be a non-null value.
            </param>
            <throws>  IOException </throws>
            <summary>             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
            methods.
            
            </summary>
            <seealso cref="M:NVelocity.SupportClass.Entities.escape(System.String)">
            </seealso>
            <seealso cref="!:Writer">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.unescape(System.String)">
            <summary> <p>
            Unescapes the entities in a <code>String</code>.
            </p>
            
            <p>
            For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
            &quot;\u00A1&quot;
            </p>
            
            </summary>
            <param name="str">The <code>String</code> to escape.
            </param>
            <returns> A new escaped <code>String</code>.
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.createStringWriter(System.String)">
            <summary> Make the StringWriter 10% larger than the source String to avoid growing the writer
            
            </summary>
            <param name="str">The source string
            </param>
            <returns> A newly created StringWriter
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.unescape(System.IO.TextWriter,System.String)">
            <summary> <p>
            Unescapes the escaped entities in the <code>String</code> passed and writes the result to the
            <code>Writer</code> passed.
            </p>
            
            </summary>
            <param name="writer">The <code>Writer</code> to write the results to; assumed to be non-null.
            </param>
            <param name="str">The source <code>String</code> to unescape; assumed to be non-null.
            </param>
            <throws>  IOException </throws>
            <summary>             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
            methods.
            
            </summary>
            <seealso cref="M:NVelocity.SupportClass.Entities.escape(System.String)">
            </seealso>
            <seealso cref="!:Writer">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.doUnescape(System.IO.TextWriter,System.String,System.Int32)">
            <summary> Underlying unescape method that allows the optimisation of not starting from the 0 index again.
            
            </summary>
            <param name="writer">The <code>Writer</code> to write the results to; assumed to be non-null.
            </param>
            <param name="str">The source <code>String</code> to unescape; assumed to be non-null.
            </param>
            <param name="firstAmp">The <code>int</code> index of the first ampersand in the source String.
            </param>
            <throws>  IOException </throws>
            <summary>             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
            methods.
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.EntityMap.add(System.String,System.Int32)">
            <summary> <p>
            Add an entry to this entity map.
            </p>
            
            </summary>
            <param name="name">the entity name
            </param>
            <param name="value">the entity value
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.EntityMap.name(System.Int32)">
            <summary> <p>
            Returns the name of the entity identified by the specified value.
            </p>
            
            </summary>
            <param name="value">the value to locate
            </param>
            <returns> entity name associated with the specified value
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.EntityMap.value(System.String)">
            <summary> <p>
            Returns the value of the entity identified by the specified name.
            </p>
            
            </summary>
            <param name="name">the name to locate
            </param>
            <returns> entity value associated with the specified name
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.PrimitiveEntityMap.add(System.String,System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.PrimitiveEntityMap.name(System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.PrimitiveEntityMap.value(System.String)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.MapIntMap.add(System.String,System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.MapIntMap.name(System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.MapIntMap.value(System.String)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.HashEntityMap.#ctor">
            <summary> Constructs a new instance of <code>HashEntityMap</code>.</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.TreeEntityMap.#ctor">
            <summary> Constructs a new instance of <code>TreeEntityMap</code>.</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.LookupEntityMap.name(System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.LookupEntityMap.lookupTable">
            <summary> <p>
            Returns the lookup table for this entity map. The lookup table is created if it has not been previously.
            </p>
            
            </summary>
            <returns> the lookup table
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.LookupEntityMap.createLookupTable">
            <summary> <p>
            Creates an entity lookup table of LOOKUP_TABLE_SIZE elements, initialized with entity names.
            </p>
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.ArrayEntityMap.#ctor">
            <summary> Constructs a new instance of <code>ArrayEntityMap</code>.</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.ArrayEntityMap.#ctor(System.Int32)">
            <summary> Constructs a new instance of <code>ArrayEntityMap</code> specifying the size by which the array should
            grow.
            
            </summary>
            <param name="growBy">array will be initialized to and will grow by this amount
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.ArrayEntityMap.add(System.String,System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.ArrayEntityMap.ensureCapacity(System.Int32)">
            <summary> Verifies the capacity of the entity array, adjusting the size if necessary.
            
            </summary>
            <param name="capacity">size the array should be
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.ArrayEntityMap.name(System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.ArrayEntityMap.value(System.String)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.BinaryEntityMap.#ctor">
            <summary> Constructs a new instance of <code>BinaryEntityMap</code>.</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.BinaryEntityMap.#ctor(System.Int32)">
            <summary> Constructs a new instance of <code>ArrayEntityMap</code> specifying the size by which the underlying array
            should grow.
            
            </summary>
            <param name="growBy">array will be initialized to and will grow by this amount
            </param>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.BinaryEntityMap.binarySearch(System.Int32)">
            <summary> Performs a binary search of the entity array for the specified key. This method is based on code in
            {@link java.util.Arrays}.
            
            </summary>
            <param name="key">the key to be found
            </param>
            <returns> the index of the entity array matching the specified key
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.BinaryEntityMap.add(System.String,System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="M:NVelocity.SupportClass.Entities.BinaryEntityMap.name(System.Int32)">
            <summary> {@inheritDoc}</summary>
        </member>
        <member name="T:NVelocity.SupportClass.CharUtils">
            <summary> <p>Operations on char primitives and Character objects.</p>
            
            <p>This class tries to handle <code>null</code> input gracefully.
            An exception will not be thrown for a <code>null</code> input.
            Each method documents its behaviour in more detail.</p>
            
            </summary>
            <author>  Stephen Colebourne
            </author>
            <since> 2.1
            </since>
            <version>  $Id: CharUtils.java 437554 2006-08-28 06:21:41Z bayard $
            </version>
        </member>
        <!-- 对于成员“F:NVelocity.SupportClass.CharUtils.LF”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:NVelocity.SupportClass.CharUtils.CR”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.SupportClass.CharUtils.unicodeEscaped(System.Char)">
            <summary> <p>Converts the string to the unicode format '\u0020'.</p>
            
            <p>This format is the Java source code format.</p>
            
            <pre>
            CharUtils.unicodeEscaped(' ') = "\u0020"
            CharUtils.unicodeEscaped('A') = "\u0041"
            </pre>
            
            </summary>
            <param name="ch"> the character to convert
            </param>
            <returns> the escaped unicode string
            </returns>
        </member>
        <!-- 对于成员“T:NVelocity.SupportClass.StringUtils”忽略有格式错误的 XML 注释 -->
        <member name="F:NVelocity.SupportClass.StringUtils.EMPTY">
            <summary> The empty String <code>""</code>.</summary>
            <since> 2.0
            </since>
        </member>
        <member name="F:NVelocity.SupportClass.StringUtils.INDEX_NOT_FOUND">
            <summary> Represents a failed index search.</summary>
            <since> 2.1
            </since>
        </member>
        <member name="F:NVelocity.SupportClass.StringUtils.PAD_LIMIT">
            <summary> <p>The maximum size to which the padding constant(s) can expand.</p></summary>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.isEmpty(System.String)">
            <summary> <p>Checks if a String is empty ("") or null.</p>
            
            <pre>
            StringUtils.isEmpty(null)      = true
            StringUtils.isEmpty("")        = true
            StringUtils.isEmpty(" ")       = false
            StringUtils.isEmpty("bob")     = false
            StringUtils.isEmpty("  bob  ") = false
            </pre>
            
            <p>NOTE: This method changed in Lang version 2.0.
            It no longer trims the String.
            That functionality is available in isBlank().</p>
            
            </summary>
            <param name="str"> the String to check, may be null
            </param>
            <returns> <code>true</code> if the String is empty or null
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.strip(System.String,System.String)">
            <summary> <p>Strips any of a set of characters from the start and end of a String.
            This is similar to {@link String#trim()} but allows the characters
            to be stripped to be controlled.</p>
            
            <p>A <code>null</code> input String returns <code>null</code>.
            An empty string ("") input returns the empty string.</p>
            
            <p>If the stripChars String is <code>null</code>, whitespace is
            stripped as defined by {@link Character#isWhitespace(char)}.
            Alternatively use {@link #strip(String)}.</p>
            
            <pre>
            StringUtils.strip(null, *)          = null
            StringUtils.strip("", *)            = ""
            StringUtils.strip("abc", null)      = "abc"
            StringUtils.strip("  abc", null)    = "abc"
            StringUtils.strip("abc  ", null)    = "abc"
            StringUtils.strip(" abc ", null)    = "abc"
            StringUtils.strip("  abcyx", "xyz") = "  abc"
            </pre>
            
            </summary>
            <param name="str"> the String to remove characters from, may be null
            </param>
            <param name="stripChars"> the characters to remove, null treated as whitespace
            </param>
            <returns> the stripped String, <code>null</code> if null String input
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.stripStart(System.String,System.String)">
            <summary> <p>Strips any of a set of characters from the start of a String.</p>
            
            <p>A <code>null</code> input String returns <code>null</code>.
            An empty string ("") input returns the empty string.</p>
            
            <p>If the stripChars String is <code>null</code>, whitespace is
            stripped as defined by {@link Character#isWhitespace(char)}.</p>
            
            <pre>
            StringUtils.stripStart(null, *)          = null
            StringUtils.stripStart("", *)            = ""
            StringUtils.stripStart("abc", "")        = "abc"
            StringUtils.stripStart("abc", null)      = "abc"
            StringUtils.stripStart("  abc", null)    = "abc"
            StringUtils.stripStart("abc  ", null)    = "abc  "
            StringUtils.stripStart(" abc ", null)    = "abc "
            StringUtils.stripStart("yxabc  ", "xyz") = "abc  "
            </pre>
            
            </summary>
            <param name="str"> the String to remove characters from, may be null
            </param>
            <param name="stripChars"> the characters to remove, null treated as whitespace
            </param>
            <returns> the stripped String, <code>null</code> if null String input
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.stripEnd(System.String,System.String)">
            <summary> <p>Strips any of a set of characters from the end of a String.</p>
            
            <p>A <code>null</code> input String returns <code>null</code>.
            An empty string ("") input returns the empty string.</p>
            
            <p>If the stripChars String is <code>null</code>, whitespace is
            stripped as defined by {@link Character#isWhitespace(char)}.</p>
            
            <pre>
            StringUtils.stripEnd(null, *)          = null
            StringUtils.stripEnd("", *)            = ""
            StringUtils.stripEnd("abc", "")        = "abc"
            StringUtils.stripEnd("abc", null)      = "abc"
            StringUtils.stripEnd("  abc", null)    = "  abc"
            StringUtils.stripEnd("abc  ", null)    = "abc"
            StringUtils.stripEnd(" abc ", null)    = " abc"
            StringUtils.stripEnd("  abcyx", "xyz") = "  abc"
            </pre>
            
            </summary>
            <param name="str"> the String to remove characters from, may be null
            </param>
            <param name="stripChars"> the characters to remove, null treated as whitespace
            </param>
            <returns> the stripped String, <code>null</code> if null String input
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.containsAny(System.String,System.Char[])">
            <summary> <p>Checks if the String contains any character in the given
            set of characters.</p>
            
            <p>A <code>null</code> String will return <code>false</code>.
            A <code>null</code> or zero length search array will return <code>false</code>.</p>
            
            <pre>
            StringUtils.containsAny(null, *)                = false
            StringUtils.containsAny("", *)                  = false
            StringUtils.containsAny(*, null)                = false
            StringUtils.containsAny(*, [])                  = false
            StringUtils.containsAny("zzabyycdxx",['z','a']) = true
            StringUtils.containsAny("zzabyycdxx",['b','y']) = true
            StringUtils.containsAny("aba", ['z'])           = false
            </pre>
            
            </summary>
            <param name="str"> the String to check, may be null
            </param>
            <param name="searchChars"> the chars to search for, may be null
            </param>
            <returns> the <code>true</code> if any of the chars are found,
            <code>false</code> if no match or null input
            </returns>
            <since> 2.4
            </since>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.containsNone(System.String,System.Char[])">
            <summary> <p>Checks that the String does not contain certain characters.</p>
            
            <p>A <code>null</code> String will return <code>true</code>.
            A <code>null</code> invalid character array will return <code>true</code>.
            An empty String ("") always returns true.</p>
            
            <pre>
            StringUtils.containsNone(null, *)       = true
            StringUtils.containsNone(*, null)       = true
            StringUtils.containsNone("", *)         = true
            StringUtils.containsNone("ab", '')      = true
            StringUtils.containsNone("abab", 'xyz') = true
            StringUtils.containsNone("ab1", 'xyz')  = true
            StringUtils.containsNone("abz", 'xyz')  = false
            </pre>
            
            </summary>
            <param name="str"> the String to check, may be null
            </param>
            <param name="invalidChars"> an array of invalid chars, may be null
            </param>
            <returns> true if it contains none of the invalid chars, or is null
            </returns>
            <since> 2.0
            </since>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.replace(System.String,System.String,System.String)">
            <summary> <p>Replaces all occurrences of a String within another String.</p>
            
            <p>A <code>null</code> reference passed to this method is a no-op.</p>
            
            <pre>
            StringUtils.replace(null, *, *)        = null
            StringUtils.replace("", *, *)          = ""
            StringUtils.replace("any", null, *)    = "any"
            StringUtils.replace("any", *, null)    = "any"
            StringUtils.replace("any", "", *)      = "any"
            StringUtils.replace("aba", "a", null)  = "aba"
            StringUtils.replace("aba", "a", "")    = "b"
            StringUtils.replace("aba", "a", "z")   = "zbz"
            </pre>
            
            </summary>
            <seealso cref="!:replace(String text, String searchString, String replacement, int max)">
            </seealso>
            <param name="text"> text to search and replace in, may be null
            </param>
            <param name="searchString"> the String to search for, may be null
            </param>
            <param name="replacement"> the String to replace it with, may be null
            </param>
            <returns> the text with any replacements processed,
            <code>null</code> if null String input
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.replace(System.String,System.String,System.String,System.Int32)">
            <summary> <p>Replaces a String with another String inside a larger String,
            for the first <code>max</code> values of the search String.</p>
            
            <p>A <code>null</code> reference passed to this method is a no-op.</p>
            
            <pre>
            StringUtils.replace(null, *, *, *)         = null
            StringUtils.replace("", *, *, *)           = ""
            StringUtils.replace("any", null, *, *)     = "any"
            StringUtils.replace("any", *, null, *)     = "any"
            StringUtils.replace("any", "", *, *)       = "any"
            StringUtils.replace("any", *, *, 0)        = "any"
            StringUtils.replace("abaa", "a", null, -1) = "abaa"
            StringUtils.replace("abaa", "a", "", -1)   = "b"
            StringUtils.replace("abaa", "a", "z", 0)   = "abaa"
            StringUtils.replace("abaa", "a", "z", 1)   = "zbaa"
            StringUtils.replace("abaa", "a", "z", 2)   = "zbza"
            StringUtils.replace("abaa", "a", "z", -1)  = "zbzz"
            </pre>
            
            </summary>
            <param name="text"> text to search and replace in, may be null
            </param>
            <param name="searchString"> the String to search for, may be null
            </param>
            <param name="replacement"> the String to replace it with, may be null
            </param>
            <param name="max"> maximum number of values to replace, or <code>-1</code> if no maximum
            </param>
            <returns> the text with any replacements processed,
            <code>null</code> if null String input
            </returns>
        </member>
        <!-- 对于成员“M:NVelocity.SupportClass.StringUtils.replaceEach(System.String,System.String[],System.String[],System.Boolean,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.SupportClass.StringUtils.padding(System.Int32,System.Char)">
            <summary> <p>Returns padding using the specified delimiter repeated
            to a given length.</p>
            
            <pre>
            StringUtils.padding(0, 'e')  = ""
            StringUtils.padding(3, 'e')  = "eee"
            StringUtils.padding(-2, 'e') = IndexOutOfBoundsException
            </pre>
            
            <p>Note: this method doesn't not support padding with
            <a href="http://www.unicode.org/glossary/#supplementary_character">Unicode Supplementary Characters</a>
            as they require a pair of <code>char</code>s to be represented.
            If you are needing to support full I18N of your applications
            consider using {@link #repeat(String, int)} instead. 
            </p>
            
            </summary>
            <param name="repeat"> number of times to repeat delim
            </param>
            <param name="padChar"> character to repeat
            </param>
            <returns> String with repeated character
            </returns>
            <throws>  IndexOutOfBoundsException if <code>repeat &lt; 0</code> </throws>
            <seealso cref="!:repeat(String, int)">
            </seealso>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.rightPad(System.String,System.Int32,System.Char)">
            <summary> <p>Right pad a String with a specified character.</p>
            
            <p>The String is padded to the size of <code>size</code>.</p>
            
            <pre>
            StringUtils.rightPad(null, *, *)     = null
            StringUtils.rightPad("", 3, 'z')     = "zzz"
            StringUtils.rightPad("bat", 3, 'z')  = "bat"
            StringUtils.rightPad("bat", 5, 'z')  = "batzz"
            StringUtils.rightPad("bat", 1, 'z')  = "bat"
            StringUtils.rightPad("bat", -1, 'z') = "bat"
            </pre>
            
            </summary>
            <param name="str"> the String to pad out, may be null
            </param>
            <param name="size"> the size to pad to
            </param>
            <param name="padChar"> the character to pad with
            </param>
            <returns> right padded String or original String if no padding is necessary,
            <code>null</code> if null String input
            </returns>
            <since> 2.0
            </since>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.rightPad(System.String,System.Int32,System.String)">
            <summary> <p>Right pad a String with a specified String.</p>
            
            <p>The String is padded to the size of <code>size</code>.</p>
            
            <pre>
            StringUtils.rightPad(null, *, *)      = null
            StringUtils.rightPad("", 3, "z")      = "zzz"
            StringUtils.rightPad("bat", 3, "yz")  = "bat"
            StringUtils.rightPad("bat", 5, "yz")  = "batyz"
            StringUtils.rightPad("bat", 8, "yz")  = "batyzyzy"
            StringUtils.rightPad("bat", 1, "yz")  = "bat"
            StringUtils.rightPad("bat", -1, "yz") = "bat"
            StringUtils.rightPad("bat", 5, null)  = "bat  "
            StringUtils.rightPad("bat", 5, "")    = "bat  "
            </pre>
            
            </summary>
            <param name="str"> the String to pad out, may be null
            </param>
            <param name="size"> the size to pad to
            </param>
            <param name="padStr"> the String to pad with, null or empty treated as single space
            </param>
            <returns> right padded String or original String if no padding is necessary,
            <code>null</code> if null String input
            </returns>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.leftPad(System.String,System.Int32,System.Char)">
            <summary> <p>Left pad a String with a specified character.</p>
            
            <p>Pad to a size of <code>size</code>.</p>
            
            <pre>
            StringUtils.leftPad(null, *, *)     = null
            StringUtils.leftPad("", 3, 'z')     = "zzz"
            StringUtils.leftPad("bat", 3, 'z')  = "bat"
            StringUtils.leftPad("bat", 5, 'z')  = "zzbat"
            StringUtils.leftPad("bat", 1, 'z')  = "bat"
            StringUtils.leftPad("bat", -1, 'z') = "bat"
            </pre>
            
            </summary>
            <param name="str"> the String to pad out, may be null
            </param>
            <param name="size"> the size to pad to
            </param>
            <param name="padChar"> the character to pad with
            </param>
            <returns> left padded String or original String if no padding is necessary,
            <code>null</code> if null String input
            </returns>
            <since> 2.0
            </since>
        </member>
        <member name="M:NVelocity.SupportClass.StringUtils.leftPad(System.String,System.Int32,System.String)">
            <summary> <p>Left pad a String with a specified String.</p>
            
            <p>Pad to a size of <code>size</code>.</p>
            
            <pre>
            StringUtils.leftPad(null, *, *)      = null
            StringUtils.leftPad("", 3, "z")      = "zzz"
            StringUtils.leftPad("bat", 3, "yz")  = "bat"
            StringUtils.leftPad("bat", 5, "yz")  = "yzbat"
            StringUtils.leftPad("bat", 8, "yz")  = "yzyzybat"
            StringUtils.leftPad("bat", 1, "yz")  = "bat"
            StringUtils.leftPad("bat", -1, "yz") = "bat"
            StringUtils.leftPad("bat", 5, null)  = "  bat"
            StringUtils.leftPad("bat", 5, "")    = "  bat"
            </pre>
            
            </summary>
            <param name="str"> the String to pad out, may be null
            </param>
            <param name="size"> the size to pad to
            </param>
            <param name="padStr"> the String to pad with, null or empty treated as single space
            </param>
            <returns> left padded String or original String if no padding is necessary,
            <code>null</code> if null String input
            </returns>
        </member>
        <member name="T:NVelocity.SupportClass.URLConnectionSupport">
            <summary>
            Gives support functions to Http internet connections.
            </summary>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.SetRequestProperty(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            Sets the request property for the specified key
            </summary>
            <param name="connection">Connection used to assign the property value</param>
            <param name="key">Property name to obtain the property value</param>
            <param name="keyValue">The value to associate with the specified property</param>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetRequestProperty(System.Net.HttpWebRequest,System.String)">
            <summary>
            Gets the request property for the specified key
            </summary>
            <param name="connection">Connection used to obtain the property value</param>
            <param name="key">Property name to return it's property value</param>
            <returns>The value associated with the specified property</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetDefaultRequestProperty(System.String)">
            <summary>
            Receives a key and returns it's default property value
            </summary>
            <param name="key">Key name to obtain the default request value</param>
            <returns>The default value associated with the property</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetContentEncoding(System.Net.HttpWebRequest)">
            <summary> 
            Gets the value of the "Content-Encoding" property from the collection of headers associated with the specified HttpWebRequest
            </summary>
            <param name="request">Instance of HttpWebRequest to Get the headers from</param>
            <returns>The value of the "Content-Encoding" property if found, otherwise returns null</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetSendingDate(System.Net.HttpWebRequest)">
            <summary>
            Gets the sending date of the resource referenced by the HttpRequest
            </summary>
            <param name="request">Instance of HttpWebRequest to Get the date from</param>
            <returns>The sending date of the resource if found, otherwise 0</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetHeaderFieldKey(System.Net.HttpWebRequest,System.Int32)">
            <summary>
            Gets the key for the specified index from the KeysCollection of the specified HttpWebRequest's Headers property
            </summary>
            <param name="request">Instance HttpWebRequest to Get the key from</param>
            <param name="indexField">Index of the field to Get the corresponding key</param>
            <returns>The key for the specified index if found, otherwise null</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetLastModifiedHeaderField(System.Net.HttpWebRequest)">
            <summary>
            Gets the value of the "Last-Modified" property from the collection of headers associated with the specified HttWebRequest
            </summary>
            <param name="request">Instance of HttpWebRequest to Get the headers from</param>
            <returns>The value of the "Last-Modified" property if found, otherwise returns null</returns>
        </member>
        <member name="M:NVelocity.SupportClass.URLConnectionSupport.GetHeaderFieldDate(System.Net.HttpWebRequest,System.String,System.Int64)">
            <summary>
            Gets the value of the named field parsed as date in milliseconds
            </summary>
            <param name="request">Instance of System.Net.HttpWebRequest to Get the headers from</param>
            <param name="fieldName">Name of the header field</param>
            <param name="defaultValue">A default value to return if the value does not exist in the headers</param>
            <returns></returns>
        </member>
        <member name="T:NVelocity.Template">
            <summary> This class is used for controlling all template
            operations. This class uses a parser created
            by JavaCC to create an AST that is subsequently
            traversed by a Visitor.
            
            <pre>
            // set up and Initialize Velocity before this code block
            
            Template template = Velocity.GetTemplate("test.wm");
            Context context = new VelocityContext();
            
            context.Put("foo", "bar");
            context.Put("customer", new Customer());
            
            template.merge(context, writer);
            </pre>
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: Template.java 685724 2008-08-13 23:12:12Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Template.#ctor">
            <summary>Default constructor </summary>
        </member>
        <member name="M:NVelocity.Template.Process">
            <summary>  gets the named resource as a stream, parses and inits
            
            </summary>
            <returns> true if successful
            </returns>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  IOException problem reading input stream </throws>
        </member>
        <member name="M:NVelocity.Template.InitDocument">
            <summary>  initializes the document.  Init() is not longer
            dependant upon context, but we need to let the
            Init() carry the template name down throught for VM
            namespace features
            </summary>
            <throws>  TemplateInitException When a problem occurs during the document initialization. </throws>
        </member>
        <member name="M:NVelocity.Template.Merge(NVelocity.Context.IContext,System.IO.TextWriter)">
            <summary> The AST node structure is merged with the
            context to produce the final output.
            
            </summary>
            <param name="context">Conext with data elements accessed by template
            </param>
            <param name="writer">output writer for rendered template
            </param>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  MethodInvocationException When a method on a referenced object in the context could not invoked. </throws>
            <throws>  IOException  Might be thrown while rendering. </throws>
        </member>
        <member name="M:NVelocity.Template.Merge(NVelocity.Context.IContext,System.IO.TextWriter,System.Collections.IList)">
            <summary> The AST node structure is merged with the
            context to produce the final output.
            
            </summary>
            <param name="context">Conext with data elements accessed by template
            </param>
            <param name="writer">output writer for rendered template
            </param>
            <param name="macroLibraries">a list of template files containing macros to be used when merging
            </param>
            <throws>  ResourceNotFoundException if template not found </throws>
            <summary>          from any available source.
            </summary>
            <throws>  ParseErrorException if template cannot be parsed due </throws>
            <summary>          to syntax (or other) Error.
            </summary>
            <throws>  MethodInvocationException When a method on a referenced object in the context could not invoked. </throws>
            <throws>  IOException  Might be thrown while rendering. </throws>
            <since> 1.6
            </since>
        </member>
        <member name="T:NVelocity.Util.ArrayListWrapper">
            <summary> A class that wraps an array with a List interface.
            
            </summary>
            <author>  Chris Schultz &lt;chris@christopherschultz.net$gt;
            </author>
            <version>  $Revision: 685685 $ $Date: 2006-04-14 19:40:41 $
            </version>
            <since> 1.6
            </since>
        </member>
        <!-- 对于成员“T:NVelocity.Util.IContextAware”忽略有格式错误的 XML 注释 -->
        <member name="P:NVelocity.Util.IContextAware.Context">
            <summary> Initialize the EventHandler.</summary>
            <param name="context">
            </param>
        </member>
        <member name="T:NVelocity.Util.Introspection.AbstractChainableUberspector">
            <summary> Default implementation of a {@link ChainableUberspector chainable uberspector} that forwards all calls to the wrapped
            uberspector (when that is possible). It should be used as the base class for all chainable uberspectors.
            
            </summary>
            <version>  $Id: $
            </version>
            <since> 1.6
            </since>
            <seealso cref="!:ChainableUberspector">
            </seealso>
        </member>
        <member name="T:NVelocity.Util.Introspection.UberspectImpl">
            <summary>  Implementation of Uberspect to provide the default introspective
            functionality of Velocity
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: UberspectImpl.java 723123 2008-12-03 23:14:34Z nbubna $
            </version>
        </member>
        <member name="T:NVelocity.Util.Introspection.IUberspect">
            <summary> 'Federated' introspection/reflection interface to allow the introspection
            behavior in Velocity to be customized.
            
            </summary>
            <author>  <a href="mailto:geirm@apache.org">Geir Magusson Jr.</a>
            </author>
            <version>  $Id: Uberspect.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Util.Introspection.IUberspect.Init">
            <summary>  Initializer - will be called before use</summary>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.IUberspect.GetIterator(System.Object,NVelocity.Util.Introspection.Info)">
            <summary>  To support iteratives - #foreach()</summary>
            <param name="obj">
            </param>
            <param name="Info">
            </param>
            <returns> An Iterator.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.IUberspect.GetMethod(System.Object,System.String,System.Object[],NVelocity.Util.Introspection.Info)">
            <summary>  Returns a general method, corresponding to $foo.bar( $woogie )</summary>
            <param name="obj">
            </param>
            <param name="method">
            </param>
            <param name="args">
            </param>
            <param name="Info">
            </param>
            <returns> A Velocity Method.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.IUberspect.GetPropertyGet(System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Property getter - returns VelPropertyGet appropos for #set($foo = $bar.woogie)</summary>
            <param name="obj">
            </param>
            <param name="identifier">
            </param>
            <param name="Info">
            </param>
            <returns> A Velocity Getter.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.IUberspect.GetPropertySet(System.Object,System.String,System.Object,NVelocity.Util.Introspection.Info)">
            <summary> Property setter - returns VelPropertySet appropos for #set($foo.bar = "geir")</summary>
            <param name="obj">
            </param>
            <param name="identifier">
            </param>
            <param name="arg">
            </param>
            <param name="Info">
            </param>
            <returns> A Velocity Setter.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="T:NVelocity.Util.Introspection.IUberspectLoggable">
            <summary>  Marker interface to let an uberspector indicate it can and wants to
            Log
            
            Thanks to Paulo for the suggestion
            
            </summary>
            <author>  <a href="mailto:nbubna@apache.org">Nathan Bubna</a>
            </author>
            <author>  <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: UberspectLoggable.java 463298 2006-10-12 16:10:32Z henning $
            
            </version>
        </member>
        <member name="P:NVelocity.Util.Introspection.IUberspectLoggable.Log">
            <summary> Sets the logger.  This will be called before any calls to the
            uberspector
            </summary>
            <param name="Log">
            </param>
        </member>
        <member name="F:NVelocity.Util.Introspection.UberspectImpl.log">
            <summary>  Our runtime logger.</summary>
        </member>
        <member name="F:NVelocity.Util.Introspection.UberspectImpl.introspector">
            <summary>  the default Velocity introspector</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.Init">
            <summary>  Init - generates the Introspector. As the setup code
            makes sure that the Log gets set before this is called,
            we can Initialize the Introspector using the Log object.
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.GetIterator(System.Object,NVelocity.Util.Introspection.Info)">
            <summary>  To support iterative objects used in a <code>#foreach()</code>
            loop.
            
            </summary>
            <param name="obj">The iterative object.
            </param>
            <param name="i">Info about the object's location.
            </param>
            <returns> An {@link Iterator} object.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.GetMethod(System.Object,System.String,System.Object[],NVelocity.Util.Introspection.Info)">
            <summary>  Method</summary>
            <param name="obj">
            </param>
            <param name="methodName">
            </param>
            <param name="args">
            </param>
            <param name="i">
            </param>
            <returns> A Velocity Method.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.GetPropertyGet(System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> Property  getter</summary>
            <param name="obj">
            </param>
            <param name="identifier">
            </param>
            <param name="i">
            </param>
            <returns> A Velocity Getter Method.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.GetPropertySet(System.Object,System.String,System.Object,NVelocity.Util.Introspection.Info)">
            <summary> Property setter</summary>
            <param name="obj">
            </param>
            <param name="identifier">
            </param>
            <param name="arg">
            </param>
            <param name="i">
            </param>
            <returns> A Velocity Setter method.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.Log">
            <summary>  Sets the runtime logger - this must be called before anything
            else.
            
            </summary>
            <param name="Log">The logger instance to use.
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl">
            <summary>  Implementation of VelMethod</summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.IVelMethod">
            <summary>  Method used for regular method invocation
            
            $foo.bar()
            
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: VelMethod.java 510625 2007-02-22 19:06:28Z nbubna $
            </version>
        </member>
        <member name="M:NVelocity.Util.Introspection.IVelMethod.Invoke(System.Object,System.Object[])">
            <summary>  invocation method - called when the method invocation should be
            performed and a value returned
            </summary>
            <param name="instance">
            </param>
            <param name="parameters">
            </param>
            <returns> The resulting object.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelMethod.Cacheable">
            <summary>  specifies if this VelMethod is cacheable and able to be
            reused for this class of object it was returned for
            
            </summary>
            <returns> true if can be reused for this class, false if not
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelMethod.MethodName">
            <summary>  returns the method name used</summary>
            <returns> The method name used
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelMethod.ReturnType">
            <summary>  returns the return type of the method invoked</summary>
            <returns> The return type of the method invoked
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.#ctor(NVelocity.Util.Introspection.MethodEntry)">
            <param name="m">
            </param>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.#ctor(NVelocity.Util.Introspection.MethodEntry,System.Boolean)">
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.Invoke(System.Object,System.Object[])">
            <seealso cref="!:VelMethod.invoke(java.lang.Object, java.lang.Object[])">
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.DoInvoke(System.Object,System.Object[])">
            <summary> Offers an extension point for subclasses (in alternate Uberspects)
            to alter the invocation after any array wrapping or varargs handling
            has already been completed.
            </summary>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.handleVarArg(System.Type,System.Int32,System.Object[])">
            <param name="type">The vararg class type (aka component type
            of the expected array arg)
            </param>
            <param name="index">The index of the vararg in the method declaration
            (This will always be one less than the number of
            expected arguments.)
            </param>
            <param name="parameters">The parameters parameters being passed to this method
            </param>
            <returns>s The parameters parameters adjusted for the varargs in order
            to fit the method declaration.
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.VarArg">
            <returns> true if this method can accept a variable number of arguments
            </returns>
            <since> 1.6
            </since>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.Cacheable">
            <seealso cref="!:org.apache.velocity.util.introspection.VelMethod.isCacheable()">
            </seealso>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.MethodName">
            <seealso cref="!:org.apache.velocity.util.introspection.VelMethod.getMethodName()">
            </seealso>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelMethodImpl.ReturnType">
            <seealso cref="!:org.apache.velocity.util.introspection.VelMethod.getReturnType()">
            </seealso>
        </member>
        <member name="T:NVelocity.Util.Introspection.UberspectImpl.VelGetterImpl">
            <summary> 
            
            </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.IVelPropertyGet">
            <summary>  Interface defining a 'getter'.  For uses when looking for resolution of
            property references
            
            $foo.bar
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: VelPropertyGet.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Util.Introspection.IVelPropertyGet.Invoke(System.Object)">
            <summary>  invocation method - called when the 'Get action' should be
            preformed and a value returned
            </summary>
            <param name="instance">
            </param>
            <returns> The resulting Object.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelPropertyGet.Cacheable">
            <summary>  specifies if this VelPropertyGet is cacheable and able to be
            reused for this class of object it was returned for
            
            </summary>
            <returns> true if can be reused for this class, false if not
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelPropertyGet.MethodName">
            <summary>  returns the method name used to return this 'property'</summary>
            <returns> The method name used to return this 'property'
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelGetterImpl.#ctor(NVelocity.Runtime.Parser.Node.AbstractExecutor)">
            <param name="exec">
            </param>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelGetterImpl.Invoke(System.Object)">
            <seealso cref="!:org.apache.velocity.util.introspection.VelPropertyGet.invoke(java.lang.Object)">
            </seealso>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelGetterImpl.Cacheable">
            <seealso cref="!:org.apache.velocity.util.introspection.VelPropertyGet.isCacheable()">
            </seealso>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelGetterImpl.MethodName">
            <seealso cref="!:org.apache.velocity.util.introspection.VelPropertyGet.getMethodName()">
            </seealso>
        </member>
        <member name="T:NVelocity.Util.Introspection.UberspectImpl.VelSetterImpl">
            <summary> </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.IVelPropertySet">
            <summary>  Interface used for setting values that appear to be properties in
            Velocity.  Ex.
            
            #set($foo.bar = "hello")
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: VelPropertySet.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="M:NVelocity.Util.Introspection.IVelPropertySet.Invoke(System.Object,System.Object)">
            <summary>  method used to set the value in the object
            
            </summary>
            <param name="instance">Object on which the method will be called with the arg
            </param>
            <param name="arg">value to be set
            </param>
            <returns> the value returned from the set operation (impl specific)
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelPropertySet.Cacheable">
            <summary>  specifies if this VelPropertySet is cacheable and able to be
            reused for this class of object it was returned for
            
            </summary>
            <returns> true if can be reused for this class, false if not
            </returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.IVelPropertySet.MethodName">
            <summary>  returns the method name used to set this 'property'</summary>
            <returns> The method name used to set this 'property'
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelSetterImpl.#ctor(NVelocity.Runtime.Parser.Node.SetExecutor)">
            <param name="setExecutor">
            </param>
        </member>
        <member name="M:NVelocity.Util.Introspection.UberspectImpl.VelSetterImpl.Invoke(System.Object,System.Object)">
            <summary> Invoke the found Set Executor.
            
            </summary>
            <param name="instance">is the Object to invoke it on.
            </param>
            <param name="value">in the Value to set.
            </param>
            <returns> The resulting Object.
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelSetterImpl.Cacheable">
            <seealso cref="!:org.apache.velocity.util.introspection.VelPropertySet.isCacheable()">
            </seealso>
        </member>
        <member name="P:NVelocity.Util.Introspection.UberspectImpl.VelSetterImpl.MethodName">
            <seealso cref="!:org.apache.velocity.util.introspection.VelPropertySet.getMethodName()">
            </seealso>
        </member>
        <member name="T:NVelocity.Util.Introspection.IChainableUberspector">
            <summary> Interface that marks uberspectors as chainable, meaning that multiple uberspectors can be
            combined in a chain (using the Decorator pattern).
            
            </summary>
            <version>  $Id: $
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.IChainableUberspector.Wrap(NVelocity.Util.Introspection.IUberspect)">
            <summary> Specify the decorated Uberspector
            
            </summary>
            <param name="inner">The decorated uberspector.
            </param>
        </member>
        <member name="F:NVelocity.Util.Introspection.AbstractChainableUberspector.inner">
            <summary>The wrapped (decorated) uberspector. </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.AbstractChainableUberspector.Wrap(NVelocity.Util.Introspection.IUberspect)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:ChainableUberspector.wrap(org.apache.velocity.util.introspection.Uberspect)">
            </seealso>
            <seealso cref="F:NVelocity.Util.Introspection.AbstractChainableUberspector.inner">
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.AbstractChainableUberspector.Init">
            <summary> Init - the chainable uberspector is responsible for the initialization of the wrapped uberspector
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.Init()">
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.AbstractChainableUberspector.GetIterator(System.Object,NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getIterator(java.lang.Object,">
            org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.AbstractChainableUberspector.GetMethod(System.Object,System.String,System.Object[],NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getMethod(java.lang.Object, java.lang.String,">
            java.lang.Object[], org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.AbstractChainableUberspector.GetPropertyGet(System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getPropertyGet(java.lang.Object, java.lang.String,">
            org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.AbstractChainableUberspector.GetPropertySet(System.Object,System.String,System.Object,NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getPropertySet(java.lang.Object, java.lang.String,">
            java.lang.Object, org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="T:NVelocity.Util.Introspection.ClassMap">
            <summary> A cache of introspection information for a specific class instance.
            Keys {@link java.lang.reflect.Method} objects by a concatenation of the
            method name and the names of classes that make up the parameters.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:bob@werken.com">Bob McWhirter</a>
            </author>
            <author>  <a href="mailto:szegedia@freemail.hu">Attila Szegedi</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <author>  Nathan Bubna
            </author>
            <version>  $Id: ClassMap.java 698376 2008-09-23 22:15:49Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Util.Introspection.ClassMap.log">
            <summary>Class logger </summary>
        </member>
        <member name="F:NVelocity.Util.Introspection.ClassMap.clazz">
            <summary> Class passed into the constructor used to as
            the basis for the Method map.
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.ClassMap.#ctor(System.Type,NVelocity.Runtime.Log.Log)">
            <summary> Standard constructor</summary>
            <param name="clazz">The class for which this ClassMap gets constructed.
            </param>
        </member>
        <member name="M:NVelocity.Util.Introspection.ClassMap.FindMethod(System.String,System.Object[])">
            <summary> Find a Method using the method name and parameter objects.
            
            </summary>
            <param name="name">The method name to look up.
            </param>
            <param name="params">An array of parameters for the method.
            </param>
            <returns> A Method object representing the method to invoke or null.
            </returns>
            <throws>  MethodMap.AmbiguousException When more than one method is a match for the parameters. </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.ClassMap.CachedClass">
            <summary> Returns the class object whose methods are cached by this map.
            
            </summary>
            <returns> The class object whose methods are cached by this map.
            </returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.IIntrospectorCache">
            <summary> The introspector cache API definition.
            
            </summary>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: IntrospectorCache.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.IIntrospectorCache.Clear">
            <summary> Clears the internal cache.</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IIntrospectorCache.Get(System.Type)">
            <summary> Lookup a given Class object in the cache. If it does not exist, 
            check whether this is due to a class change and purge the caches
            eventually.
            
            </summary>
            <param name="c">The class to look up.
            </param>
            <returns> A ClassMap object or null if it does not exist in the cache.
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.IIntrospectorCache.Put(System.Type)">
            <summary> Creates a class map for specific class and registers it in the
            cache.  Also adds the qualified name to the name-&gt;class map
            for later Classloader change detection.
            
            </summary>
            <param name="c">The class for which the class map gets generated.
            </param>
            <returns> A ClassMap object.
            </returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.IntrospectionCacheData">
            <summary>  Holds information for node-local context data introspection
            information.
            
            </summary>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: IntrospectionCacheData.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectionCacheData.Thingy">
            <summary>  Object to pair with class - currently either a Method or
            AbstractExecutor. It can be used in any way the using node
            wishes.
            </summary>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectionCacheData.ContextData">
            <summary>  Class of context data object associated with the introspection
            information
            </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.IntrospectionUtils">
            <summary> </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:bob@werken.com">Bob McWhirter</a>
            </author>
            <author>  <a href="mailto:Christoph.Reck@dlr.de">Christoph Reck</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:szegedia@freemail.hu">Attila Szegedi</a>
            </author>
            <author>  Nathan Bubna
            </author>
            <version>  $Id: IntrospectionUtils.java 476785 2006-11-19 10:06:21Z henning $
            </version>
            <since> 1.6
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectionUtils.IsMethodInvocationConvertible(System.Type,System.Type,System.Boolean)">
            <summary> Determines whether a type represented by a class object is
            convertible to another type represented by a class object using a
            method invocation conversion, treating object types of primitive
            types as if they were primitive types (that is, a Boolean parameters
            parameter type matches boolean primitive formal type). This behavior
            is because this method is used to determine applicable methods for
            an parameters parameter list, and primitive types are represented by
            their object duals in reflective method calls.
            
            </summary>
            <param name="formal">the formal parameter type to which the parameters
            parameter type should be convertible
            </param>
            <param name="parameters">the parameters parameter type.
            </param>
            <param name="possibleVarArg">whether or not we're dealing with the last parameter
            in the method declaration
            </param>
            <returns> true if either formal type is assignable from parameters type,
            or formal is a primitive type and parameters is its corresponding object
            type or an object type of a primitive type that can be converted to
            the formal type.
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectionUtils.IsStrictMethodInvocationConvertible(System.Type,System.Type,System.Boolean)">
            <summary> Determines whether a type represented by a class object is
            convertible to another type represented by a class object using a
            method invocation conversion, without matching object and primitive
            types. This method is used to determine the more specific type when
            comparing signatures of methods.
            
            </summary>
            <param name="formal">the formal parameter type to which the parameters
            parameter type should be convertible
            </param>
            <param name="parameters">the parameters parameter type.
            </param>
            <param name="possibleVarArg">whether or not we're dealing with the last parameter
            in the method declaration
            </param>
            <returns> true if either formal type is assignable from parameters type,
            or formal and parameters are both primitive types and parameters can be
            subject to widening conversion to formal.
            </returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.Introspector">
            <summary> This basic function of this class is to return a Method
            object for a particular class given the name of a method
            and the parameters to the method in the form of an Object[]
            
            The first time the Introspector sees a
            class it creates a class method map for the
            class in question. Basically the class method map
            is a Hastable where Method objects are keyed by a
            concatenation of the method name and the names of
            classes that make up the parameters.
            
            For example, a method with the following signature:
            
            public void method(String a, StringBuffer b)
            
            would be mapped by the key:
            
            "method" + "java.lang.String" + "java.lang.StringBuffer"
            
            This mapping is performed for all the methods in a class
            and stored for
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:bob@werken.com">Bob McWhirter</a>
            </author>
            <author>  <a href="mailto:szegedia@freemail.hu">Attila Szegedi</a>
            </author>
            <author>  <a href="mailto:paulo.gaspar@krankikom.de">Paulo Gaspar</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: Introspector.java 687177 2008-08-19 22:00:32Z nbubna $
            </version>
        </member>
        <member name="T:NVelocity.Util.Introspection.IntrospectorBase">
            <summary> Lookup a a Method object for a particular class given the name of a method
            and its parameters.
            
            The first time the Introspector sees a
            class it creates a class method map for the
            class in question. Basically the class method map
            is a Hashtable where Method objects are keyed by a
            concatenation of the method name and the names of
            classes that make up the parameters.
            
            For example, a method with the following signature:
            
            public void method(String a, StringBuffer b)
            
            would be mapped by the key:
            
            "method" + "java.lang.String" + "java.lang.StringBuffer"
            
            This mapping is performed for all the methods in a class
            and stored for.
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:bob@werken.com">Bob McWhirter</a>
            </author>
            <author>  <a href="mailto:szegedia@freemail.hu">Attila Szegedi</a>
            </author>
            <author>  <a href="mailto:paulo.gaspar@krankikom.de">Paulo Gaspar</a>
            </author>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: IntrospectorBase.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectorBase.log">
            <summary>Class logger </summary>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectorBase.introspectorCache">
            <summary>The Introspector Cache </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectorBase.#ctor(NVelocity.Runtime.Log.Log)">
            <summary> C'tor.</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectorBase.GetMethod(System.Type,System.String,System.Object[])">
            <summary> Gets the method defined by <code>name</code> and
            <code>params</code> for the Class <code>c</code>.
            
            </summary>
            <param name="c">Class in which the method search is taking place
            </param>
            <param name="name">Name of the method being searched for
            </param>
            <param name="params">An array of Objects (not Classes) that describe the
            the parameters
            
            </param>
            <returns> The desired Method object.
            </returns>
            <throws>  IllegalArgumentException When the parameters passed in can not be used for introspection. </throws>
            <throws>  MethodMap.AmbiguousException When the method map contains more than one match for the requested signature. </throws>
        </member>
        <member name="P:NVelocity.Util.Introspection.IntrospectorBase.IntrospectorCache">
            <summary> Return the internal IntrospectorCache object.
            
            </summary>
            <returns> The internal IntrospectorCache object.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.Introspector.#ctor(NVelocity.Runtime.Log.Log)">
            <param name="Log">A LogMessage object to use for the introspector.
            </param>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.Introspector.GetMethod(System.Type,System.String,System.Object[])">
            <summary> Gets the method defined by <code>name</code> and
            <code>params</code> for the Class <code>c</code>.
            
            </summary>
            <param name="c">Class in which the method search is taking place
            </param>
            <param name="name">Name of the method being searched for
            </param>
            <param name="params">An array of Objects (not Classes) that describe the
            the parameters
            
            </param>
            <returns> The desired Method object.
            </returns>
            <throws>  IllegalArgumentException When the parameters passed in can not be used for introspection. </throws>
        </member>
        <member name="T:NVelocity.Util.Introspection.IntrospectorCacheImpl">
            <summary> This is the internal introspector cache implementation.
            
            </summary>
            <author>  <a href="mailto:henning@apache.org">Henning P. Schmiedehausen</a>
            </author>
            <version>  $Id: IntrospectorCacheImpl.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectorCacheImpl.CACHEDUMP_MSG">
            <summary> define a public string so that it can be looked for if interested</summary>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectorCacheImpl.log">
            <summary>Class logger </summary>
        </member>
        <member name="F:NVelocity.Util.Introspection.IntrospectorCacheImpl.classMapCache">
            <summary> Holds the method maps for the classes we know about. Map: Class --&gt; ClassMap object.</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectorCacheImpl.#ctor(NVelocity.Runtime.Log.Log)">
            <summary> C'tor</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectorCacheImpl.Clear">
            <summary> Clears the internal cache.</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectorCacheImpl.Get(System.Type)">
            <summary> Lookup a given Class object in the cache. If it does not exist, 
            check whether this is due to a class change and purge the caches
            eventually.
            
            </summary>
            <param name="c">The class to look up.
            </param>
            <returns> A ClassMap object or null if it does not exist in the cache.
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.IntrospectorCacheImpl.Put(System.Type)">
            <summary> Creates a class map for specific class and registers it in the
            cache.  Also adds the qualified name to the name-&gt;class map
            for later Classloader change detection.
            
            </summary>
            <param name="c">The class for which the class map gets generated.
            </param>
            <returns> A ClassMap object.
            </returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.LinkingUberspector">
            <summary> <p>
            When the runtime.introspection.uberspect configuration property contains several
            uberspector class names, it means those uberspectors will be chained. When an
            uberspector in the list other than the leftmost does not implement ChainableUberspector,
            then this utility class is used to provide a basic default chaining where the
            first non-null result is kept for each introspection call.
            </p>
            
            </summary>
            <since> 1.6
            </since>
            <seealso cref="!:ChainableUberspector">
            </seealso>
            <version>  $Id: LinkingUberspector.java 10959 2008-07-01 00:12:29Z sdumitriu $
            </version>
        </member>
        <member name="M:NVelocity.Util.Introspection.LinkingUberspector.#ctor(NVelocity.Util.Introspection.IUberspect,NVelocity.Util.Introspection.IUberspect)">
            <summary> Constructor that takes the two uberspectors to link</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.LinkingUberspector.Init">
            <summary> {@inheritDoc}
            <p>
            Init both wrapped uberspectors
            </p>
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.Init()">
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.LinkingUberspector.GetIterator(System.Object,NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getIterator(java.lang.Object,">
            org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.LinkingUberspector.GetMethod(System.Object,System.String,System.Object[],NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getMethod(java.lang.Object, java.lang.String,">
            java.lang.Object[], org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.LinkingUberspector.GetPropertyGet(System.Object,System.String,NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getPropertyGet(java.lang.Object, java.lang.String,">
            org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="M:NVelocity.Util.Introspection.LinkingUberspector.GetPropertySet(System.Object,System.String,System.Object,NVelocity.Util.Introspection.Info)">
            <summary> {@inheritDoc}
            
            </summary>
            <seealso cref="!:org.apache.velocity.util.introspection.Uberspect.getPropertySet(java.lang.Object, java.lang.String,">
            java.lang.Object, org.apache.velocity.util.introspection.Info)
            </seealso>
        </member>
        <member name="T:NVelocity.Util.Introspection.MethodEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodEntry.#ctor(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodEntry.#ctor(System.Reflection.MethodInfo,NVelocity.Util.Introspection.IMethodInvoker)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="invoker"></param>
        </member>
        <member name="P:NVelocity.Util.Introspection.MethodEntry.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:NVelocity.Util.Introspection.MethodEntry.Invoker">
            <summary>
            
            </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.IMethodInvoker">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IMethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.MethodInvoker">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodInvoker.#ctor(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodInvoker.CreateInvokeDelegate(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodInvoker.NVelocity#Util#Introspection#IMethodInvoker#Invoke(System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.MethodInvoker.MethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.MethodMap">
            <summary> </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:bob@werken.com">Bob McWhirter</a>
            </author>
            <author>  <a href="mailto:Christoph.Reck@dlr.de">Christoph Reck</a>
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:szegedia@freemail.hu">Attila Szegedi</a>
            </author>
            <version>  $Id: MethodMap.java 723123 2008-12-03 23:14:34Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Util.Introspection.MethodMap.methodByNameMap">
            <summary> Keep track of all methods with the same name.</summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodMap.add(System.Reflection.MethodInfo)">
            <summary> Add a method to a list of methods by name.
            For a particular class we are keeping track
            of all the methods with the same name.
            </summary>
            <param name="method">
            </param>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodMap.get_Renamed(System.String)">
            <summary> Return a list of methods with the same name.
            
            </summary>
            <param name="key">
            </param>
            <returns> List list of methods
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodMap.find(System.String,System.Object[])">
            <summary>  <p>
            Find a method.  Attempts to find the
            most specific applicable method using the
            algorithm described in the JLS section
            15.12.2 (with the exception that it can't
            distinguish a primitive type argument from
            an object type argument, since in reflection
            primitive type arguments are represented by
            their object counterparts, so for an argument of
            type (say) java.lang.Integer, it will not be able
            to decide between a method that takes int and a
            method that takes java.lang.Integer as a parameter.
            </p>
            
            <p>
            This turns out to be a relatively rare case
            where this is needed - however, functionality
            like this is needed.
            </p>
            
            </summary>
            <param name="methodName">name of method
            </param>
            <param name="args">the parameters arguments with which the method is called
            </param>
            <returns> the most specific applicable method, or null if no
            method is applicable.
            </returns>
            <throws>  AmbiguousException if there is more than one maximally </throws>
            <summary>  specific applicable method
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodMap.compare(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[])">
            <summary> Determines which method signature (represented by a class array) is more
            specific. This defines a partial ordering on the method signatures.
            </summary>
            <param name="c1">first signature to Compare
            </param>
            <param name="c2">second signature to Compare
            </param>
            <returns> MORE_SPECIFIC if c1 is more specific than c2, LESS_SPECIFIC if
            c1 is less specific than c2, INCOMPARABLE if they are incomparable.
            </returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.MethodMap.isApplicable(System.Reflection.MethodInfo,System.Type[])">
            <summary> Returns true if the supplied method is applicable to parameters
            argument types.
            
            </summary>
            <param name="method">method that will be called
            </param>
            <param name="classes">arguments to method
            </param>
            <returns> true if method is applicable to arguments
            </returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.MethodMap.AmbiguousException">
            <summary>  Simple distinguishable exception, used when
            we run across ambiguous overloading.  Caught
            by the introspector.
            </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.ISecureIntrospectorControl">
            <summary> Interface used to determine which methods are allowed to be executed.
            
            </summary>
            <author>  <a href="Will Glass-Husain">wglass@forio.com</a>
            </author>
            <version>  $Id: SecureIntrospectorControl.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Util.Introspection.ISecureIntrospectorControl.CheckObjectExecutePermission(System.Type,System.String)">
            <summary> Determine which methods and classes to prevent from executing.  
            
            </summary>
            <param name="clazz">Class for which method is being called
            </param>
            <param name="method">method being called.  This may be null in the case of a call to iterator, Get, or set method
            
            </param>
            <returns> true if method may be called on object
            </returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.IPropertyAccessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.IPropertyAccessor.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:NVelocity.Util.Introspection.PropertyAccessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:NVelocity.Util.Introspection.PropertyAccessor.InitializeGet(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:NVelocity.Util.Introspection.PropertyAccessor.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:NVelocity.Util.Introspection.PropertyAccessor.NVelocity#Util#Introspection#IPropertyAccessor#GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:NVelocity.Util.Introspection.PropertyAccessor.PropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:NVelocity.Util.Introspection.PropertyEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.PropertyEntry.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:NVelocity.Util.Introspection.PropertyEntry.#ctor(System.Reflection.PropertyInfo,NVelocity.Util.Introspection.IPropertyAccessor)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="accessor"></param>
        </member>
        <member name="P:NVelocity.Util.Introspection.PropertyEntry.Property">
            <summary>
            
            </summary>
        </member>
        <member name="P:NVelocity.Util.Introspection.PropertyEntry.Accessor">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:NVelocity.Util.Introspection.SecureIntrospectorImpl”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Util.Introspection.SecureIntrospectorImpl.GetMethod(System.Type,System.String,System.Object[])">
            <summary> Get the Method object corresponding to the given class, name and parameters.
            Will check for appropriate Execute permissions and return null if the method
            is not allowed to be executed.
            
            </summary>
            <param name="clazz">Class on which method will be called
            </param>
            <param name="methodName">Name of method to be called
            </param>
            <param name="params">array of parameters to method
            </param>
            <returns> Method object retrieved by Introspector
            </returns>
            <throws>  IllegalArgumentException The parameter passed in were incorrect. </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.SecureIntrospectorImpl.CheckObjectExecutePermission(System.Type,System.String)">
            <summary> Determine which methods and classes to prevent from executing.  Always blocks
            methods wait() and notify().  Always allows methods on Number, Boolean, and String.
            Prohibits method calls on classes related to reflection and system operations.
            For the complete list, see the properties <code>introspector.restrict.classes</code>
            and <code>introspector.restrict.packages</code>.
            
            </summary>
            <param name="clazz">Class on which method will be called
            </param>
            <param name="methodName">Name of method to be called
            </param>
            <seealso cref="!:org.apache.velocity.util.introspection.SecureIntrospectorControl.CheckObjectExecutePermission(java.lang.Class, java.lang.String)">
            </seealso>
        </member>
        <!-- 对于成员“T:NVelocity.Util.Introspection.SecureUberspector”忽略有格式错误的 XML 注释 -->
        <member name="M:NVelocity.Util.Introspection.SecureUberspector.Init">
            <summary>  Init - generates the Introspector. As the setup code
            makes sure that the Log gets set before this is called,
            we can Initialize the Introspector using the Log object.
            </summary>
        </member>
        <member name="M:NVelocity.Util.Introspection.SecureUberspector.GetIterator(System.Object,NVelocity.Util.Introspection.Info)">
            <summary> Get an iterator from the given object.  Since the superclass method
            this secure version checks for Execute permission.
            
            </summary>
            <param name="obj">object to iterate over
            </param>
            <param name="i">line, column, template Info
            </param>
            <returns> Iterator for object
            </returns>
            <throws>  Exception </throws>
        </member>
        <member name="M:NVelocity.Util.Introspection.SecureUberspector.SetRuntimeServices(NVelocity.Runtime.IRuntimeServices)">
            <summary> Store the RuntimeServices before the object is initialized..</summary>
            <param name="rs">RuntimeServices object for initialization
            </param>
        </member>
        <member name="T:NVelocity.Util.ITemplateNumber">
            <summary> Any object in the context which implements TemplateNumber will be treated
            as a number for the purposes of arithmetic operations and comparison.
            
            </summary>
            <author>  <a href="mailto:wglass@forio.com">Will Glass-Husain</a>
            </author>
            <since> 1.5
            </since>
        </member>
        <member name="P:NVelocity.Util.ITemplateNumber.AsNumber">
            <summary> Returns a Number that can be used in a template.</summary>
            <returns> A Number that can be used in a template.
            </returns>
        </member>
        <member name="T:NVelocity.Util.SimplePool`1">
            <summary> Simple object pool. Based on ThreadPool and few other classes
            
            The pool will ignore overflow and return null if empty.
            
            </summary>
            <author>  Gal Shachor
            </author>
            <author>  Costin
            </author>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <version>  $Id: SimplePool.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="F:NVelocity.Util.SimplePool`1.max">
            <summary>  max amount of objects to be managed
            set via CTOR
            </summary>
        </member>
        <member name="F:NVelocity.Util.SimplePool`1.current">
            <summary>  index of previous to next
            free slot
            </summary>
        </member>
        <member name="M:NVelocity.Util.SimplePool`1.#ctor(System.Int32)">
            <param name="max">
            </param>
        </member>
        <member name="M:NVelocity.Util.SimplePool`1.Put(`0)">
            <summary> Add the object to the pool, silent nothing if the pool is full</summary>
            <param name="o">
            </param>
        </member>
        <member name="M:NVelocity.Util.SimplePool`1.Get">
            <summary> Get an object from the pool, null if the pool is empty.</summary>
            <returns> The object from the pool.
            </returns>
        </member>
        <member name="P:NVelocity.Util.SimplePool`1.Max">
            <summary> Return the size of the pool</summary>
            <returns> The pool size.
            </returns>
        </member>
        <member name="P:NVelocity.Util.SimplePool`1.Pool">
            <summary>   for testing purposes, so we can examine the pool
            
            </summary>
            <returns> Array of Objects in the pool.
            </returns>
        </member>
        <member name="T:NVelocity.Util.StringUtils">
            <summary> This class provides some methods for dynamically
            invoking methods in objects, and some string
            manipulation methods used by torque. The string
            methods will soon be moved into the turbine
            string utilities class.
            
            </summary>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>
            </author>
            <version>  $Id: StringUtils.java 685685 2008-08-13 21:43:27Z nbubna $
            </version>
        </member>
        <member name="F:NVelocity.Util.StringUtils.EOL">
            <summary> Line separator for the OS we are operating on.</summary>
        </member>
        <member name="M:NVelocity.Util.StringUtils.Chop(System.String,System.Int32,System.String)">
            <summary> Chop i characters off the end of a string.
            A 2 character EOL will count as 1 character.
            
            </summary>
            <param name="s">String to chop.
            </param>
            <param name="i">Number of characters to chop.
            </param>
            <param name="eol">A String representing the EOL (end of line).
            </param>
            <returns> String with processed answer.
            </returns>
        </member>
        <member name="M:NVelocity.Util.StringUtils.NormalizePath(System.String)">
            <summary> Return a context-relative path, beginning with a "/", that represents
            the canonical version of the specified path after ".." and "." elements
            are resolved out.  If the specified path attempts to go outside the
            boundaries of the current context (i.e. too many ".." path elements
            are present), return <code>null</code> instead.
            
            </summary>
            <param name="path">Path to be normalized
            </param>
            <returns> String normalized path
            </returns>
        </member>
        <member name="M:NVelocity.Util.StringUtils.FileContentsToString(System.String,System.Text.Encoding)">
            <summary> Read the contents of a file and place them in
            a string object.
            
            </summary>
            <param name="file">path to file.
            </param>
            <returns> String contents of the file.
            </returns>
        </member>
        <member name="M:NVelocity.Util.StringUtils.TrimStrings(System.Collections.Generic.IList{System.String})">
            <summary> Trim all strings in a List.  Changes the strings in the existing list.</summary>
            <param name="list">
            </param>
            <returns> List of trimmed strings.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="M:NVelocity.Util.StringUtils.NullTrim(System.String)">
            <summary> Trim the string, but pass a null through.</summary>
            <param name="s">
            </param>
            <returns> List of trimmed Strings.
            </returns>
            <since> 1.5
            </since>
        </member>
        <member name="T:NVelocity.VelocityContext">
            <summary>  General purpose implemention of the application Context
            interface for general application use.  This class should
            be used in place of the original Context class.
            
            </summary>
            <seealso cref="!:java.util.HashMap )">
            for data storage.
            
            This context implementation cannot be shared between threads
            without those threads synchronizing access between them, as
            the HashMap is not synchronized, nor are some of the fundamentals
            of AbstractContext.  If you need to share a Context between
            threads with simultaneous access for some reason, please create
            your own and extend the interface Context
            
            </seealso>
            <seealso cref="!:org.apache.velocity.context.Context">
            
            </seealso>
            <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
            </author>
            <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
            </author>
            <author>  <a href="mailto:fedor.karpelevitch@home.com">Fedor Karpelevitch</a>
            </author>
            <author>  <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>
            </author>
            <version>  $Id: VelocityContext.java 463298 2006-10-12 16:10:32Z henning $
            </version>
        </member>
        <member name="F:NVelocity.VelocityContext.context">
            <summary>  Storage for key/value pairs.</summary>
        </member>
        <member name="M:NVelocity.VelocityContext.#ctor">
            <summary>  Creates a new instance (with no inner context).</summary>
        </member>
        <member name="M:NVelocity.VelocityContext.#ctor(System.Collections.IDictionary)">
            <summary>  Creates a new instance with the provided storage (and no inner
            context).
            </summary>
            <param name="context">
            </param>
        </member>
        <member name="M:NVelocity.VelocityContext.#ctor(NVelocity.Context.IContext)">
            <summary>  Chaining constructor, used when you want to
            wrap a context in another.  The inner context
            will be 'read only' - Put() calls to the
            wrapping context will only effect the outermost
            context
            
            </summary>
            <param name="innerContext">The <code>Context</code> implementation to
            wrap.
            </param>
        </member>
        <member name="M:NVelocity.VelocityContext.#ctor(System.Collections.IDictionary,NVelocity.Context.IContext)">
            <summary>  Initializes internal storage (never to <code>null</code>), and
            inner context.
            
            </summary>
            <param name="context">Internal storage, or <code>null</code> to
            create default storage.
            </param>
            <param name="innerContext">Inner context.
            </param>
        </member>
        <member name="M:NVelocity.VelocityContext.InternalGet(System.String)">
            <summary>  retrieves value for key from internal
            storage
            
            </summary>
            <param name="key">name of value to Get
            </param>
            <returns> value as object
            </returns>
        </member>
        <member name="M:NVelocity.VelocityContext.InternalPut(System.String,System.Object)">
            <summary>  stores the value for key to internal
            storage
            
            </summary>
            <param name="key">name of value to store
            </param>
            <param name="value">value to store
            </param>
            <returns> previous value of key as Object
            </returns>
        </member>
        <member name="M:NVelocity.VelocityContext.InternalContainsKey(System.Object)">
            <summary>  determines if there is a value for the
            given key
            
            </summary>
            <param name="key">name of value to check
            </param>
            <returns> true if non-null value in store
            </returns>
        </member>
        <member name="M:NVelocity.VelocityContext.InternalGetKeys">
            <summary>  returns array of keys
            
            </summary>
            <returns> keys as []
            </returns>
        </member>
        <member name="M:NVelocity.VelocityContext.InternalRemove(System.Object)">
            <summary>  remove a key/value pair from the
            internal storage
            
            </summary>
            <param name="key">name of value to remove
            </param>
            <returns> value removed
            </returns>
        </member>
        <member name="M:NVelocity.VelocityContext.Clone">
            <summary> Clones this context object.
            
            </summary>
            <returns> A deep copy of this <code>Context</code>.
            </returns>
        </member>
    </members>
</doc>
